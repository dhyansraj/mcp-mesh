apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-agent-code
  namespace: mcp-mesh
data:
  # Working hello world agent from Docker setup
  hello_world.py: |
    #!/usr/bin/env python3
    """
    MCP Mesh Hello World Example

    This example demonstrates the core concepts of MCP Mesh:
    1. MCP Mesh tools with automatic dependency injection
    2. Hybrid typing support for development flexibility
    3. Pure simplicity - just decorators, no manual setup!

    Start this agent, then start system_agent.py to see dependency injection in action!
    """

    from typing import Any

    import mesh
    from mcp_mesh import McpMeshAgent


    @mesh.agent(name="hello-world", http_port=8080)
    class HelloWorldAgent:
        """Hello World agent demonstrating MCP Mesh features."""

        pass


    # ===== MESH FUNCTION WITH SIMPLE TYPING =====
    # Uses Any type for maximum simplicity and flexibility


    @mesh.tool(
        capability="greeting",
        dependencies=["date_service"],
        description="Simple greeting with date dependency",
    )
    def hello_mesh_simple(date_service: Any = None) -> str:
        """
        MCP Mesh greeting with simple typing.

        Uses Any type for maximum flexibility - works with any proxy implementation.
        Great for prototyping and simple use cases.
        """
        if date_service is None:
            return "ðŸ‘‹ Hello from MCP Mesh! (Date service not available yet)"

        try:
            # Call the injected function - proxy implements __call__()
            current_date = date_service()
            return f"ðŸ‘‹ Hello from MCP Mesh! Today is {current_date}"
        except Exception as e:
            return f"ðŸ‘‹ Hello from MCP Mesh! (Error getting date: {e})"


    # ===== MESH FUNCTION WITH TYPED INTERFACE =====
    # Uses McpMeshAgent type for better IDE support and type safety


    @mesh.tool(
        capability="advanced_greeting",
        dependencies=[
            {
                "capability": "info",
                "tags": ["system", "general"],
            }  # Tag-based dependency!
        ],
        description="Advanced greeting with smart tag-based dependency resolution",
    )
    def hello_mesh_typed(info: McpMeshAgent | None = None) -> str:
        """
        MCP Mesh greeting with smart tag-based dependency resolution.

        This requests "info" capability with "system" + "general" tags.
        Registry will match SystemAgent_getInfo (not get_disk_info) based on tags!
        """
        if info is None:
            return "ðŸ‘‹ Hello from smart MCP Mesh! (info service not available yet)"

        try:
            # This will call the general system info (not disk info) due to smart tag matching!
            system_info = info()
            uptime = system_info.get("uptime_formatted", "unknown")
            server_name = system_info.get("server_name", "unknown")
            return f"ðŸ‘‹ Hello from smart MCP Mesh! Server: {server_name}, Uptime: {uptime}"
        except Exception as e:
            return f"ðŸ‘‹ Hello from smart MCP Mesh! (Error getting info: {e})"


    # ===== DEPENDENCY TEST FUNCTION =====
    # Shows multiple dependencies with different typing approaches


    @mesh.tool(
        capability="dependency_test",
        dependencies=[
            "date_service",  # Simple string dependency
            {
                "capability": "info",
                "tags": ["system", "disk"],
            },  # Tag-based: will get DISK info!
        ],
        description="Test hybrid dependencies: simple + tag-based resolution",
    )
    def test_dependencies(
        date_service: Any = None,
        info: McpMeshAgent | None = None,  # This will get the DISK info service!
    ) -> dict[str, Any]:
        """
        Test function showing hybrid dependency resolution.

        Demonstrates both simple string and tag-based dependencies:
        - date_service: simple string dependency
        - info with [system,disk] tags: will get disk info (not general info)!
        """
        result = {
            "test_name": "smart_dependency_demo",
            "date_service": "not_available",
            "disk_info_service": "not_available",  # This should get DISK info, not general info!
        }

        # Test simple Any type dependency
        if date_service is not None:
            try:
                date = date_service()  # Direct call
                result["date_service"] = f"available: {date}"
            except Exception as e:
                result["date_service"] = f"error: {e}"

        # Test tag-based dependency - should get DISK info service
        if info is not None:
            try:
                disk_info = (
                    info()
                )  # This should return disk/OS info, not general system info
                info_type = disk_info.get("info_type", "unknown")
                result["disk_info_service"] = (
                    f"available: {info_type} (smart tag matching worked!)"
                )
            except Exception as e:
                result["disk_info_service"] = f"error: {e}"

        return result

  # Working system agent from Docker setup
  system_agent.py: |
    #!/usr/bin/env python3
    """
    MCP Mesh System Agent Example

    This agent provides system information capabilities that other agents can depend on.
    Demonstrates the tools vs capabilities architecture:

    - Tools: Function names (MCP function names)
    - Capabilities: What others can depend on
    - Pure simplicity: Just decorators, no manual setup!

    Function names can be different from capability names for maximum flexibility.
    """

    from datetime import datetime
    from typing import Any

    import mesh
    from mcp_mesh import McpMeshAgent


    @mesh.agent(name="system-agent", http_port=8080)
    class SystemAgent:
        """System information agent providing date and info capabilities."""

        pass


    # Store start time for uptime calculations
    start_time = datetime.now()

    # ===== DATE SERVICE =====
    # Tool: "get_current_time" | Capability: "date_service"


    @mesh.tool(
        capability="date_service",  # Capability name (what others depend on)
        description="Get current system date and time",
        version="1.0.0",
        tags=["system", "time", "clock"],
    )
    def get_current_time() -> str:  # Function name can be anything!
        """
        Get the current system date and time.

        This function provides the "date_service" capability.
        Function name 'get_current_time' can be anything - capability name matters!

        Returns:
            Formatted date and time string
        """
        now = datetime.now()
        return now.strftime("%B %d, %Y at %I:%M %p")


    # ===== GENERAL SYSTEM INFO SERVICE =====
    # Tool: "fetch_system_overview" | Capability: "info"


    @mesh.tool(
        capability="info",  # Generic capability name for smart matching
        description="Get comprehensive system information",
        version="1.0.0",
        tags=["system", "general", "monitoring"],  # Tags for smart resolution
    )
    def fetch_system_overview() -> dict[str, Any]:  # Clear: function name â‰  capability
        """
        Get comprehensive system information.

        This function provides the "info" capability with "system" + "general" tags.
        Smart matching: hello_world dependency "info" with "system" tag will match this.

        Returns:
            Dictionary containing system information
        """
        uptime = datetime.now() - start_time

        return {
            "server_name": "system-agent",
            "current_time": datetime.now().strftime("%B %d, %Y at %I:%M %p"),
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": f"{uptime.total_seconds():.1f} seconds",
            "version": "1.0.0",
            "capabilities_provided": [
                "date_service",  # From get_current_time() function
                "info",  # From fetch_system_overview() function - generic capability with smart tag matching
            ],
            "agent_type": "system_service",
        }


    # ===== UPTIME SERVICE (Different function name vs capability) =====
    # Tool: "get_uptime" | Capability: "uptime_info"


    @mesh.tool(
        capability="uptime_info",  # Capability name (what others depend on)
        description="Get system uptime information",
        version="1.0.0",
        tags=["system", "uptime"],
    )
    def check_how_long_running() -> str:  # Function name can be descriptive and different!
        """
        Get system uptime information.

        This demonstrates function_name != capability:
        - MCP calls: "check_how_long_running"
        - Capability provided: "uptime_info"
        - Dependencies declare: "uptime_info"

        Returns:
            Human-readable uptime string
        """
        uptime = datetime.now() - start_time
        return f"System running for {uptime.total_seconds():.1f} seconds"


    # ===== SECOND INFO SERVICE (Different Tags) =====
    # Same capability "info" but different tags - shows tag-based filtering


    @mesh.tool(
        capability="info",  # Same capability name!
        description="Get disk and OS information",
        version="1.0.0",
        tags=[
            "system",
            "disk",
            "os",
        ],  # Different tags - won't match "general" requests
    )
    def analyze_storage_and_os() -> dict[str, Any]:  # Completely different function name!
        """
        Get disk and OS information.

        This also provides "info" capability but with "disk" + "os" tags.
        Smart matching: requests for "info" with "general" tags won't match this.
        Only requests specifically wanting "disk" or "os" info will get this.
        """
        return {
            "info_type": "disk_and_os",
            "disk_usage": "simulated_75_percent",
            "os_version": "simulated_linux_6.x",
            "filesystem": "ext4",
            "mount_points": ["/", "/home", "/var"],
            "tags": ["disk", "os", "system"],
            "note": "This provides 'info' capability but with different tags than general system info",
        }


    # ===== STATUS SERVICE WITH DEPENDENCY =====


    @mesh.tool(
        capability="health_check",
        dependencies=["date_service"],  # Depends on capability name, not function name!
        description="Get system status with current time",
        version="1.0.0",
    )
    def perform_health_diagnostic(
        date_service: McpMeshAgent | None = None,
    ) -> dict[str, Any]:
        """
        Get system status including current time.

        This tool both provides AND consumes capabilities:
        - Provides: "health_check" (via perform_health_diagnostic function)
        - Consumes: "date_service" (from get_current_time function)

        Demonstrates how agents can be both providers and consumers.
        """
        uptime = datetime.now() - start_time

        status = {
            "status": "healthy",
            "uptime_seconds": uptime.total_seconds(),
            "memory_usage": "simulated_normal",
            "cpu_usage": "simulated_low",
            "service_name": "system-agent",
        }

        # Use injected date service if available
        if date_service is not None:
            try:
                current_time = date_service()
                status["timestamp"] = current_time
                status["time_service"] = "available"
            except Exception as e:
                status["timestamp"] = "error"
                status["time_service"] = f"error: {e}"
        else:
            status["timestamp"] = "date_service_unavailable"
            status["time_service"] = "not_injected"

        return status

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/capability"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CapabilityCreate is the builder for creating a Capability entity.
type CapabilityCreate struct {
	config
	mutation *CapabilityMutation
	hooks    []Hook
}

// SetFunctionName sets the "function_name" field.
func (cc *CapabilityCreate) SetFunctionName(s string) *CapabilityCreate {
	cc.mutation.SetFunctionName(s)
	return cc
}

// SetCapability sets the "capability" field.
func (cc *CapabilityCreate) SetCapability(s string) *CapabilityCreate {
	cc.mutation.SetCapability(s)
	return cc
}

// SetVersion sets the "version" field.
func (cc *CapabilityCreate) SetVersion(s string) *CapabilityCreate {
	cc.mutation.SetVersion(s)
	return cc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cc *CapabilityCreate) SetNillableVersion(s *string) *CapabilityCreate {
	if s != nil {
		cc.SetVersion(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *CapabilityCreate) SetDescription(s string) *CapabilityCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CapabilityCreate) SetNillableDescription(s *string) *CapabilityCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetTags sets the "tags" field.
func (cc *CapabilityCreate) SetTags(s []string) *CapabilityCreate {
	cc.mutation.SetTags(s)
	return cc
}

// SetKwargs sets the "kwargs" field.
func (cc *CapabilityCreate) SetKwargs(m map[string]interface{}) *CapabilityCreate {
	cc.mutation.SetKwargs(m)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CapabilityCreate) SetCreatedAt(t time.Time) *CapabilityCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CapabilityCreate) SetNillableCreatedAt(t *time.Time) *CapabilityCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CapabilityCreate) SetUpdatedAt(t time.Time) *CapabilityCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CapabilityCreate) SetNillableUpdatedAt(t *time.Time) *CapabilityCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (cc *CapabilityCreate) SetAgentID(id string) *CapabilityCreate {
	cc.mutation.SetAgentID(id)
	return cc
}

// SetAgent sets the "agent" edge to the Agent entity.
func (cc *CapabilityCreate) SetAgent(a *Agent) *CapabilityCreate {
	return cc.SetAgentID(a.ID)
}

// Mutation returns the CapabilityMutation object of the builder.
func (cc *CapabilityCreate) Mutation() *CapabilityMutation {
	return cc.mutation
}

// Save creates the Capability in the database.
func (cc *CapabilityCreate) Save(ctx context.Context) (*Capability, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CapabilityCreate) SaveX(ctx context.Context) *Capability {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CapabilityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CapabilityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CapabilityCreate) defaults() {
	if _, ok := cc.mutation.Version(); !ok {
		v := capability.DefaultVersion
		cc.mutation.SetVersion(v)
	}
	if _, ok := cc.mutation.Tags(); !ok {
		v := capability.DefaultTags
		cc.mutation.SetTags(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := capability.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := capability.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CapabilityCreate) check() error {
	if _, ok := cc.mutation.FunctionName(); !ok {
		return &ValidationError{Name: "function_name", err: errors.New(`ent: missing required field "Capability.function_name"`)}
	}
	if _, ok := cc.mutation.Capability(); !ok {
		return &ValidationError{Name: "capability", err: errors.New(`ent: missing required field "Capability.capability"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Capability.version"`)}
	}
	if _, ok := cc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Capability.tags"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Capability.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Capability.updated_at"`)}
	}
	if len(cc.mutation.AgentIDs()) == 0 {
		return &ValidationError{Name: "agent", err: errors.New(`ent: missing required edge "Capability.agent"`)}
	}
	return nil
}

func (cc *CapabilityCreate) sqlSave(ctx context.Context) (*Capability, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CapabilityCreate) createSpec() (*Capability, *sqlgraph.CreateSpec) {
	var (
		_node = &Capability{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(capability.Table, sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.FunctionName(); ok {
		_spec.SetField(capability.FieldFunctionName, field.TypeString, value)
		_node.FunctionName = value
	}
	if value, ok := cc.mutation.Capability(); ok {
		_spec.SetField(capability.FieldCapability, field.TypeString, value)
		_node.Capability = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(capability.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(capability.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Tags(); ok {
		_spec.SetField(capability.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := cc.mutation.Kwargs(); ok {
		_spec.SetField(capability.FieldKwargs, field.TypeJSON, value)
		_node.Kwargs = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(capability.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(capability.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   capability.AgentTable,
			Columns: []string{capability.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_capabilities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CapabilityCreateBulk is the builder for creating many Capability entities in bulk.
type CapabilityCreateBulk struct {
	config
	err      error
	builders []*CapabilityCreate
}

// Save creates the Capability entities in the database.
func (ccb *CapabilityCreateBulk) Save(ctx context.Context) ([]*Capability, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Capability, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CapabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CapabilityCreateBulk) SaveX(ctx context.Context) []*Capability {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CapabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CapabilityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

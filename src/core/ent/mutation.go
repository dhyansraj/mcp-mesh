// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/capability"
	"mcp-mesh/src/core/ent/predicate"
	"mcp-mesh/src/core/ent/registryevent"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAgent         = "Agent"
	TypeCapability    = "Capability"
	TypeRegistryEvent = "RegistryEvent"
)

// AgentMutation represents an operation that mutates the Agent nodes in the graph.
type AgentMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	agent_type               *agent.AgentType
	name                     *string
	version                  *string
	http_host                *string
	http_port                *int
	addhttp_port             *int
	namespace                *string
	status                   *agent.Status
	total_dependencies       *int
	addtotal_dependencies    *int
	dependencies_resolved    *int
	adddependencies_resolved *int
	created_at               *time.Time
	updated_at               *time.Time
	last_full_refresh        *time.Time
	clearedFields            map[string]struct{}
	capabilities             map[int]struct{}
	removedcapabilities      map[int]struct{}
	clearedcapabilities      bool
	events                   map[int]struct{}
	removedevents            map[int]struct{}
	clearedevents            bool
	done                     bool
	oldValue                 func(context.Context) (*Agent, error)
	predicates               []predicate.Agent
}

var _ ent.Mutation = (*AgentMutation)(nil)

// agentOption allows management of the mutation configuration using functional options.
type agentOption func(*AgentMutation)

// newAgentMutation creates new mutation for the Agent entity.
func newAgentMutation(c config, op Op, opts ...agentOption) *AgentMutation {
	m := &AgentMutation{
		config:        c,
		op:            op,
		typ:           TypeAgent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAgentID sets the ID field of the mutation.
func withAgentID(id string) agentOption {
	return func(m *AgentMutation) {
		var (
			err   error
			once  sync.Once
			value *Agent
		)
		m.oldValue = func(ctx context.Context) (*Agent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Agent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAgent sets the old Agent of the mutation.
func withAgent(node *Agent) agentOption {
	return func(m *AgentMutation) {
		m.oldValue = func(context.Context) (*Agent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AgentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AgentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Agent entities.
func (m *AgentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AgentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AgentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Agent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAgentType sets the "agent_type" field.
func (m *AgentMutation) SetAgentType(at agent.AgentType) {
	m.agent_type = &at
}

// AgentType returns the value of the "agent_type" field in the mutation.
func (m *AgentMutation) AgentType() (r agent.AgentType, exists bool) {
	v := m.agent_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentType returns the old "agent_type" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldAgentType(ctx context.Context) (v agent.AgentType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentType: %w", err)
	}
	return oldValue.AgentType, nil
}

// ResetAgentType resets all changes to the "agent_type" field.
func (m *AgentMutation) ResetAgentType() {
	m.agent_type = nil
}

// SetName sets the "name" field.
func (m *AgentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AgentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AgentMutation) ResetName() {
	m.name = nil
}

// SetVersion sets the "version" field.
func (m *AgentMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *AgentMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *AgentMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[agent.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *AgentMutation) VersionCleared() bool {
	_, ok := m.clearedFields[agent.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *AgentMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, agent.FieldVersion)
}

// SetHTTPHost sets the "http_host" field.
func (m *AgentMutation) SetHTTPHost(s string) {
	m.http_host = &s
}

// HTTPHost returns the value of the "http_host" field in the mutation.
func (m *AgentMutation) HTTPHost() (r string, exists bool) {
	v := m.http_host
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPHost returns the old "http_host" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldHTTPHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTTPHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTTPHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPHost: %w", err)
	}
	return oldValue.HTTPHost, nil
}

// ClearHTTPHost clears the value of the "http_host" field.
func (m *AgentMutation) ClearHTTPHost() {
	m.http_host = nil
	m.clearedFields[agent.FieldHTTPHost] = struct{}{}
}

// HTTPHostCleared returns if the "http_host" field was cleared in this mutation.
func (m *AgentMutation) HTTPHostCleared() bool {
	_, ok := m.clearedFields[agent.FieldHTTPHost]
	return ok
}

// ResetHTTPHost resets all changes to the "http_host" field.
func (m *AgentMutation) ResetHTTPHost() {
	m.http_host = nil
	delete(m.clearedFields, agent.FieldHTTPHost)
}

// SetHTTPPort sets the "http_port" field.
func (m *AgentMutation) SetHTTPPort(i int) {
	m.http_port = &i
	m.addhttp_port = nil
}

// HTTPPort returns the value of the "http_port" field in the mutation.
func (m *AgentMutation) HTTPPort() (r int, exists bool) {
	v := m.http_port
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPPort returns the old "http_port" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldHTTPPort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTTPPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTTPPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPPort: %w", err)
	}
	return oldValue.HTTPPort, nil
}

// AddHTTPPort adds i to the "http_port" field.
func (m *AgentMutation) AddHTTPPort(i int) {
	if m.addhttp_port != nil {
		*m.addhttp_port += i
	} else {
		m.addhttp_port = &i
	}
}

// AddedHTTPPort returns the value that was added to the "http_port" field in this mutation.
func (m *AgentMutation) AddedHTTPPort() (r int, exists bool) {
	v := m.addhttp_port
	if v == nil {
		return
	}
	return *v, true
}

// ClearHTTPPort clears the value of the "http_port" field.
func (m *AgentMutation) ClearHTTPPort() {
	m.http_port = nil
	m.addhttp_port = nil
	m.clearedFields[agent.FieldHTTPPort] = struct{}{}
}

// HTTPPortCleared returns if the "http_port" field was cleared in this mutation.
func (m *AgentMutation) HTTPPortCleared() bool {
	_, ok := m.clearedFields[agent.FieldHTTPPort]
	return ok
}

// ResetHTTPPort resets all changes to the "http_port" field.
func (m *AgentMutation) ResetHTTPPort() {
	m.http_port = nil
	m.addhttp_port = nil
	delete(m.clearedFields, agent.FieldHTTPPort)
}

// SetNamespace sets the "namespace" field.
func (m *AgentMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *AgentMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *AgentMutation) ResetNamespace() {
	m.namespace = nil
}

// SetStatus sets the "status" field.
func (m *AgentMutation) SetStatus(a agent.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *AgentMutation) Status() (r agent.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldStatus(ctx context.Context) (v agent.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AgentMutation) ResetStatus() {
	m.status = nil
}

// SetTotalDependencies sets the "total_dependencies" field.
func (m *AgentMutation) SetTotalDependencies(i int) {
	m.total_dependencies = &i
	m.addtotal_dependencies = nil
}

// TotalDependencies returns the value of the "total_dependencies" field in the mutation.
func (m *AgentMutation) TotalDependencies() (r int, exists bool) {
	v := m.total_dependencies
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalDependencies returns the old "total_dependencies" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldTotalDependencies(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalDependencies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalDependencies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalDependencies: %w", err)
	}
	return oldValue.TotalDependencies, nil
}

// AddTotalDependencies adds i to the "total_dependencies" field.
func (m *AgentMutation) AddTotalDependencies(i int) {
	if m.addtotal_dependencies != nil {
		*m.addtotal_dependencies += i
	} else {
		m.addtotal_dependencies = &i
	}
}

// AddedTotalDependencies returns the value that was added to the "total_dependencies" field in this mutation.
func (m *AgentMutation) AddedTotalDependencies() (r int, exists bool) {
	v := m.addtotal_dependencies
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalDependencies resets all changes to the "total_dependencies" field.
func (m *AgentMutation) ResetTotalDependencies() {
	m.total_dependencies = nil
	m.addtotal_dependencies = nil
}

// SetDependenciesResolved sets the "dependencies_resolved" field.
func (m *AgentMutation) SetDependenciesResolved(i int) {
	m.dependencies_resolved = &i
	m.adddependencies_resolved = nil
}

// DependenciesResolved returns the value of the "dependencies_resolved" field in the mutation.
func (m *AgentMutation) DependenciesResolved() (r int, exists bool) {
	v := m.dependencies_resolved
	if v == nil {
		return
	}
	return *v, true
}

// OldDependenciesResolved returns the old "dependencies_resolved" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldDependenciesResolved(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDependenciesResolved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDependenciesResolved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDependenciesResolved: %w", err)
	}
	return oldValue.DependenciesResolved, nil
}

// AddDependenciesResolved adds i to the "dependencies_resolved" field.
func (m *AgentMutation) AddDependenciesResolved(i int) {
	if m.adddependencies_resolved != nil {
		*m.adddependencies_resolved += i
	} else {
		m.adddependencies_resolved = &i
	}
}

// AddedDependenciesResolved returns the value that was added to the "dependencies_resolved" field in this mutation.
func (m *AgentMutation) AddedDependenciesResolved() (r int, exists bool) {
	v := m.adddependencies_resolved
	if v == nil {
		return
	}
	return *v, true
}

// ResetDependenciesResolved resets all changes to the "dependencies_resolved" field.
func (m *AgentMutation) ResetDependenciesResolved() {
	m.dependencies_resolved = nil
	m.adddependencies_resolved = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AgentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AgentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AgentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AgentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AgentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AgentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLastFullRefresh sets the "last_full_refresh" field.
func (m *AgentMutation) SetLastFullRefresh(t time.Time) {
	m.last_full_refresh = &t
}

// LastFullRefresh returns the value of the "last_full_refresh" field in the mutation.
func (m *AgentMutation) LastFullRefresh() (r time.Time, exists bool) {
	v := m.last_full_refresh
	if v == nil {
		return
	}
	return *v, true
}

// OldLastFullRefresh returns the old "last_full_refresh" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldLastFullRefresh(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastFullRefresh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastFullRefresh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastFullRefresh: %w", err)
	}
	return oldValue.LastFullRefresh, nil
}

// ResetLastFullRefresh resets all changes to the "last_full_refresh" field.
func (m *AgentMutation) ResetLastFullRefresh() {
	m.last_full_refresh = nil
}

// AddCapabilityIDs adds the "capabilities" edge to the Capability entity by ids.
func (m *AgentMutation) AddCapabilityIDs(ids ...int) {
	if m.capabilities == nil {
		m.capabilities = make(map[int]struct{})
	}
	for i := range ids {
		m.capabilities[ids[i]] = struct{}{}
	}
}

// ClearCapabilities clears the "capabilities" edge to the Capability entity.
func (m *AgentMutation) ClearCapabilities() {
	m.clearedcapabilities = true
}

// CapabilitiesCleared reports if the "capabilities" edge to the Capability entity was cleared.
func (m *AgentMutation) CapabilitiesCleared() bool {
	return m.clearedcapabilities
}

// RemoveCapabilityIDs removes the "capabilities" edge to the Capability entity by IDs.
func (m *AgentMutation) RemoveCapabilityIDs(ids ...int) {
	if m.removedcapabilities == nil {
		m.removedcapabilities = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.capabilities, ids[i])
		m.removedcapabilities[ids[i]] = struct{}{}
	}
}

// RemovedCapabilities returns the removed IDs of the "capabilities" edge to the Capability entity.
func (m *AgentMutation) RemovedCapabilitiesIDs() (ids []int) {
	for id := range m.removedcapabilities {
		ids = append(ids, id)
	}
	return
}

// CapabilitiesIDs returns the "capabilities" edge IDs in the mutation.
func (m *AgentMutation) CapabilitiesIDs() (ids []int) {
	for id := range m.capabilities {
		ids = append(ids, id)
	}
	return
}

// ResetCapabilities resets all changes to the "capabilities" edge.
func (m *AgentMutation) ResetCapabilities() {
	m.capabilities = nil
	m.clearedcapabilities = false
	m.removedcapabilities = nil
}

// AddEventIDs adds the "events" edge to the RegistryEvent entity by ids.
func (m *AgentMutation) AddEventIDs(ids ...int) {
	if m.events == nil {
		m.events = make(map[int]struct{})
	}
	for i := range ids {
		m.events[ids[i]] = struct{}{}
	}
}

// ClearEvents clears the "events" edge to the RegistryEvent entity.
func (m *AgentMutation) ClearEvents() {
	m.clearedevents = true
}

// EventsCleared reports if the "events" edge to the RegistryEvent entity was cleared.
func (m *AgentMutation) EventsCleared() bool {
	return m.clearedevents
}

// RemoveEventIDs removes the "events" edge to the RegistryEvent entity by IDs.
func (m *AgentMutation) RemoveEventIDs(ids ...int) {
	if m.removedevents == nil {
		m.removedevents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.events, ids[i])
		m.removedevents[ids[i]] = struct{}{}
	}
}

// RemovedEvents returns the removed IDs of the "events" edge to the RegistryEvent entity.
func (m *AgentMutation) RemovedEventsIDs() (ids []int) {
	for id := range m.removedevents {
		ids = append(ids, id)
	}
	return
}

// EventsIDs returns the "events" edge IDs in the mutation.
func (m *AgentMutation) EventsIDs() (ids []int) {
	for id := range m.events {
		ids = append(ids, id)
	}
	return
}

// ResetEvents resets all changes to the "events" edge.
func (m *AgentMutation) ResetEvents() {
	m.events = nil
	m.clearedevents = false
	m.removedevents = nil
}

// Where appends a list predicates to the AgentMutation builder.
func (m *AgentMutation) Where(ps ...predicate.Agent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AgentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AgentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Agent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AgentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AgentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Agent).
func (m *AgentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AgentMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.agent_type != nil {
		fields = append(fields, agent.FieldAgentType)
	}
	if m.name != nil {
		fields = append(fields, agent.FieldName)
	}
	if m.version != nil {
		fields = append(fields, agent.FieldVersion)
	}
	if m.http_host != nil {
		fields = append(fields, agent.FieldHTTPHost)
	}
	if m.http_port != nil {
		fields = append(fields, agent.FieldHTTPPort)
	}
	if m.namespace != nil {
		fields = append(fields, agent.FieldNamespace)
	}
	if m.status != nil {
		fields = append(fields, agent.FieldStatus)
	}
	if m.total_dependencies != nil {
		fields = append(fields, agent.FieldTotalDependencies)
	}
	if m.dependencies_resolved != nil {
		fields = append(fields, agent.FieldDependenciesResolved)
	}
	if m.created_at != nil {
		fields = append(fields, agent.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, agent.FieldUpdatedAt)
	}
	if m.last_full_refresh != nil {
		fields = append(fields, agent.FieldLastFullRefresh)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AgentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case agent.FieldAgentType:
		return m.AgentType()
	case agent.FieldName:
		return m.Name()
	case agent.FieldVersion:
		return m.Version()
	case agent.FieldHTTPHost:
		return m.HTTPHost()
	case agent.FieldHTTPPort:
		return m.HTTPPort()
	case agent.FieldNamespace:
		return m.Namespace()
	case agent.FieldStatus:
		return m.Status()
	case agent.FieldTotalDependencies:
		return m.TotalDependencies()
	case agent.FieldDependenciesResolved:
		return m.DependenciesResolved()
	case agent.FieldCreatedAt:
		return m.CreatedAt()
	case agent.FieldUpdatedAt:
		return m.UpdatedAt()
	case agent.FieldLastFullRefresh:
		return m.LastFullRefresh()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AgentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case agent.FieldAgentType:
		return m.OldAgentType(ctx)
	case agent.FieldName:
		return m.OldName(ctx)
	case agent.FieldVersion:
		return m.OldVersion(ctx)
	case agent.FieldHTTPHost:
		return m.OldHTTPHost(ctx)
	case agent.FieldHTTPPort:
		return m.OldHTTPPort(ctx)
	case agent.FieldNamespace:
		return m.OldNamespace(ctx)
	case agent.FieldStatus:
		return m.OldStatus(ctx)
	case agent.FieldTotalDependencies:
		return m.OldTotalDependencies(ctx)
	case agent.FieldDependenciesResolved:
		return m.OldDependenciesResolved(ctx)
	case agent.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case agent.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case agent.FieldLastFullRefresh:
		return m.OldLastFullRefresh(ctx)
	}
	return nil, fmt.Errorf("unknown Agent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case agent.FieldAgentType:
		v, ok := value.(agent.AgentType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentType(v)
		return nil
	case agent.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case agent.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case agent.FieldHTTPHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPHost(v)
		return nil
	case agent.FieldHTTPPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPPort(v)
		return nil
	case agent.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case agent.FieldStatus:
		v, ok := value.(agent.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case agent.FieldTotalDependencies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalDependencies(v)
		return nil
	case agent.FieldDependenciesResolved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDependenciesResolved(v)
		return nil
	case agent.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case agent.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case agent.FieldLastFullRefresh:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastFullRefresh(v)
		return nil
	}
	return fmt.Errorf("unknown Agent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AgentMutation) AddedFields() []string {
	var fields []string
	if m.addhttp_port != nil {
		fields = append(fields, agent.FieldHTTPPort)
	}
	if m.addtotal_dependencies != nil {
		fields = append(fields, agent.FieldTotalDependencies)
	}
	if m.adddependencies_resolved != nil {
		fields = append(fields, agent.FieldDependenciesResolved)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AgentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case agent.FieldHTTPPort:
		return m.AddedHTTPPort()
	case agent.FieldTotalDependencies:
		return m.AddedTotalDependencies()
	case agent.FieldDependenciesResolved:
		return m.AddedDependenciesResolved()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case agent.FieldHTTPPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHTTPPort(v)
		return nil
	case agent.FieldTotalDependencies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalDependencies(v)
		return nil
	case agent.FieldDependenciesResolved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDependenciesResolved(v)
		return nil
	}
	return fmt.Errorf("unknown Agent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AgentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(agent.FieldVersion) {
		fields = append(fields, agent.FieldVersion)
	}
	if m.FieldCleared(agent.FieldHTTPHost) {
		fields = append(fields, agent.FieldHTTPHost)
	}
	if m.FieldCleared(agent.FieldHTTPPort) {
		fields = append(fields, agent.FieldHTTPPort)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AgentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AgentMutation) ClearField(name string) error {
	switch name {
	case agent.FieldVersion:
		m.ClearVersion()
		return nil
	case agent.FieldHTTPHost:
		m.ClearHTTPHost()
		return nil
	case agent.FieldHTTPPort:
		m.ClearHTTPPort()
		return nil
	}
	return fmt.Errorf("unknown Agent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AgentMutation) ResetField(name string) error {
	switch name {
	case agent.FieldAgentType:
		m.ResetAgentType()
		return nil
	case agent.FieldName:
		m.ResetName()
		return nil
	case agent.FieldVersion:
		m.ResetVersion()
		return nil
	case agent.FieldHTTPHost:
		m.ResetHTTPHost()
		return nil
	case agent.FieldHTTPPort:
		m.ResetHTTPPort()
		return nil
	case agent.FieldNamespace:
		m.ResetNamespace()
		return nil
	case agent.FieldStatus:
		m.ResetStatus()
		return nil
	case agent.FieldTotalDependencies:
		m.ResetTotalDependencies()
		return nil
	case agent.FieldDependenciesResolved:
		m.ResetDependenciesResolved()
		return nil
	case agent.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case agent.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case agent.FieldLastFullRefresh:
		m.ResetLastFullRefresh()
		return nil
	}
	return fmt.Errorf("unknown Agent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AgentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.capabilities != nil {
		edges = append(edges, agent.EdgeCapabilities)
	}
	if m.events != nil {
		edges = append(edges, agent.EdgeEvents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AgentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case agent.EdgeCapabilities:
		ids := make([]ent.Value, 0, len(m.capabilities))
		for id := range m.capabilities {
			ids = append(ids, id)
		}
		return ids
	case agent.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.events))
		for id := range m.events {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AgentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcapabilities != nil {
		edges = append(edges, agent.EdgeCapabilities)
	}
	if m.removedevents != nil {
		edges = append(edges, agent.EdgeEvents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AgentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case agent.EdgeCapabilities:
		ids := make([]ent.Value, 0, len(m.removedcapabilities))
		for id := range m.removedcapabilities {
			ids = append(ids, id)
		}
		return ids
	case agent.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.removedevents))
		for id := range m.removedevents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AgentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcapabilities {
		edges = append(edges, agent.EdgeCapabilities)
	}
	if m.clearedevents {
		edges = append(edges, agent.EdgeEvents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AgentMutation) EdgeCleared(name string) bool {
	switch name {
	case agent.EdgeCapabilities:
		return m.clearedcapabilities
	case agent.EdgeEvents:
		return m.clearedevents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AgentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Agent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AgentMutation) ResetEdge(name string) error {
	switch name {
	case agent.EdgeCapabilities:
		m.ResetCapabilities()
		return nil
	case agent.EdgeEvents:
		m.ResetEvents()
		return nil
	}
	return fmt.Errorf("unknown Agent edge %s", name)
}

// CapabilityMutation represents an operation that mutates the Capability nodes in the graph.
type CapabilityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	function_name *string
	capability    *string
	version       *string
	description   *string
	tags          *[]string
	appendtags    []string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	agent         *string
	clearedagent  bool
	done          bool
	oldValue      func(context.Context) (*Capability, error)
	predicates    []predicate.Capability
}

var _ ent.Mutation = (*CapabilityMutation)(nil)

// capabilityOption allows management of the mutation configuration using functional options.
type capabilityOption func(*CapabilityMutation)

// newCapabilityMutation creates new mutation for the Capability entity.
func newCapabilityMutation(c config, op Op, opts ...capabilityOption) *CapabilityMutation {
	m := &CapabilityMutation{
		config:        c,
		op:            op,
		typ:           TypeCapability,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCapabilityID sets the ID field of the mutation.
func withCapabilityID(id int) capabilityOption {
	return func(m *CapabilityMutation) {
		var (
			err   error
			once  sync.Once
			value *Capability
		)
		m.oldValue = func(ctx context.Context) (*Capability, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Capability.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCapability sets the old Capability of the mutation.
func withCapability(node *Capability) capabilityOption {
	return func(m *CapabilityMutation) {
		m.oldValue = func(context.Context) (*Capability, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CapabilityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CapabilityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CapabilityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CapabilityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Capability.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFunctionName sets the "function_name" field.
func (m *CapabilityMutation) SetFunctionName(s string) {
	m.function_name = &s
}

// FunctionName returns the value of the "function_name" field in the mutation.
func (m *CapabilityMutation) FunctionName() (r string, exists bool) {
	v := m.function_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFunctionName returns the old "function_name" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldFunctionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFunctionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFunctionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFunctionName: %w", err)
	}
	return oldValue.FunctionName, nil
}

// ResetFunctionName resets all changes to the "function_name" field.
func (m *CapabilityMutation) ResetFunctionName() {
	m.function_name = nil
}

// SetCapability sets the "capability" field.
func (m *CapabilityMutation) SetCapability(s string) {
	m.capability = &s
}

// Capability returns the value of the "capability" field in the mutation.
func (m *CapabilityMutation) Capability() (r string, exists bool) {
	v := m.capability
	if v == nil {
		return
	}
	return *v, true
}

// OldCapability returns the old "capability" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldCapability(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapability: %w", err)
	}
	return oldValue.Capability, nil
}

// ResetCapability resets all changes to the "capability" field.
func (m *CapabilityMutation) ResetCapability() {
	m.capability = nil
}

// SetVersion sets the "version" field.
func (m *CapabilityMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *CapabilityMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *CapabilityMutation) ResetVersion() {
	m.version = nil
}

// SetDescription sets the "description" field.
func (m *CapabilityMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CapabilityMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CapabilityMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[capability.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CapabilityMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[capability.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CapabilityMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, capability.FieldDescription)
}

// SetTags sets the "tags" field.
func (m *CapabilityMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *CapabilityMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *CapabilityMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *CapabilityMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ResetTags resets all changes to the "tags" field.
func (m *CapabilityMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CapabilityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CapabilityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CapabilityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CapabilityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CapabilityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Capability entity.
// If the Capability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapabilityMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CapabilityMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAgentID sets the "agent" edge to the Agent entity by id.
func (m *CapabilityMutation) SetAgentID(id string) {
	m.agent = &id
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (m *CapabilityMutation) ClearAgent() {
	m.clearedagent = true
}

// AgentCleared reports if the "agent" edge to the Agent entity was cleared.
func (m *CapabilityMutation) AgentCleared() bool {
	return m.clearedagent
}

// AgentID returns the "agent" edge ID in the mutation.
func (m *CapabilityMutation) AgentID() (id string, exists bool) {
	if m.agent != nil {
		return *m.agent, true
	}
	return
}

// AgentIDs returns the "agent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AgentID instead. It exists only for internal usage by the builders.
func (m *CapabilityMutation) AgentIDs() (ids []string) {
	if id := m.agent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAgent resets all changes to the "agent" edge.
func (m *CapabilityMutation) ResetAgent() {
	m.agent = nil
	m.clearedagent = false
}

// Where appends a list predicates to the CapabilityMutation builder.
func (m *CapabilityMutation) Where(ps ...predicate.Capability) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CapabilityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CapabilityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Capability, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CapabilityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CapabilityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Capability).
func (m *CapabilityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CapabilityMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.function_name != nil {
		fields = append(fields, capability.FieldFunctionName)
	}
	if m.capability != nil {
		fields = append(fields, capability.FieldCapability)
	}
	if m.version != nil {
		fields = append(fields, capability.FieldVersion)
	}
	if m.description != nil {
		fields = append(fields, capability.FieldDescription)
	}
	if m.tags != nil {
		fields = append(fields, capability.FieldTags)
	}
	if m.created_at != nil {
		fields = append(fields, capability.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, capability.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CapabilityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case capability.FieldFunctionName:
		return m.FunctionName()
	case capability.FieldCapability:
		return m.Capability()
	case capability.FieldVersion:
		return m.Version()
	case capability.FieldDescription:
		return m.Description()
	case capability.FieldTags:
		return m.Tags()
	case capability.FieldCreatedAt:
		return m.CreatedAt()
	case capability.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CapabilityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case capability.FieldFunctionName:
		return m.OldFunctionName(ctx)
	case capability.FieldCapability:
		return m.OldCapability(ctx)
	case capability.FieldVersion:
		return m.OldVersion(ctx)
	case capability.FieldDescription:
		return m.OldDescription(ctx)
	case capability.FieldTags:
		return m.OldTags(ctx)
	case capability.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case capability.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Capability field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CapabilityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case capability.FieldFunctionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFunctionName(v)
		return nil
	case capability.FieldCapability:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapability(v)
		return nil
	case capability.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case capability.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case capability.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case capability.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case capability.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Capability field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CapabilityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CapabilityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CapabilityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Capability numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CapabilityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(capability.FieldDescription) {
		fields = append(fields, capability.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CapabilityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CapabilityMutation) ClearField(name string) error {
	switch name {
	case capability.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Capability nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CapabilityMutation) ResetField(name string) error {
	switch name {
	case capability.FieldFunctionName:
		m.ResetFunctionName()
		return nil
	case capability.FieldCapability:
		m.ResetCapability()
		return nil
	case capability.FieldVersion:
		m.ResetVersion()
		return nil
	case capability.FieldDescription:
		m.ResetDescription()
		return nil
	case capability.FieldTags:
		m.ResetTags()
		return nil
	case capability.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case capability.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Capability field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CapabilityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.agent != nil {
		edges = append(edges, capability.EdgeAgent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CapabilityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case capability.EdgeAgent:
		if id := m.agent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CapabilityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CapabilityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CapabilityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedagent {
		edges = append(edges, capability.EdgeAgent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CapabilityMutation) EdgeCleared(name string) bool {
	switch name {
	case capability.EdgeAgent:
		return m.clearedagent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CapabilityMutation) ClearEdge(name string) error {
	switch name {
	case capability.EdgeAgent:
		m.ClearAgent()
		return nil
	}
	return fmt.Errorf("unknown Capability unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CapabilityMutation) ResetEdge(name string) error {
	switch name {
	case capability.EdgeAgent:
		m.ResetAgent()
		return nil
	}
	return fmt.Errorf("unknown Capability edge %s", name)
}

// RegistryEventMutation represents an operation that mutates the RegistryEvent nodes in the graph.
type RegistryEventMutation struct {
	config
	op            Op
	typ           string
	id            *int
	event_type    *registryevent.EventType
	function_name *string
	timestamp     *time.Time
	data          *map[string]interface{}
	clearedFields map[string]struct{}
	agent         *string
	clearedagent  bool
	done          bool
	oldValue      func(context.Context) (*RegistryEvent, error)
	predicates    []predicate.RegistryEvent
}

var _ ent.Mutation = (*RegistryEventMutation)(nil)

// registryeventOption allows management of the mutation configuration using functional options.
type registryeventOption func(*RegistryEventMutation)

// newRegistryEventMutation creates new mutation for the RegistryEvent entity.
func newRegistryEventMutation(c config, op Op, opts ...registryeventOption) *RegistryEventMutation {
	m := &RegistryEventMutation{
		config:        c,
		op:            op,
		typ:           TypeRegistryEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegistryEventID sets the ID field of the mutation.
func withRegistryEventID(id int) registryeventOption {
	return func(m *RegistryEventMutation) {
		var (
			err   error
			once  sync.Once
			value *RegistryEvent
		)
		m.oldValue = func(ctx context.Context) (*RegistryEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegistryEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegistryEvent sets the old RegistryEvent of the mutation.
func withRegistryEvent(node *RegistryEvent) registryeventOption {
	return func(m *RegistryEventMutation) {
		m.oldValue = func(context.Context) (*RegistryEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegistryEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegistryEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegistryEventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RegistryEventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RegistryEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventType sets the "event_type" field.
func (m *RegistryEventMutation) SetEventType(rt registryevent.EventType) {
	m.event_type = &rt
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *RegistryEventMutation) EventType() (r registryevent.EventType, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the RegistryEvent entity.
// If the RegistryEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistryEventMutation) OldEventType(ctx context.Context) (v registryevent.EventType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "event_type" field.
func (m *RegistryEventMutation) ResetEventType() {
	m.event_type = nil
}

// SetFunctionName sets the "function_name" field.
func (m *RegistryEventMutation) SetFunctionName(s string) {
	m.function_name = &s
}

// FunctionName returns the value of the "function_name" field in the mutation.
func (m *RegistryEventMutation) FunctionName() (r string, exists bool) {
	v := m.function_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFunctionName returns the old "function_name" field's value of the RegistryEvent entity.
// If the RegistryEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistryEventMutation) OldFunctionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFunctionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFunctionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFunctionName: %w", err)
	}
	return oldValue.FunctionName, nil
}

// ClearFunctionName clears the value of the "function_name" field.
func (m *RegistryEventMutation) ClearFunctionName() {
	m.function_name = nil
	m.clearedFields[registryevent.FieldFunctionName] = struct{}{}
}

// FunctionNameCleared returns if the "function_name" field was cleared in this mutation.
func (m *RegistryEventMutation) FunctionNameCleared() bool {
	_, ok := m.clearedFields[registryevent.FieldFunctionName]
	return ok
}

// ResetFunctionName resets all changes to the "function_name" field.
func (m *RegistryEventMutation) ResetFunctionName() {
	m.function_name = nil
	delete(m.clearedFields, registryevent.FieldFunctionName)
}

// SetTimestamp sets the "timestamp" field.
func (m *RegistryEventMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *RegistryEventMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the RegistryEvent entity.
// If the RegistryEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistryEventMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *RegistryEventMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetData sets the "data" field.
func (m *RegistryEventMutation) SetData(value map[string]interface{}) {
	m.data = &value
}

// Data returns the value of the "data" field in the mutation.
func (m *RegistryEventMutation) Data() (r map[string]interface{}, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the RegistryEvent entity.
// If the RegistryEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistryEventMutation) OldData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *RegistryEventMutation) ResetData() {
	m.data = nil
}

// SetAgentID sets the "agent" edge to the Agent entity by id.
func (m *RegistryEventMutation) SetAgentID(id string) {
	m.agent = &id
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (m *RegistryEventMutation) ClearAgent() {
	m.clearedagent = true
}

// AgentCleared reports if the "agent" edge to the Agent entity was cleared.
func (m *RegistryEventMutation) AgentCleared() bool {
	return m.clearedagent
}

// AgentID returns the "agent" edge ID in the mutation.
func (m *RegistryEventMutation) AgentID() (id string, exists bool) {
	if m.agent != nil {
		return *m.agent, true
	}
	return
}

// AgentIDs returns the "agent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AgentID instead. It exists only for internal usage by the builders.
func (m *RegistryEventMutation) AgentIDs() (ids []string) {
	if id := m.agent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAgent resets all changes to the "agent" edge.
func (m *RegistryEventMutation) ResetAgent() {
	m.agent = nil
	m.clearedagent = false
}

// Where appends a list predicates to the RegistryEventMutation builder.
func (m *RegistryEventMutation) Where(ps ...predicate.RegistryEvent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RegistryEventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RegistryEventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RegistryEvent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RegistryEventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RegistryEventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RegistryEvent).
func (m *RegistryEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegistryEventMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.event_type != nil {
		fields = append(fields, registryevent.FieldEventType)
	}
	if m.function_name != nil {
		fields = append(fields, registryevent.FieldFunctionName)
	}
	if m.timestamp != nil {
		fields = append(fields, registryevent.FieldTimestamp)
	}
	if m.data != nil {
		fields = append(fields, registryevent.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegistryEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registryevent.FieldEventType:
		return m.EventType()
	case registryevent.FieldFunctionName:
		return m.FunctionName()
	case registryevent.FieldTimestamp:
		return m.Timestamp()
	case registryevent.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegistryEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registryevent.FieldEventType:
		return m.OldEventType(ctx)
	case registryevent.FieldFunctionName:
		return m.OldFunctionName(ctx)
	case registryevent.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case registryevent.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown RegistryEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistryEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registryevent.FieldEventType:
		v, ok := value.(registryevent.EventType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case registryevent.FieldFunctionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFunctionName(v)
		return nil
	case registryevent.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case registryevent.FieldData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown RegistryEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegistryEventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegistryEventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistryEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RegistryEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegistryEventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(registryevent.FieldFunctionName) {
		fields = append(fields, registryevent.FieldFunctionName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegistryEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegistryEventMutation) ClearField(name string) error {
	switch name {
	case registryevent.FieldFunctionName:
		m.ClearFunctionName()
		return nil
	}
	return fmt.Errorf("unknown RegistryEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegistryEventMutation) ResetField(name string) error {
	switch name {
	case registryevent.FieldEventType:
		m.ResetEventType()
		return nil
	case registryevent.FieldFunctionName:
		m.ResetFunctionName()
		return nil
	case registryevent.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case registryevent.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown RegistryEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegistryEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.agent != nil {
		edges = append(edges, registryevent.EdgeAgent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegistryEventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case registryevent.EdgeAgent:
		if id := m.agent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegistryEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegistryEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegistryEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedagent {
		edges = append(edges, registryevent.EdgeAgent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegistryEventMutation) EdgeCleared(name string) bool {
	switch name {
	case registryevent.EdgeAgent:
		return m.clearedagent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegistryEventMutation) ClearEdge(name string) error {
	switch name {
	case registryevent.EdgeAgent:
		m.ClearAgent()
		return nil
	}
	return fmt.Errorf("unknown RegistryEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegistryEventMutation) ResetEdge(name string) error {
	switch name {
	case registryevent.EdgeAgent:
		m.ResetAgent()
		return nil
	}
	return fmt.Errorf("unknown RegistryEvent edge %s", name)
}

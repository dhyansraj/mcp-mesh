// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/capability"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Capability is the model entity for the Capability schema.
type Capability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the function (e.g., 'smart_greet', 'get_weather_report')
	FunctionName string `json:"function_name,omitempty"`
	// Capability identifier (e.g., 'personalized_greeting', 'weather_report')
	Capability string `json:"capability,omitempty"`
	// Version of the capability
	Version string `json:"version,omitempty"`
	// Description of what this capability does
	Description string `json:"description,omitempty"`
	// Tags for this capability (e.g., ['prod', 'ml', 'gpu'])
	Tags []string `json:"tags,omitempty"`
	// Creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CapabilityQuery when eager-loading is set.
	Edges              CapabilityEdges `json:"edges"`
	agent_capabilities *string
	selectValues       sql.SelectValues
}

// CapabilityEdges holds the relations/edges for other nodes in the graph.
type CapabilityEdges struct {
	// Agent that provides this capability
	Agent *Agent `json:"agent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CapabilityEdges) AgentOrErr() (*Agent, error) {
	if e.Agent != nil {
		return e.Agent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Capability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case capability.FieldTags:
			values[i] = new([]byte)
		case capability.FieldID:
			values[i] = new(sql.NullInt64)
		case capability.FieldFunctionName, capability.FieldCapability, capability.FieldVersion, capability.FieldDescription:
			values[i] = new(sql.NullString)
		case capability.FieldCreatedAt, capability.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case capability.ForeignKeys[0]: // agent_capabilities
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Capability fields.
func (c *Capability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case capability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case capability.FieldFunctionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field function_name", values[i])
			} else if value.Valid {
				c.FunctionName = value.String
			}
		case capability.FieldCapability:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field capability", values[i])
			} else if value.Valid {
				c.Capability = value.String
			}
		case capability.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				c.Version = value.String
			}
		case capability.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case capability.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case capability.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case capability.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case capability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_capabilities", values[i])
			} else if value.Valid {
				c.agent_capabilities = new(string)
				*c.agent_capabilities = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Capability.
// This includes values selected through modifiers, order, etc.
func (c *Capability) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAgent queries the "agent" edge of the Capability entity.
func (c *Capability) QueryAgent() *AgentQuery {
	return NewCapabilityClient(c.config).QueryAgent(c)
}

// Update returns a builder for updating this Capability.
// Note that you need to call Capability.Unwrap() before calling this method if this Capability
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Capability) Update() *CapabilityUpdateOne {
	return NewCapabilityClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Capability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Capability) Unwrap() *Capability {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Capability is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Capability) String() string {
	var builder strings.Builder
	builder.WriteString("Capability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("function_name=")
	builder.WriteString(c.FunctionName)
	builder.WriteString(", ")
	builder.WriteString("capability=")
	builder.WriteString(c.Capability)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(c.Version)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", c.Tags))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Capabilities is a parsable slice of Capability.
type Capabilities []*Capability

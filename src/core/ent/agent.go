// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Agent is the model entity for the Agent schema.
type Agent struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier for the agent
	ID string `json:"id,omitempty"`
	// Type of agent
	AgentType agent.AgentType `json:"agent_type,omitempty"`
	// Human-readable name of the agent
	Name string `json:"name,omitempty"`
	// Version of the agent
	Version string `json:"version,omitempty"`
	// HTTP host for the agent
	HTTPHost string `json:"http_host,omitempty"`
	// HTTP port for the agent
	HTTPPort int `json:"http_port,omitempty"`
	// Namespace for the agent
	Namespace string `json:"namespace,omitempty"`
	// Total number of dependencies
	TotalDependencies int `json:"total_dependencies,omitempty"`
	// Number of resolved dependencies
	DependenciesResolved int `json:"dependencies_resolved,omitempty"`
	// Creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentQuery when eager-loading is set.
	Edges        AgentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AgentEdges holds the relations/edges for other nodes in the graph.
type AgentEdges struct {
	// Capabilities provided by this agent
	Capabilities []*Capability `json:"capabilities,omitempty"`
	// Registry events for this agent
	Events []*RegistryEvent `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CapabilitiesOrErr returns the Capabilities value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) CapabilitiesOrErr() ([]*Capability, error) {
	if e.loadedTypes[0] {
		return e.Capabilities, nil
	}
	return nil, &NotLoadedError{edge: "capabilities"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) EventsOrErr() ([]*RegistryEvent, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agent.FieldHTTPPort, agent.FieldTotalDependencies, agent.FieldDependenciesResolved:
			values[i] = new(sql.NullInt64)
		case agent.FieldID, agent.FieldAgentType, agent.FieldName, agent.FieldVersion, agent.FieldHTTPHost, agent.FieldNamespace:
			values[i] = new(sql.NullString)
		case agent.FieldCreatedAt, agent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agent fields.
func (a *Agent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case agent.FieldAgentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_type", values[i])
			} else if value.Valid {
				a.AgentType = agent.AgentType(value.String)
			}
		case agent.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case agent.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				a.Version = value.String
			}
		case agent.FieldHTTPHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_host", values[i])
			} else if value.Valid {
				a.HTTPHost = value.String
			}
		case agent.FieldHTTPPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field http_port", values[i])
			} else if value.Valid {
				a.HTTPPort = int(value.Int64)
			}
		case agent.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				a.Namespace = value.String
			}
		case agent.FieldTotalDependencies:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_dependencies", values[i])
			} else if value.Valid {
				a.TotalDependencies = int(value.Int64)
			}
		case agent.FieldDependenciesResolved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dependencies_resolved", values[i])
			} else if value.Valid {
				a.DependenciesResolved = int(value.Int64)
			}
		case agent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case agent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Agent.
// This includes values selected through modifiers, order, etc.
func (a *Agent) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCapabilities queries the "capabilities" edge of the Agent entity.
func (a *Agent) QueryCapabilities() *CapabilityQuery {
	return NewAgentClient(a.config).QueryCapabilities(a)
}

// QueryEvents queries the "events" edge of the Agent entity.
func (a *Agent) QueryEvents() *RegistryEventQuery {
	return NewAgentClient(a.config).QueryEvents(a)
}

// Update returns a builder for updating this Agent.
// Note that you need to call Agent.Unwrap() before calling this method if this Agent
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agent) Update() *AgentUpdateOne {
	return NewAgentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Agent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agent) Unwrap() *Agent {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agent is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agent) String() string {
	var builder strings.Builder
	builder.WriteString("Agent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("agent_type=")
	builder.WriteString(fmt.Sprintf("%v", a.AgentType))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(a.Version)
	builder.WriteString(", ")
	builder.WriteString("http_host=")
	builder.WriteString(a.HTTPHost)
	builder.WriteString(", ")
	builder.WriteString("http_port=")
	builder.WriteString(fmt.Sprintf("%v", a.HTTPPort))
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(a.Namespace)
	builder.WriteString(", ")
	builder.WriteString("total_dependencies=")
	builder.WriteString(fmt.Sprintf("%v", a.TotalDependencies))
	builder.WriteString(", ")
	builder.WriteString("dependencies_resolved=")
	builder.WriteString(fmt.Sprintf("%v", a.DependenciesResolved))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Agents is a parsable slice of Agent.
type Agents []*Agent

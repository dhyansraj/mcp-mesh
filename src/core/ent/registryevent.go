// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/registryevent"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RegistryEvent is the model entity for the RegistryEvent schema.
type RegistryEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type of registry event
	EventType registryevent.EventType `json:"event_type,omitempty"`
	// Function name for function-level events (NULL for agent-level events)
	FunctionName string `json:"function_name,omitempty"`
	// When this event occurred
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Additional event data as JSON
	Data map[string]interface{} `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegistryEventQuery when eager-loading is set.
	Edges        RegistryEventEdges `json:"edges"`
	agent_events *string
	selectValues sql.SelectValues
}

// RegistryEventEdges holds the relations/edges for other nodes in the graph.
type RegistryEventEdges struct {
	// Agent this event relates to
	Agent *Agent `json:"agent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegistryEventEdges) AgentOrErr() (*Agent, error) {
	if e.Agent != nil {
		return e.Agent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RegistryEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case registryevent.FieldData:
			values[i] = new([]byte)
		case registryevent.FieldID:
			values[i] = new(sql.NullInt64)
		case registryevent.FieldEventType, registryevent.FieldFunctionName:
			values[i] = new(sql.NullString)
		case registryevent.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case registryevent.ForeignKeys[0]: // agent_events
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RegistryEvent fields.
func (re *RegistryEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case registryevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			re.ID = int(value.Int64)
		case registryevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				re.EventType = registryevent.EventType(value.String)
			}
		case registryevent.FieldFunctionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field function_name", values[i])
			} else if value.Valid {
				re.FunctionName = value.String
			}
		case registryevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				re.Timestamp = value.Time
			}
		case registryevent.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &re.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case registryevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_events", values[i])
			} else if value.Valid {
				re.agent_events = new(string)
				*re.agent_events = value.String
			}
		default:
			re.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RegistryEvent.
// This includes values selected through modifiers, order, etc.
func (re *RegistryEvent) Value(name string) (ent.Value, error) {
	return re.selectValues.Get(name)
}

// QueryAgent queries the "agent" edge of the RegistryEvent entity.
func (re *RegistryEvent) QueryAgent() *AgentQuery {
	return NewRegistryEventClient(re.config).QueryAgent(re)
}

// Update returns a builder for updating this RegistryEvent.
// Note that you need to call RegistryEvent.Unwrap() before calling this method if this RegistryEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *RegistryEvent) Update() *RegistryEventUpdateOne {
	return NewRegistryEventClient(re.config).UpdateOne(re)
}

// Unwrap unwraps the RegistryEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *RegistryEvent) Unwrap() *RegistryEvent {
	_tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: RegistryEvent is not a transactional entity")
	}
	re.config.driver = _tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *RegistryEvent) String() string {
	var builder strings.Builder
	builder.WriteString("RegistryEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", re.ID))
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", re.EventType))
	builder.WriteString(", ")
	builder.WriteString("function_name=")
	builder.WriteString(re.FunctionName)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(re.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", re.Data))
	builder.WriteByte(')')
	return builder.String()
}

// RegistryEvents is a parsable slice of RegistryEvent.
type RegistryEvents []*RegistryEvent

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/registryevent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RegistryEventCreate is the builder for creating a RegistryEvent entity.
type RegistryEventCreate struct {
	config
	mutation *RegistryEventMutation
	hooks    []Hook
}

// SetEventType sets the "event_type" field.
func (rec *RegistryEventCreate) SetEventType(rt registryevent.EventType) *RegistryEventCreate {
	rec.mutation.SetEventType(rt)
	return rec
}

// SetFunctionName sets the "function_name" field.
func (rec *RegistryEventCreate) SetFunctionName(s string) *RegistryEventCreate {
	rec.mutation.SetFunctionName(s)
	return rec
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (rec *RegistryEventCreate) SetNillableFunctionName(s *string) *RegistryEventCreate {
	if s != nil {
		rec.SetFunctionName(*s)
	}
	return rec
}

// SetTimestamp sets the "timestamp" field.
func (rec *RegistryEventCreate) SetTimestamp(t time.Time) *RegistryEventCreate {
	rec.mutation.SetTimestamp(t)
	return rec
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (rec *RegistryEventCreate) SetNillableTimestamp(t *time.Time) *RegistryEventCreate {
	if t != nil {
		rec.SetTimestamp(*t)
	}
	return rec
}

// SetData sets the "data" field.
func (rec *RegistryEventCreate) SetData(m map[string]interface{}) *RegistryEventCreate {
	rec.mutation.SetData(m)
	return rec
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (rec *RegistryEventCreate) SetAgentID(id string) *RegistryEventCreate {
	rec.mutation.SetAgentID(id)
	return rec
}

// SetAgent sets the "agent" edge to the Agent entity.
func (rec *RegistryEventCreate) SetAgent(a *Agent) *RegistryEventCreate {
	return rec.SetAgentID(a.ID)
}

// Mutation returns the RegistryEventMutation object of the builder.
func (rec *RegistryEventCreate) Mutation() *RegistryEventMutation {
	return rec.mutation
}

// Save creates the RegistryEvent in the database.
func (rec *RegistryEventCreate) Save(ctx context.Context) (*RegistryEvent, error) {
	rec.defaults()
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RegistryEventCreate) SaveX(ctx context.Context) *RegistryEvent {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RegistryEventCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RegistryEventCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *RegistryEventCreate) defaults() {
	if _, ok := rec.mutation.Timestamp(); !ok {
		v := registryevent.DefaultTimestamp()
		rec.mutation.SetTimestamp(v)
	}
	if _, ok := rec.mutation.Data(); !ok {
		v := registryevent.DefaultData
		rec.mutation.SetData(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RegistryEventCreate) check() error {
	if _, ok := rec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "RegistryEvent.event_type"`)}
	}
	if v, ok := rec.mutation.EventType(); ok {
		if err := registryevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "RegistryEvent.event_type": %w`, err)}
		}
	}
	if _, ok := rec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "RegistryEvent.timestamp"`)}
	}
	if _, ok := rec.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "RegistryEvent.data"`)}
	}
	if len(rec.mutation.AgentIDs()) == 0 {
		return &ValidationError{Name: "agent", err: errors.New(`ent: missing required edge "RegistryEvent.agent"`)}
	}
	return nil
}

func (rec *RegistryEventCreate) sqlSave(ctx context.Context) (*RegistryEvent, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RegistryEventCreate) createSpec() (*RegistryEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &RegistryEvent{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(registryevent.Table, sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt))
	)
	if value, ok := rec.mutation.EventType(); ok {
		_spec.SetField(registryevent.FieldEventType, field.TypeEnum, value)
		_node.EventType = value
	}
	if value, ok := rec.mutation.FunctionName(); ok {
		_spec.SetField(registryevent.FieldFunctionName, field.TypeString, value)
		_node.FunctionName = value
	}
	if value, ok := rec.mutation.Timestamp(); ok {
		_spec.SetField(registryevent.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := rec.mutation.Data(); ok {
		_spec.SetField(registryevent.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if nodes := rec.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   registryevent.AgentTable,
			Columns: []string{registryevent.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegistryEventCreateBulk is the builder for creating many RegistryEvent entities in bulk.
type RegistryEventCreateBulk struct {
	config
	err      error
	builders []*RegistryEventCreate
}

// Save creates the RegistryEvent entities in the database.
func (recb *RegistryEventCreateBulk) Save(ctx context.Context) ([]*RegistryEvent, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RegistryEvent, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistryEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RegistryEventCreateBulk) SaveX(ctx context.Context) []*RegistryEvent {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RegistryEventCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RegistryEventCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

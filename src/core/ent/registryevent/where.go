// Code generated by ent, DO NOT EDIT.

package registryevent

import (
	"mcp-mesh/src/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldLTE(FieldID, id))
}

// FunctionName applies equality check predicate on the "function_name" field. It's identical to FunctionNameEQ.
func FunctionName(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldFunctionName, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldTimestamp, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v EventType) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v EventType) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...EventType) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...EventType) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNotIn(FieldEventType, vs...))
}

// FunctionNameEQ applies the EQ predicate on the "function_name" field.
func FunctionNameEQ(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldFunctionName, v))
}

// FunctionNameNEQ applies the NEQ predicate on the "function_name" field.
func FunctionNameNEQ(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNEQ(FieldFunctionName, v))
}

// FunctionNameIn applies the In predicate on the "function_name" field.
func FunctionNameIn(vs ...string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldIn(FieldFunctionName, vs...))
}

// FunctionNameNotIn applies the NotIn predicate on the "function_name" field.
func FunctionNameNotIn(vs ...string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNotIn(FieldFunctionName, vs...))
}

// FunctionNameGT applies the GT predicate on the "function_name" field.
func FunctionNameGT(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldGT(FieldFunctionName, v))
}

// FunctionNameGTE applies the GTE predicate on the "function_name" field.
func FunctionNameGTE(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldGTE(FieldFunctionName, v))
}

// FunctionNameLT applies the LT predicate on the "function_name" field.
func FunctionNameLT(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldLT(FieldFunctionName, v))
}

// FunctionNameLTE applies the LTE predicate on the "function_name" field.
func FunctionNameLTE(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldLTE(FieldFunctionName, v))
}

// FunctionNameContains applies the Contains predicate on the "function_name" field.
func FunctionNameContains(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldContains(FieldFunctionName, v))
}

// FunctionNameHasPrefix applies the HasPrefix predicate on the "function_name" field.
func FunctionNameHasPrefix(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldHasPrefix(FieldFunctionName, v))
}

// FunctionNameHasSuffix applies the HasSuffix predicate on the "function_name" field.
func FunctionNameHasSuffix(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldHasSuffix(FieldFunctionName, v))
}

// FunctionNameIsNil applies the IsNil predicate on the "function_name" field.
func FunctionNameIsNil() predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldIsNull(FieldFunctionName))
}

// FunctionNameNotNil applies the NotNil predicate on the "function_name" field.
func FunctionNameNotNil() predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNotNull(FieldFunctionName))
}

// FunctionNameEqualFold applies the EqualFold predicate on the "function_name" field.
func FunctionNameEqualFold(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEqualFold(FieldFunctionName, v))
}

// FunctionNameContainsFold applies the ContainsFold predicate on the "function_name" field.
func FunctionNameContainsFold(v string) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldContainsFold(FieldFunctionName, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.FieldLTE(FieldTimestamp, v))
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.RegistryEvent {
	return predicate.RegistryEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.RegistryEvent {
	return predicate.RegistryEvent(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RegistryEvent) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RegistryEvent) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RegistryEvent) predicate.RegistryEvent {
	return predicate.RegistryEvent(sql.NotPredicates(p))
}

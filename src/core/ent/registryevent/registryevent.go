// Code generated by ent, DO NOT EDIT.

package registryevent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the registryevent type in the database.
	Label = "registry_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldFunctionName holds the string denoting the function_name field in the database.
	FieldFunctionName = "function_name"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// AgentFieldID holds the string denoting the ID field of the Agent.
	AgentFieldID = "agent_id"
	// Table holds the table name of the registryevent in the database.
	Table = "registry_events"
	// AgentTable is the table that holds the agent relation/edge.
	AgentTable = "registry_events"
	// AgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentInverseTable = "agents"
	// AgentColumn is the table column denoting the agent relation/edge.
	AgentColumn = "agent_events"
)

// Columns holds all SQL columns for registryevent fields.
var Columns = []string{
	FieldID,
	FieldEventType,
	FieldFunctionName,
	FieldTimestamp,
	FieldData,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "registry_events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_events",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData map[string]interface{}
)

// EventType defines the type for the "event_type" enum field.
type EventType string

// EventType values.
const (
	EventTypeRegister   EventType = "register"
	EventTypeHeartbeat  EventType = "heartbeat"
	EventTypeExpire     EventType = "expire"
	EventTypeUpdate     EventType = "update"
	EventTypeUnregister EventType = "unregister"
	EventTypeUnhealthy  EventType = "unhealthy"
)

func (et EventType) String() string {
	return string(et)
}

// EventTypeValidator is a validator for the "event_type" field enum values. It is called by the builders before save.
func EventTypeValidator(et EventType) error {
	switch et {
	case EventTypeRegister, EventTypeHeartbeat, EventTypeExpire, EventTypeUpdate, EventTypeUnregister, EventTypeUnhealthy:
		return nil
	default:
		return fmt.Errorf("registryevent: invalid enum value for event_type field: %q", et)
	}
}

// OrderOption defines the ordering options for the RegistryEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByFunctionName orders the results by the function_name field.
func ByFunctionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFunctionName, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByAgentField orders the results by agent field.
func ByAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), sql.OrderByField(field, opts...))
	}
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, AgentFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
	)
}

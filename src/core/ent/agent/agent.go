// Code generated by ent, DO NOT EDIT.

package agent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the agent type in the database.
	Label = "agent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "agent_id"
	// FieldAgentType holds the string denoting the agent_type field in the database.
	FieldAgentType = "agent_type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldHTTPHost holds the string denoting the http_host field in the database.
	FieldHTTPHost = "http_host"
	// FieldHTTPPort holds the string denoting the http_port field in the database.
	FieldHTTPPort = "http_port"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTotalDependencies holds the string denoting the total_dependencies field in the database.
	FieldTotalDependencies = "total_dependencies"
	// FieldDependenciesResolved holds the string denoting the dependencies_resolved field in the database.
	FieldDependenciesResolved = "dependencies_resolved"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastFullRefresh holds the string denoting the last_full_refresh field in the database.
	FieldLastFullRefresh = "last_full_refresh"
	// EdgeCapabilities holds the string denoting the capabilities edge name in mutations.
	EdgeCapabilities = "capabilities"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// CapabilityFieldID holds the string denoting the ID field of the Capability.
	CapabilityFieldID = "id"
	// RegistryEventFieldID holds the string denoting the ID field of the RegistryEvent.
	RegistryEventFieldID = "id"
	// Table holds the table name of the agent in the database.
	Table = "agents"
	// CapabilitiesTable is the table that holds the capabilities relation/edge.
	CapabilitiesTable = "capabilities"
	// CapabilitiesInverseTable is the table name for the Capability entity.
	// It exists in this package in order to avoid circular dependency with the "capability" package.
	CapabilitiesInverseTable = "capabilities"
	// CapabilitiesColumn is the table column denoting the capabilities relation/edge.
	CapabilitiesColumn = "agent_capabilities"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "registry_events"
	// EventsInverseTable is the table name for the RegistryEvent entity.
	// It exists in this package in order to avoid circular dependency with the "registryevent" package.
	EventsInverseTable = "registry_events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "agent_events"
)

// Columns holds all SQL columns for agent fields.
var Columns = []string{
	FieldID,
	FieldAgentType,
	FieldName,
	FieldVersion,
	FieldHTTPHost,
	FieldHTTPPort,
	FieldNamespace,
	FieldStatus,
	FieldTotalDependencies,
	FieldDependenciesResolved,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastFullRefresh,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNamespace holds the default value on creation for the "namespace" field.
	DefaultNamespace string
	// DefaultTotalDependencies holds the default value on creation for the "total_dependencies" field.
	DefaultTotalDependencies int
	// DefaultDependenciesResolved holds the default value on creation for the "dependencies_resolved" field.
	DefaultDependenciesResolved int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLastFullRefresh holds the default value on creation for the "last_full_refresh" field.
	DefaultLastFullRefresh func() time.Time
)

// AgentType defines the type for the "agent_type" enum field.
type AgentType string

// AgentTypeMcpAgent is the default value of the AgentType enum.
const DefaultAgentType = AgentTypeMcpAgent

// AgentType values.
const (
	AgentTypeMcpAgent       AgentType = "mcp_agent"
	AgentTypeMeshTool       AgentType = "mesh_tool"
	AgentTypeDecoratorAgent AgentType = "decorator_agent"
)

func (at AgentType) String() string {
	return string(at)
}

// AgentTypeValidator is a validator for the "agent_type" field enum values. It is called by the builders before save.
func AgentTypeValidator(at AgentType) error {
	switch at {
	case AgentTypeMcpAgent, AgentTypeMeshTool, AgentTypeDecoratorAgent:
		return nil
	default:
		return fmt.Errorf("agent: invalid enum value for agent_type field: %q", at)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusHealthy is the default value of the Status enum.
const DefaultStatus = StatusHealthy

// Status values.
const (
	StatusHealthy   Status = "healthy"
	StatusUnhealthy Status = "unhealthy"
	StatusUnknown   Status = "unknown"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusHealthy, StatusUnhealthy, StatusUnknown:
		return nil
	default:
		return fmt.Errorf("agent: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Agent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAgentType orders the results by the agent_type field.
func ByAgentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByHTTPHost orders the results by the http_host field.
func ByHTTPHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTTPHost, opts...).ToFunc()
}

// ByHTTPPort orders the results by the http_port field.
func ByHTTPPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTTPPort, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTotalDependencies orders the results by the total_dependencies field.
func ByTotalDependencies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalDependencies, opts...).ToFunc()
}

// ByDependenciesResolved orders the results by the dependencies_resolved field.
func ByDependenciesResolved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependenciesResolved, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastFullRefresh orders the results by the last_full_refresh field.
func ByLastFullRefresh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastFullRefresh, opts...).ToFunc()
}

// ByCapabilitiesCount orders the results by capabilities count.
func ByCapabilitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCapabilitiesStep(), opts...)
	}
}

// ByCapabilities orders the results by capabilities terms.
func ByCapabilities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCapabilitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCapabilitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CapabilitiesInverseTable, CapabilityFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CapabilitiesTable, CapabilitiesColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, RegistryEventFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}

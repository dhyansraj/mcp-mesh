// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/capability"
	"mcp-mesh/src/core/ent/predicate"
	"mcp-mesh/src/core/ent/registryevent"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAgentType sets the "agent_type" field.
func (au *AgentUpdate) SetAgentType(at agent.AgentType) *AgentUpdate {
	au.mutation.SetAgentType(at)
	return au
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (au *AgentUpdate) SetNillableAgentType(at *agent.AgentType) *AgentUpdate {
	if at != nil {
		au.SetAgentType(*at)
	}
	return au
}

// SetName sets the "name" field.
func (au *AgentUpdate) SetName(s string) *AgentUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AgentUpdate) SetNillableName(s *string) *AgentUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetVersion sets the "version" field.
func (au *AgentUpdate) SetVersion(s string) *AgentUpdate {
	au.mutation.SetVersion(s)
	return au
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (au *AgentUpdate) SetNillableVersion(s *string) *AgentUpdate {
	if s != nil {
		au.SetVersion(*s)
	}
	return au
}

// ClearVersion clears the value of the "version" field.
func (au *AgentUpdate) ClearVersion() *AgentUpdate {
	au.mutation.ClearVersion()
	return au
}

// SetHTTPHost sets the "http_host" field.
func (au *AgentUpdate) SetHTTPHost(s string) *AgentUpdate {
	au.mutation.SetHTTPHost(s)
	return au
}

// SetNillableHTTPHost sets the "http_host" field if the given value is not nil.
func (au *AgentUpdate) SetNillableHTTPHost(s *string) *AgentUpdate {
	if s != nil {
		au.SetHTTPHost(*s)
	}
	return au
}

// ClearHTTPHost clears the value of the "http_host" field.
func (au *AgentUpdate) ClearHTTPHost() *AgentUpdate {
	au.mutation.ClearHTTPHost()
	return au
}

// SetHTTPPort sets the "http_port" field.
func (au *AgentUpdate) SetHTTPPort(i int) *AgentUpdate {
	au.mutation.ResetHTTPPort()
	au.mutation.SetHTTPPort(i)
	return au
}

// SetNillableHTTPPort sets the "http_port" field if the given value is not nil.
func (au *AgentUpdate) SetNillableHTTPPort(i *int) *AgentUpdate {
	if i != nil {
		au.SetHTTPPort(*i)
	}
	return au
}

// AddHTTPPort adds i to the "http_port" field.
func (au *AgentUpdate) AddHTTPPort(i int) *AgentUpdate {
	au.mutation.AddHTTPPort(i)
	return au
}

// ClearHTTPPort clears the value of the "http_port" field.
func (au *AgentUpdate) ClearHTTPPort() *AgentUpdate {
	au.mutation.ClearHTTPPort()
	return au
}

// SetNamespace sets the "namespace" field.
func (au *AgentUpdate) SetNamespace(s string) *AgentUpdate {
	au.mutation.SetNamespace(s)
	return au
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (au *AgentUpdate) SetNillableNamespace(s *string) *AgentUpdate {
	if s != nil {
		au.SetNamespace(*s)
	}
	return au
}

// SetTotalDependencies sets the "total_dependencies" field.
func (au *AgentUpdate) SetTotalDependencies(i int) *AgentUpdate {
	au.mutation.ResetTotalDependencies()
	au.mutation.SetTotalDependencies(i)
	return au
}

// SetNillableTotalDependencies sets the "total_dependencies" field if the given value is not nil.
func (au *AgentUpdate) SetNillableTotalDependencies(i *int) *AgentUpdate {
	if i != nil {
		au.SetTotalDependencies(*i)
	}
	return au
}

// AddTotalDependencies adds i to the "total_dependencies" field.
func (au *AgentUpdate) AddTotalDependencies(i int) *AgentUpdate {
	au.mutation.AddTotalDependencies(i)
	return au
}

// SetDependenciesResolved sets the "dependencies_resolved" field.
func (au *AgentUpdate) SetDependenciesResolved(i int) *AgentUpdate {
	au.mutation.ResetDependenciesResolved()
	au.mutation.SetDependenciesResolved(i)
	return au
}

// SetNillableDependenciesResolved sets the "dependencies_resolved" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDependenciesResolved(i *int) *AgentUpdate {
	if i != nil {
		au.SetDependenciesResolved(*i)
	}
	return au
}

// AddDependenciesResolved adds i to the "dependencies_resolved" field.
func (au *AgentUpdate) AddDependenciesResolved(i int) *AgentUpdate {
	au.mutation.AddDependenciesResolved(i)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// AddCapabilityIDs adds the "capabilities" edge to the Capability entity by IDs.
func (au *AgentUpdate) AddCapabilityIDs(ids ...int) *AgentUpdate {
	au.mutation.AddCapabilityIDs(ids...)
	return au
}

// AddCapabilities adds the "capabilities" edges to the Capability entity.
func (au *AgentUpdate) AddCapabilities(c ...*Capability) *AgentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCapabilityIDs(ids...)
}

// AddEventIDs adds the "events" edge to the RegistryEvent entity by IDs.
func (au *AgentUpdate) AddEventIDs(ids ...int) *AgentUpdate {
	au.mutation.AddEventIDs(ids...)
	return au
}

// AddEvents adds the "events" edges to the RegistryEvent entity.
func (au *AgentUpdate) AddEvents(r ...*RegistryEvent) *AgentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddEventIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearCapabilities clears all "capabilities" edges to the Capability entity.
func (au *AgentUpdate) ClearCapabilities() *AgentUpdate {
	au.mutation.ClearCapabilities()
	return au
}

// RemoveCapabilityIDs removes the "capabilities" edge to Capability entities by IDs.
func (au *AgentUpdate) RemoveCapabilityIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveCapabilityIDs(ids...)
	return au
}

// RemoveCapabilities removes "capabilities" edges to Capability entities.
func (au *AgentUpdate) RemoveCapabilities(c ...*Capability) *AgentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCapabilityIDs(ids...)
}

// ClearEvents clears all "events" edges to the RegistryEvent entity.
func (au *AgentUpdate) ClearEvents() *AgentUpdate {
	au.mutation.ClearEvents()
	return au
}

// RemoveEventIDs removes the "events" edge to RegistryEvent entities by IDs.
func (au *AgentUpdate) RemoveEventIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveEventIDs(ids...)
	return au
}

// RemoveEvents removes "events" edges to RegistryEvent entities.
func (au *AgentUpdate) RemoveEvents(r ...*RegistryEvent) *AgentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.AgentType(); ok {
		if err := agent.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_type": %w`, err)}
		}
	}
	return nil
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AgentType(); ok {
		_spec.SetField(agent.FieldAgentType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.SetField(agent.FieldVersion, field.TypeString, value)
	}
	if au.mutation.VersionCleared() {
		_spec.ClearField(agent.FieldVersion, field.TypeString)
	}
	if value, ok := au.mutation.HTTPHost(); ok {
		_spec.SetField(agent.FieldHTTPHost, field.TypeString, value)
	}
	if au.mutation.HTTPHostCleared() {
		_spec.ClearField(agent.FieldHTTPHost, field.TypeString)
	}
	if value, ok := au.mutation.HTTPPort(); ok {
		_spec.SetField(agent.FieldHTTPPort, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedHTTPPort(); ok {
		_spec.AddField(agent.FieldHTTPPort, field.TypeInt, value)
	}
	if au.mutation.HTTPPortCleared() {
		_spec.ClearField(agent.FieldHTTPPort, field.TypeInt)
	}
	if value, ok := au.mutation.Namespace(); ok {
		_spec.SetField(agent.FieldNamespace, field.TypeString, value)
	}
	if value, ok := au.mutation.TotalDependencies(); ok {
		_spec.SetField(agent.FieldTotalDependencies, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedTotalDependencies(); ok {
		_spec.AddField(agent.FieldTotalDependencies, field.TypeInt, value)
	}
	if value, ok := au.mutation.DependenciesResolved(); ok {
		_spec.SetField(agent.FieldDependenciesResolved, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDependenciesResolved(); ok {
		_spec.AddField(agent.FieldDependenciesResolved, field.TypeInt, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.CapabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CapabilitiesTable,
			Columns: []string{agent.CapabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCapabilitiesIDs(); len(nodes) > 0 && !au.mutation.CapabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CapabilitiesTable,
			Columns: []string{agent.CapabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CapabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CapabilitiesTable,
			Columns: []string{agent.CapabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.EventsTable,
			Columns: []string{agent.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventsIDs(); len(nodes) > 0 && !au.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.EventsTable,
			Columns: []string{agent.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.EventsTable,
			Columns: []string{agent.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetAgentType sets the "agent_type" field.
func (auo *AgentUpdateOne) SetAgentType(at agent.AgentType) *AgentUpdateOne {
	auo.mutation.SetAgentType(at)
	return auo
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableAgentType(at *agent.AgentType) *AgentUpdateOne {
	if at != nil {
		auo.SetAgentType(*at)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AgentUpdateOne) SetName(s string) *AgentUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableName(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetVersion sets the "version" field.
func (auo *AgentUpdateOne) SetVersion(s string) *AgentUpdateOne {
	auo.mutation.SetVersion(s)
	return auo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableVersion(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetVersion(*s)
	}
	return auo
}

// ClearVersion clears the value of the "version" field.
func (auo *AgentUpdateOne) ClearVersion() *AgentUpdateOne {
	auo.mutation.ClearVersion()
	return auo
}

// SetHTTPHost sets the "http_host" field.
func (auo *AgentUpdateOne) SetHTTPHost(s string) *AgentUpdateOne {
	auo.mutation.SetHTTPHost(s)
	return auo
}

// SetNillableHTTPHost sets the "http_host" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableHTTPHost(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetHTTPHost(*s)
	}
	return auo
}

// ClearHTTPHost clears the value of the "http_host" field.
func (auo *AgentUpdateOne) ClearHTTPHost() *AgentUpdateOne {
	auo.mutation.ClearHTTPHost()
	return auo
}

// SetHTTPPort sets the "http_port" field.
func (auo *AgentUpdateOne) SetHTTPPort(i int) *AgentUpdateOne {
	auo.mutation.ResetHTTPPort()
	auo.mutation.SetHTTPPort(i)
	return auo
}

// SetNillableHTTPPort sets the "http_port" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableHTTPPort(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetHTTPPort(*i)
	}
	return auo
}

// AddHTTPPort adds i to the "http_port" field.
func (auo *AgentUpdateOne) AddHTTPPort(i int) *AgentUpdateOne {
	auo.mutation.AddHTTPPort(i)
	return auo
}

// ClearHTTPPort clears the value of the "http_port" field.
func (auo *AgentUpdateOne) ClearHTTPPort() *AgentUpdateOne {
	auo.mutation.ClearHTTPPort()
	return auo
}

// SetNamespace sets the "namespace" field.
func (auo *AgentUpdateOne) SetNamespace(s string) *AgentUpdateOne {
	auo.mutation.SetNamespace(s)
	return auo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableNamespace(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetNamespace(*s)
	}
	return auo
}

// SetTotalDependencies sets the "total_dependencies" field.
func (auo *AgentUpdateOne) SetTotalDependencies(i int) *AgentUpdateOne {
	auo.mutation.ResetTotalDependencies()
	auo.mutation.SetTotalDependencies(i)
	return auo
}

// SetNillableTotalDependencies sets the "total_dependencies" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableTotalDependencies(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetTotalDependencies(*i)
	}
	return auo
}

// AddTotalDependencies adds i to the "total_dependencies" field.
func (auo *AgentUpdateOne) AddTotalDependencies(i int) *AgentUpdateOne {
	auo.mutation.AddTotalDependencies(i)
	return auo
}

// SetDependenciesResolved sets the "dependencies_resolved" field.
func (auo *AgentUpdateOne) SetDependenciesResolved(i int) *AgentUpdateOne {
	auo.mutation.ResetDependenciesResolved()
	auo.mutation.SetDependenciesResolved(i)
	return auo
}

// SetNillableDependenciesResolved sets the "dependencies_resolved" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDependenciesResolved(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetDependenciesResolved(*i)
	}
	return auo
}

// AddDependenciesResolved adds i to the "dependencies_resolved" field.
func (auo *AgentUpdateOne) AddDependenciesResolved(i int) *AgentUpdateOne {
	auo.mutation.AddDependenciesResolved(i)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// AddCapabilityIDs adds the "capabilities" edge to the Capability entity by IDs.
func (auo *AgentUpdateOne) AddCapabilityIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddCapabilityIDs(ids...)
	return auo
}

// AddCapabilities adds the "capabilities" edges to the Capability entity.
func (auo *AgentUpdateOne) AddCapabilities(c ...*Capability) *AgentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCapabilityIDs(ids...)
}

// AddEventIDs adds the "events" edge to the RegistryEvent entity by IDs.
func (auo *AgentUpdateOne) AddEventIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddEventIDs(ids...)
	return auo
}

// AddEvents adds the "events" edges to the RegistryEvent entity.
func (auo *AgentUpdateOne) AddEvents(r ...*RegistryEvent) *AgentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddEventIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearCapabilities clears all "capabilities" edges to the Capability entity.
func (auo *AgentUpdateOne) ClearCapabilities() *AgentUpdateOne {
	auo.mutation.ClearCapabilities()
	return auo
}

// RemoveCapabilityIDs removes the "capabilities" edge to Capability entities by IDs.
func (auo *AgentUpdateOne) RemoveCapabilityIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveCapabilityIDs(ids...)
	return auo
}

// RemoveCapabilities removes "capabilities" edges to Capability entities.
func (auo *AgentUpdateOne) RemoveCapabilities(c ...*Capability) *AgentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCapabilityIDs(ids...)
}

// ClearEvents clears all "events" edges to the RegistryEvent entity.
func (auo *AgentUpdateOne) ClearEvents() *AgentUpdateOne {
	auo.mutation.ClearEvents()
	return auo
}

// RemoveEventIDs removes the "events" edge to RegistryEvent entities by IDs.
func (auo *AgentUpdateOne) RemoveEventIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveEventIDs(ids...)
	return auo
}

// RemoveEvents removes "events" edges to RegistryEvent entities.
func (auo *AgentUpdateOne) RemoveEvents(r ...*RegistryEvent) *AgentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.AgentType(); ok {
		if err := agent.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_type": %w`, err)}
		}
	}
	return nil
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.AgentType(); ok {
		_spec.SetField(agent.FieldAgentType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.SetField(agent.FieldVersion, field.TypeString, value)
	}
	if auo.mutation.VersionCleared() {
		_spec.ClearField(agent.FieldVersion, field.TypeString)
	}
	if value, ok := auo.mutation.HTTPHost(); ok {
		_spec.SetField(agent.FieldHTTPHost, field.TypeString, value)
	}
	if auo.mutation.HTTPHostCleared() {
		_spec.ClearField(agent.FieldHTTPHost, field.TypeString)
	}
	if value, ok := auo.mutation.HTTPPort(); ok {
		_spec.SetField(agent.FieldHTTPPort, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedHTTPPort(); ok {
		_spec.AddField(agent.FieldHTTPPort, field.TypeInt, value)
	}
	if auo.mutation.HTTPPortCleared() {
		_spec.ClearField(agent.FieldHTTPPort, field.TypeInt)
	}
	if value, ok := auo.mutation.Namespace(); ok {
		_spec.SetField(agent.FieldNamespace, field.TypeString, value)
	}
	if value, ok := auo.mutation.TotalDependencies(); ok {
		_spec.SetField(agent.FieldTotalDependencies, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedTotalDependencies(); ok {
		_spec.AddField(agent.FieldTotalDependencies, field.TypeInt, value)
	}
	if value, ok := auo.mutation.DependenciesResolved(); ok {
		_spec.SetField(agent.FieldDependenciesResolved, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDependenciesResolved(); ok {
		_spec.AddField(agent.FieldDependenciesResolved, field.TypeInt, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.CapabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CapabilitiesTable,
			Columns: []string{agent.CapabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCapabilitiesIDs(); len(nodes) > 0 && !auo.mutation.CapabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CapabilitiesTable,
			Columns: []string{agent.CapabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CapabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CapabilitiesTable,
			Columns: []string{agent.CapabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.EventsTable,
			Columns: []string{agent.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !auo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.EventsTable,
			Columns: []string{agent.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.EventsTable,
			Columns: []string{agent.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

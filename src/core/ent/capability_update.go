// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/capability"
	"mcp-mesh/src/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CapabilityUpdate is the builder for updating Capability entities.
type CapabilityUpdate struct {
	config
	hooks    []Hook
	mutation *CapabilityMutation
}

// Where appends a list predicates to the CapabilityUpdate builder.
func (cu *CapabilityUpdate) Where(ps ...predicate.Capability) *CapabilityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetFunctionName sets the "function_name" field.
func (cu *CapabilityUpdate) SetFunctionName(s string) *CapabilityUpdate {
	cu.mutation.SetFunctionName(s)
	return cu
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (cu *CapabilityUpdate) SetNillableFunctionName(s *string) *CapabilityUpdate {
	if s != nil {
		cu.SetFunctionName(*s)
	}
	return cu
}

// SetCapability sets the "capability" field.
func (cu *CapabilityUpdate) SetCapability(s string) *CapabilityUpdate {
	cu.mutation.SetCapability(s)
	return cu
}

// SetNillableCapability sets the "capability" field if the given value is not nil.
func (cu *CapabilityUpdate) SetNillableCapability(s *string) *CapabilityUpdate {
	if s != nil {
		cu.SetCapability(*s)
	}
	return cu
}

// SetVersion sets the "version" field.
func (cu *CapabilityUpdate) SetVersion(s string) *CapabilityUpdate {
	cu.mutation.SetVersion(s)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *CapabilityUpdate) SetNillableVersion(s *string) *CapabilityUpdate {
	if s != nil {
		cu.SetVersion(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CapabilityUpdate) SetDescription(s string) *CapabilityUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CapabilityUpdate) SetNillableDescription(s *string) *CapabilityUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CapabilityUpdate) ClearDescription() *CapabilityUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetTags sets the "tags" field.
func (cu *CapabilityUpdate) SetTags(s []string) *CapabilityUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// AppendTags appends s to the "tags" field.
func (cu *CapabilityUpdate) AppendTags(s []string) *CapabilityUpdate {
	cu.mutation.AppendTags(s)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CapabilityUpdate) SetUpdatedAt(t time.Time) *CapabilityUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (cu *CapabilityUpdate) SetAgentID(id string) *CapabilityUpdate {
	cu.mutation.SetAgentID(id)
	return cu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (cu *CapabilityUpdate) SetAgent(a *Agent) *CapabilityUpdate {
	return cu.SetAgentID(a.ID)
}

// Mutation returns the CapabilityMutation object of the builder.
func (cu *CapabilityUpdate) Mutation() *CapabilityMutation {
	return cu.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (cu *CapabilityUpdate) ClearAgent() *CapabilityUpdate {
	cu.mutation.ClearAgent()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CapabilityUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CapabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CapabilityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CapabilityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CapabilityUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := capability.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CapabilityUpdate) check() error {
	if cu.mutation.AgentCleared() && len(cu.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Capability.agent"`)
	}
	return nil
}

func (cu *CapabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(capability.Table, capability.Columns, sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.FunctionName(); ok {
		_spec.SetField(capability.FieldFunctionName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Capability(); ok {
		_spec.SetField(capability.FieldCapability, field.TypeString, value)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(capability.FieldVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(capability.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(capability.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(capability.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, capability.FieldTags, value)
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(capability.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   capability.AgentTable,
			Columns: []string{capability.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   capability.AgentTable,
			Columns: []string{capability.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{capability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CapabilityUpdateOne is the builder for updating a single Capability entity.
type CapabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CapabilityMutation
}

// SetFunctionName sets the "function_name" field.
func (cuo *CapabilityUpdateOne) SetFunctionName(s string) *CapabilityUpdateOne {
	cuo.mutation.SetFunctionName(s)
	return cuo
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (cuo *CapabilityUpdateOne) SetNillableFunctionName(s *string) *CapabilityUpdateOne {
	if s != nil {
		cuo.SetFunctionName(*s)
	}
	return cuo
}

// SetCapability sets the "capability" field.
func (cuo *CapabilityUpdateOne) SetCapability(s string) *CapabilityUpdateOne {
	cuo.mutation.SetCapability(s)
	return cuo
}

// SetNillableCapability sets the "capability" field if the given value is not nil.
func (cuo *CapabilityUpdateOne) SetNillableCapability(s *string) *CapabilityUpdateOne {
	if s != nil {
		cuo.SetCapability(*s)
	}
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *CapabilityUpdateOne) SetVersion(s string) *CapabilityUpdateOne {
	cuo.mutation.SetVersion(s)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *CapabilityUpdateOne) SetNillableVersion(s *string) *CapabilityUpdateOne {
	if s != nil {
		cuo.SetVersion(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CapabilityUpdateOne) SetDescription(s string) *CapabilityUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CapabilityUpdateOne) SetNillableDescription(s *string) *CapabilityUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CapabilityUpdateOne) ClearDescription() *CapabilityUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *CapabilityUpdateOne) SetTags(s []string) *CapabilityUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// AppendTags appends s to the "tags" field.
func (cuo *CapabilityUpdateOne) AppendTags(s []string) *CapabilityUpdateOne {
	cuo.mutation.AppendTags(s)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CapabilityUpdateOne) SetUpdatedAt(t time.Time) *CapabilityUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (cuo *CapabilityUpdateOne) SetAgentID(id string) *CapabilityUpdateOne {
	cuo.mutation.SetAgentID(id)
	return cuo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (cuo *CapabilityUpdateOne) SetAgent(a *Agent) *CapabilityUpdateOne {
	return cuo.SetAgentID(a.ID)
}

// Mutation returns the CapabilityMutation object of the builder.
func (cuo *CapabilityUpdateOne) Mutation() *CapabilityMutation {
	return cuo.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (cuo *CapabilityUpdateOne) ClearAgent() *CapabilityUpdateOne {
	cuo.mutation.ClearAgent()
	return cuo
}

// Where appends a list predicates to the CapabilityUpdate builder.
func (cuo *CapabilityUpdateOne) Where(ps ...predicate.Capability) *CapabilityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CapabilityUpdateOne) Select(field string, fields ...string) *CapabilityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Capability entity.
func (cuo *CapabilityUpdateOne) Save(ctx context.Context) (*Capability, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CapabilityUpdateOne) SaveX(ctx context.Context) *Capability {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CapabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CapabilityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CapabilityUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := capability.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CapabilityUpdateOne) check() error {
	if cuo.mutation.AgentCleared() && len(cuo.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Capability.agent"`)
	}
	return nil
}

func (cuo *CapabilityUpdateOne) sqlSave(ctx context.Context) (_node *Capability, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(capability.Table, capability.Columns, sqlgraph.NewFieldSpec(capability.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Capability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, capability.FieldID)
		for _, f := range fields {
			if !capability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != capability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.FunctionName(); ok {
		_spec.SetField(capability.FieldFunctionName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Capability(); ok {
		_spec.SetField(capability.FieldCapability, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(capability.FieldVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(capability.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(capability.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(capability.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, capability.FieldTags, value)
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(capability.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   capability.AgentTable,
			Columns: []string{capability.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   capability.AgentTable,
			Columns: []string{capability.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Capability{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{capability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mcp-mesh/src/core/ent/agent"
	"mcp-mesh/src/core/ent/predicate"
	"mcp-mesh/src/core/ent/registryevent"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RegistryEventUpdate is the builder for updating RegistryEvent entities.
type RegistryEventUpdate struct {
	config
	hooks    []Hook
	mutation *RegistryEventMutation
}

// Where appends a list predicates to the RegistryEventUpdate builder.
func (reu *RegistryEventUpdate) Where(ps ...predicate.RegistryEvent) *RegistryEventUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetEventType sets the "event_type" field.
func (reu *RegistryEventUpdate) SetEventType(rt registryevent.EventType) *RegistryEventUpdate {
	reu.mutation.SetEventType(rt)
	return reu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (reu *RegistryEventUpdate) SetNillableEventType(rt *registryevent.EventType) *RegistryEventUpdate {
	if rt != nil {
		reu.SetEventType(*rt)
	}
	return reu
}

// SetFunctionName sets the "function_name" field.
func (reu *RegistryEventUpdate) SetFunctionName(s string) *RegistryEventUpdate {
	reu.mutation.SetFunctionName(s)
	return reu
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (reu *RegistryEventUpdate) SetNillableFunctionName(s *string) *RegistryEventUpdate {
	if s != nil {
		reu.SetFunctionName(*s)
	}
	return reu
}

// ClearFunctionName clears the value of the "function_name" field.
func (reu *RegistryEventUpdate) ClearFunctionName() *RegistryEventUpdate {
	reu.mutation.ClearFunctionName()
	return reu
}

// SetTimestamp sets the "timestamp" field.
func (reu *RegistryEventUpdate) SetTimestamp(t time.Time) *RegistryEventUpdate {
	reu.mutation.SetTimestamp(t)
	return reu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (reu *RegistryEventUpdate) SetNillableTimestamp(t *time.Time) *RegistryEventUpdate {
	if t != nil {
		reu.SetTimestamp(*t)
	}
	return reu
}

// SetData sets the "data" field.
func (reu *RegistryEventUpdate) SetData(m map[string]interface{}) *RegistryEventUpdate {
	reu.mutation.SetData(m)
	return reu
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (reu *RegistryEventUpdate) SetAgentID(id string) *RegistryEventUpdate {
	reu.mutation.SetAgentID(id)
	return reu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (reu *RegistryEventUpdate) SetAgent(a *Agent) *RegistryEventUpdate {
	return reu.SetAgentID(a.ID)
}

// Mutation returns the RegistryEventMutation object of the builder.
func (reu *RegistryEventUpdate) Mutation() *RegistryEventMutation {
	return reu.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (reu *RegistryEventUpdate) ClearAgent() *RegistryEventUpdate {
	reu.mutation.ClearAgent()
	return reu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *RegistryEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *RegistryEventUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *RegistryEventUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *RegistryEventUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reu *RegistryEventUpdate) check() error {
	if v, ok := reu.mutation.EventType(); ok {
		if err := registryevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "RegistryEvent.event_type": %w`, err)}
		}
	}
	if reu.mutation.AgentCleared() && len(reu.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RegistryEvent.agent"`)
	}
	return nil
}

func (reu *RegistryEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := reu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(registryevent.Table, registryevent.Columns, sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.EventType(); ok {
		_spec.SetField(registryevent.FieldEventType, field.TypeEnum, value)
	}
	if value, ok := reu.mutation.FunctionName(); ok {
		_spec.SetField(registryevent.FieldFunctionName, field.TypeString, value)
	}
	if reu.mutation.FunctionNameCleared() {
		_spec.ClearField(registryevent.FieldFunctionName, field.TypeString)
	}
	if value, ok := reu.mutation.Timestamp(); ok {
		_spec.SetField(registryevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := reu.mutation.Data(); ok {
		_spec.SetField(registryevent.FieldData, field.TypeJSON, value)
	}
	if reu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   registryevent.AgentTable,
			Columns: []string{registryevent.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   registryevent.AgentTable,
			Columns: []string{registryevent.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registryevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// RegistryEventUpdateOne is the builder for updating a single RegistryEvent entity.
type RegistryEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegistryEventMutation
}

// SetEventType sets the "event_type" field.
func (reuo *RegistryEventUpdateOne) SetEventType(rt registryevent.EventType) *RegistryEventUpdateOne {
	reuo.mutation.SetEventType(rt)
	return reuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (reuo *RegistryEventUpdateOne) SetNillableEventType(rt *registryevent.EventType) *RegistryEventUpdateOne {
	if rt != nil {
		reuo.SetEventType(*rt)
	}
	return reuo
}

// SetFunctionName sets the "function_name" field.
func (reuo *RegistryEventUpdateOne) SetFunctionName(s string) *RegistryEventUpdateOne {
	reuo.mutation.SetFunctionName(s)
	return reuo
}

// SetNillableFunctionName sets the "function_name" field if the given value is not nil.
func (reuo *RegistryEventUpdateOne) SetNillableFunctionName(s *string) *RegistryEventUpdateOne {
	if s != nil {
		reuo.SetFunctionName(*s)
	}
	return reuo
}

// ClearFunctionName clears the value of the "function_name" field.
func (reuo *RegistryEventUpdateOne) ClearFunctionName() *RegistryEventUpdateOne {
	reuo.mutation.ClearFunctionName()
	return reuo
}

// SetTimestamp sets the "timestamp" field.
func (reuo *RegistryEventUpdateOne) SetTimestamp(t time.Time) *RegistryEventUpdateOne {
	reuo.mutation.SetTimestamp(t)
	return reuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (reuo *RegistryEventUpdateOne) SetNillableTimestamp(t *time.Time) *RegistryEventUpdateOne {
	if t != nil {
		reuo.SetTimestamp(*t)
	}
	return reuo
}

// SetData sets the "data" field.
func (reuo *RegistryEventUpdateOne) SetData(m map[string]interface{}) *RegistryEventUpdateOne {
	reuo.mutation.SetData(m)
	return reuo
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (reuo *RegistryEventUpdateOne) SetAgentID(id string) *RegistryEventUpdateOne {
	reuo.mutation.SetAgentID(id)
	return reuo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (reuo *RegistryEventUpdateOne) SetAgent(a *Agent) *RegistryEventUpdateOne {
	return reuo.SetAgentID(a.ID)
}

// Mutation returns the RegistryEventMutation object of the builder.
func (reuo *RegistryEventUpdateOne) Mutation() *RegistryEventMutation {
	return reuo.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (reuo *RegistryEventUpdateOne) ClearAgent() *RegistryEventUpdateOne {
	reuo.mutation.ClearAgent()
	return reuo
}

// Where appends a list predicates to the RegistryEventUpdate builder.
func (reuo *RegistryEventUpdateOne) Where(ps ...predicate.RegistryEvent) *RegistryEventUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *RegistryEventUpdateOne) Select(field string, fields ...string) *RegistryEventUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated RegistryEvent entity.
func (reuo *RegistryEventUpdateOne) Save(ctx context.Context) (*RegistryEvent, error) {
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *RegistryEventUpdateOne) SaveX(ctx context.Context) *RegistryEvent {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *RegistryEventUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *RegistryEventUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reuo *RegistryEventUpdateOne) check() error {
	if v, ok := reuo.mutation.EventType(); ok {
		if err := registryevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "RegistryEvent.event_type": %w`, err)}
		}
	}
	if reuo.mutation.AgentCleared() && len(reuo.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RegistryEvent.agent"`)
	}
	return nil
}

func (reuo *RegistryEventUpdateOne) sqlSave(ctx context.Context) (_node *RegistryEvent, err error) {
	if err := reuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(registryevent.Table, registryevent.Columns, sqlgraph.NewFieldSpec(registryevent.FieldID, field.TypeInt))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegistryEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registryevent.FieldID)
		for _, f := range fields {
			if !registryevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != registryevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.EventType(); ok {
		_spec.SetField(registryevent.FieldEventType, field.TypeEnum, value)
	}
	if value, ok := reuo.mutation.FunctionName(); ok {
		_spec.SetField(registryevent.FieldFunctionName, field.TypeString, value)
	}
	if reuo.mutation.FunctionNameCleared() {
		_spec.ClearField(registryevent.FieldFunctionName, field.TypeString)
	}
	if value, ok := reuo.mutation.Timestamp(); ok {
		_spec.SetField(registryevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := reuo.mutation.Data(); ok {
		_spec.SetField(registryevent.FieldData, field.TypeJSON, value)
	}
	if reuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   registryevent.AgentTable,
			Columns: []string{registryevent.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   registryevent.AgentTable,
			Columns: []string{registryevent.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RegistryEvent{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registryevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}

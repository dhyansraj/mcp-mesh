// Code generated by ent, DO NOT EDIT.

package capability

import (
	"mcp-mesh/src/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldID, id))
}

// FunctionName applies equality check predicate on the "function_name" field. It's identical to FunctionNameEQ.
func FunctionName(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldFunctionName, v))
}

// Capability applies equality check predicate on the "capability" field. It's identical to CapabilityEQ.
func Capability(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldCapability, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldVersion, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldUpdatedAt, v))
}

// FunctionNameEQ applies the EQ predicate on the "function_name" field.
func FunctionNameEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldFunctionName, v))
}

// FunctionNameNEQ applies the NEQ predicate on the "function_name" field.
func FunctionNameNEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldFunctionName, v))
}

// FunctionNameIn applies the In predicate on the "function_name" field.
func FunctionNameIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldFunctionName, vs...))
}

// FunctionNameNotIn applies the NotIn predicate on the "function_name" field.
func FunctionNameNotIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldFunctionName, vs...))
}

// FunctionNameGT applies the GT predicate on the "function_name" field.
func FunctionNameGT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldFunctionName, v))
}

// FunctionNameGTE applies the GTE predicate on the "function_name" field.
func FunctionNameGTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldFunctionName, v))
}

// FunctionNameLT applies the LT predicate on the "function_name" field.
func FunctionNameLT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldFunctionName, v))
}

// FunctionNameLTE applies the LTE predicate on the "function_name" field.
func FunctionNameLTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldFunctionName, v))
}

// FunctionNameContains applies the Contains predicate on the "function_name" field.
func FunctionNameContains(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContains(FieldFunctionName, v))
}

// FunctionNameHasPrefix applies the HasPrefix predicate on the "function_name" field.
func FunctionNameHasPrefix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasPrefix(FieldFunctionName, v))
}

// FunctionNameHasSuffix applies the HasSuffix predicate on the "function_name" field.
func FunctionNameHasSuffix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasSuffix(FieldFunctionName, v))
}

// FunctionNameEqualFold applies the EqualFold predicate on the "function_name" field.
func FunctionNameEqualFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEqualFold(FieldFunctionName, v))
}

// FunctionNameContainsFold applies the ContainsFold predicate on the "function_name" field.
func FunctionNameContainsFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContainsFold(FieldFunctionName, v))
}

// CapabilityEQ applies the EQ predicate on the "capability" field.
func CapabilityEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldCapability, v))
}

// CapabilityNEQ applies the NEQ predicate on the "capability" field.
func CapabilityNEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldCapability, v))
}

// CapabilityIn applies the In predicate on the "capability" field.
func CapabilityIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldCapability, vs...))
}

// CapabilityNotIn applies the NotIn predicate on the "capability" field.
func CapabilityNotIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldCapability, vs...))
}

// CapabilityGT applies the GT predicate on the "capability" field.
func CapabilityGT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldCapability, v))
}

// CapabilityGTE applies the GTE predicate on the "capability" field.
func CapabilityGTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldCapability, v))
}

// CapabilityLT applies the LT predicate on the "capability" field.
func CapabilityLT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldCapability, v))
}

// CapabilityLTE applies the LTE predicate on the "capability" field.
func CapabilityLTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldCapability, v))
}

// CapabilityContains applies the Contains predicate on the "capability" field.
func CapabilityContains(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContains(FieldCapability, v))
}

// CapabilityHasPrefix applies the HasPrefix predicate on the "capability" field.
func CapabilityHasPrefix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasPrefix(FieldCapability, v))
}

// CapabilityHasSuffix applies the HasSuffix predicate on the "capability" field.
func CapabilityHasSuffix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasSuffix(FieldCapability, v))
}

// CapabilityEqualFold applies the EqualFold predicate on the "capability" field.
func CapabilityEqualFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEqualFold(FieldCapability, v))
}

// CapabilityContainsFold applies the ContainsFold predicate on the "capability" field.
func CapabilityContainsFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContainsFold(FieldCapability, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContainsFold(FieldVersion, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Capability {
	return predicate.Capability(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Capability {
	return predicate.Capability(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Capability {
	return predicate.Capability(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Capability {
	return predicate.Capability(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Capability {
	return predicate.Capability(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.Capability {
	return predicate.Capability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.Capability {
	return predicate.Capability(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Capability) predicate.Capability {
	return predicate.Capability(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Capability) predicate.Capability {
	return predicate.Capability(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Capability) predicate.Capability {
	return predicate.Capability(sql.NotPredicates(p))
}

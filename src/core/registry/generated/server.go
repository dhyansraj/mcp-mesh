// ðŸ¤– AI BEHAVIOR GUIDANCE:
// This file contains generated REGISTRY server interfaces from OpenAPI spec.
// DO NOT modify this file directly - it will be overwritten.
//
// SCOPE: Registry API endpoints for agent registration and management
//
// TO ADD NEW REGISTRY ENDPOINTS:
// 1. Update api/mcp-mesh-registry.openapi.yaml
// 2. Run: make generate
// 3. Implement business logic in handlers_impl.go
//
// GENERATED FROM: api/mcp-mesh-registry.openapi.yaml
// CONTRACT: Registry service endpoints only

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for AgentInfoStatus.
const (
	AgentInfoStatusDegraded  AgentInfoStatus = "degraded"
	AgentInfoStatusHealthy   AgentInfoStatus = "healthy"
	AgentInfoStatusOffline   AgentInfoStatus = "offline"
	AgentInfoStatusUnhealthy AgentInfoStatus = "unhealthy"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDegraded  HealthResponseStatus = "degraded"
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for MeshAgentRegistrationAgentType.
const (
	McpAgent MeshAgentRegistrationAgentType = "mcp_agent"
)

// Defines values for MeshRegistrationResponseDependenciesResolvedStatus.
const (
	Available   MeshRegistrationResponseDependenciesResolvedStatus = "available"
	Degraded    MeshRegistrationResponseDependenciesResolvedStatus = "degraded"
	Unavailable MeshRegistrationResponseDependenciesResolvedStatus = "unavailable"
)

// Defines values for MeshRegistrationResponseStatus.
const (
	Error   MeshRegistrationResponseStatus = "error"
	Success MeshRegistrationResponseStatus = "success"
)

// AgentInfo defines model for AgentInfo.
type AgentInfo struct {
	Capabilities []CapabilityInfo `json:"capabilities"`

	// DependenciesResolved Number of dependencies that have been resolved
	DependenciesResolved int             `json:"dependencies_resolved"`
	Endpoint             string          `json:"endpoint"`
	Id                   string          `json:"id"`
	LastSeen             *time.Time      `json:"last_seen,omitempty"`
	Name                 string          `json:"name"`
	Status               AgentInfoStatus `json:"status"`

	// TotalDependencies Total number of dependencies required by this agent
	TotalDependencies int     `json:"total_dependencies"`
	Version           *string `json:"version,omitempty"`
}

// AgentInfoStatus defines model for AgentInfo.Status.
type AgentInfoStatus string

// AgentsListResponse defines model for AgentsListResponse.
type AgentsListResponse struct {
	// Agents List of registered agents
	Agents []AgentInfo `json:"agents"`

	// Count Total number of agents
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
}

// CapabilityInfo defines model for CapabilityInfo.
type CapabilityInfo struct {
	// Description Human-readable description of the capability
	Description *string `json:"description,omitempty"`

	// FunctionName Name of the function that provides this capability
	FunctionName string `json:"function_name"`

	// Name Capability name
	Name string `json:"name"`

	// Tags Tags associated with this capability
	Tags *[]string `json:"tags,omitempty"`

	// Version Capability version
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Service Service identifier
	Service string `json:"service"`

	// Status Overall registry health status
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server timestamp
	Timestamp time.Time `json:"timestamp"`

	// UptimeSeconds Registry uptime in seconds
	UptimeSeconds int `json:"uptime_seconds"`

	// Version Registry version
	Version string `json:"version"`
}

// HealthResponseStatus Overall registry health status
type HealthResponseStatus string

// MeshAgentRegistration Agent registration request with flattened structure.
// Used by both /agents/register and /heartbeat endpoints.
// Based on @mesh.tool decorator processing - always has at least one tool.
type MeshAgentRegistration struct {
	// AgentId Unique identifier for the agent
	AgentId string `json:"agent_id"`

	// AgentType Type of agent (always mcp_agent for mesh tools)
	AgentType *MeshAgentRegistrationAgentType `json:"agent_type,omitempty"`

	// HttpHost HTTP host for agent endpoint
	HttpHost *string `json:"http_host,omitempty"`

	// HttpPort HTTP port for agent endpoint (0 for stdio)
	HttpPort *int `json:"http_port,omitempty"`

	// Name Human-readable agent name (defaults to agent_id)
	Name *string `json:"name,omitempty"`

	// Namespace Agent namespace for organization
	Namespace *string `json:"namespace,omitempty"`

	// Timestamp Registration/heartbeat timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Tools Array of tools provided by this agent (@mesh.tool functions)
	Tools []MeshToolRegistration `json:"tools"`

	// Version Agent version
	Version *string `json:"version,omitempty"`
}

// MeshAgentRegistrationAgentType Type of agent (always mcp_agent for mesh tools)
type MeshAgentRegistrationAgentType string

// MeshRegistrationResponse Response for both registration and heartbeat requests
type MeshRegistrationResponse struct {
	// AgentId Confirmed agent ID
	AgentId string `json:"agent_id"`

	// DependenciesResolved Function name to array of resolved dependencies mapping.
	// ðŸ¤– AI NOTE: This enables immediate dependency injection setup.
	DependenciesResolved *map[string][]struct {
		// AgentId ID of the agent providing the dependency
		AgentId string `json:"agent_id"`

		// Capability Capability name for dependency matching
		Capability string `json:"capability"`

		// Endpoint Endpoint to connect to the provider
		Endpoint string `json:"endpoint"`

		// FunctionName Actual function name to call on provider
		FunctionName string `json:"function_name"`

		// Status Current status of the dependency
		Status MeshRegistrationResponseDependenciesResolvedStatus `json:"status"`
	} `json:"dependencies_resolved,omitempty"`
	Message   string                         `json:"message"`
	Status    MeshRegistrationResponseStatus `json:"status"`
	Timestamp time.Time                      `json:"timestamp"`
}

// MeshRegistrationResponseDependenciesResolvedStatus Current status of the dependency
type MeshRegistrationResponseDependenciesResolvedStatus string

// MeshRegistrationResponseStatus defines model for MeshRegistrationResponse.Status.
type MeshRegistrationResponseStatus string

// MeshToolDependencyRegistration Dependency specification for a tool function
type MeshToolDependencyRegistration struct {
	// Capability Required capability name
	Capability string `json:"capability"`

	// Namespace Namespace filter
	Namespace *string `json:"namespace,omitempty"`

	// Tags Tags for smart matching
	Tags *[]string `json:"tags,omitempty"`

	// Version Version constraint
	Version *string `json:"version,omitempty"`
}

// MeshToolRegistration Metadata for a single @mesh.tool decorated function
type MeshToolRegistration struct {
	// Capability Capability provided by this function
	Capability string `json:"capability"`

	// Dependencies Dependencies required by this function
	Dependencies *[]MeshToolDependencyRegistration `json:"dependencies,omitempty"`

	// Description Function description
	Description *string `json:"description,omitempty"`

	// FunctionName Name of the decorated function
	FunctionName string `json:"function_name"`

	// Tags Tags for this capability
	Tags *[]string `json:"tags,omitempty"`

	// Version Function/capability version
	Version *string `json:"version,omitempty"`
}

// RootResponse defines model for RootResponse.
type RootResponse struct {
	// Endpoints Available API endpoints
	Endpoints []string `json:"endpoints"`
	Service   string   `json:"service"`
	Status    string   `json:"status"`
	Version   string   `json:"version"`
}

// RegisterAgentJSONRequestBody defines body for RegisterAgent for application/json ContentType.
type RegisterAgentJSONRequestBody = MeshAgentRegistration

// SendHeartbeatJSONRequestBody defines body for SendHeartbeat for application/json ContentType.
type SendHeartbeatJSONRequestBody = MeshAgentRegistration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Registry root information
	// (GET /)
	GetRoot(c *gin.Context)
	// List all registered agents
	// (GET /agents)
	ListAgents(c *gin.Context)
	// Register agent with registry
	// (POST /agents/register)
	RegisterAgent(c *gin.Context)
	// Registry health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Send agent heartbeat
	// (POST /heartbeat)
	SendHeartbeat(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAgents(c)
}

// RegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) RegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterAgent(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// SendHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) SendHeartbeat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendHeartbeat(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetRoot)
	router.GET(options.BaseURL+"/agents", wrapper.ListAgents)
	router.POST(options.BaseURL+"/agents/register", wrapper.RegisterAgent)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/heartbeat", wrapper.SendHeartbeat)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+uL6PwEAAP//lgduPWM0AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// ðŸ¤– AI BEHAVIOR GUIDANCE:
// This file contains generated REGISTRY server interfaces from OpenAPI spec.
// DO NOT modify this file directly - it will be overwritten.
//
// SCOPE: Registry API endpoints for agent registration and management
//
// TO ADD NEW REGISTRY ENDPOINTS:
// 1. Update api/mcp-mesh-registry.openapi.yaml
// 2. Run: make generate
// 3. Implement business logic in handlers_impl.go
//
// GENERATED FROM: api/mcp-mesh-registry.openapi.yaml
// CONTRACT: Registry service endpoints only

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for AgentInfoStatus.
const (
	AgentInfoStatusDegraded  AgentInfoStatus = "degraded"
	AgentInfoStatusHealthy   AgentInfoStatus = "healthy"
	AgentInfoStatusOffline   AgentInfoStatus = "offline"
	AgentInfoStatusUnhealthy AgentInfoStatus = "unhealthy"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDegraded  HealthResponseStatus = "degraded"
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for MeshAgentRegistrationAgentType.
const (
	McpAgent MeshAgentRegistrationAgentType = "mcp_agent"
)

// Defines values for MeshRegistrationResponseDependenciesResolvedStatus.
const (
	Available   MeshRegistrationResponseDependenciesResolvedStatus = "available"
	Degraded    MeshRegistrationResponseDependenciesResolvedStatus = "degraded"
	Unavailable MeshRegistrationResponseDependenciesResolvedStatus = "unavailable"
)

// Defines values for MeshRegistrationResponseStatus.
const (
	Error   MeshRegistrationResponseStatus = "error"
	Success MeshRegistrationResponseStatus = "success"
)

// AgentInfo defines model for AgentInfo.
type AgentInfo struct {
	Capabilities []CapabilityInfo `json:"capabilities"`

	// DependenciesResolved Number of dependencies that have been resolved
	DependenciesResolved int             `json:"dependencies_resolved"`
	Endpoint             string          `json:"endpoint"`
	Id                   string          `json:"id"`
	LastSeen             *time.Time      `json:"last_seen,omitempty"`
	Name                 string          `json:"name"`
	Status               AgentInfoStatus `json:"status"`

	// TotalDependencies Total number of dependencies required by this agent
	TotalDependencies int     `json:"total_dependencies"`
	Version           *string `json:"version,omitempty"`
}

// AgentInfoStatus defines model for AgentInfo.Status.
type AgentInfoStatus string

// AgentsListResponse defines model for AgentsListResponse.
type AgentsListResponse struct {
	// Agents List of registered agents
	Agents []AgentInfo `json:"agents"`

	// Count Total number of agents
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
}

// CapabilityInfo defines model for CapabilityInfo.
type CapabilityInfo struct {
	// Description Human-readable description of the capability
	Description *string `json:"description,omitempty"`

	// FunctionName Name of the function that provides this capability
	FunctionName string `json:"function_name"`

	// Name Capability name
	Name string `json:"name"`

	// Tags Tags associated with this capability
	Tags *[]string `json:"tags,omitempty"`

	// Version Capability version
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Service Service identifier
	Service string `json:"service"`

	// Status Overall registry health status
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server timestamp
	Timestamp time.Time `json:"timestamp"`

	// UptimeSeconds Registry uptime in seconds
	UptimeSeconds int `json:"uptime_seconds"`

	// Version Registry version
	Version string `json:"version"`
}

// HealthResponseStatus Overall registry health status
type HealthResponseStatus string

// MeshAgentRegistration Agent registration request with flattened structure.
// Used by both /agents/register and /heartbeat endpoints.
// Based on @mesh.tool decorator processing - always has at least one tool.
type MeshAgentRegistration struct {
	// AgentId Unique identifier for the agent
	AgentId string `json:"agent_id"`

	// AgentType Type of agent (always mcp_agent for mesh tools)
	AgentType *MeshAgentRegistrationAgentType `json:"agent_type,omitempty"`

	// HttpHost HTTP host for agent endpoint
	HttpHost *string `json:"http_host,omitempty"`

	// HttpPort HTTP port for agent endpoint (0 for stdio)
	HttpPort *int `json:"http_port,omitempty"`

	// Name Human-readable agent name (defaults to agent_id)
	Name *string `json:"name,omitempty"`

	// Namespace Agent namespace for organization
	Namespace *string `json:"namespace,omitempty"`

	// Timestamp Registration/heartbeat timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Tools Array of tools provided by this agent (@mesh.tool functions)
	Tools []MeshToolRegistration `json:"tools"`

	// Version Agent version
	Version *string `json:"version,omitempty"`
}

// MeshAgentRegistrationAgentType Type of agent (always mcp_agent for mesh tools)
type MeshAgentRegistrationAgentType string

// MeshRegistrationResponse Response for both registration and heartbeat requests
type MeshRegistrationResponse struct {
	// AgentId Confirmed agent ID
	AgentId string `json:"agent_id"`

	// DependenciesResolved Function name to array of resolved dependencies mapping.
	// ðŸ¤– AI NOTE: This enables immediate dependency injection setup.
	DependenciesResolved *map[string][]struct {
		// AgentId ID of the agent providing the dependency
		AgentId string `json:"agent_id"`

		// Capability Capability name for dependency matching
		Capability string `json:"capability"`

		// Endpoint Endpoint to connect to the provider
		Endpoint string `json:"endpoint"`

		// FunctionName Actual function name to call on provider
		FunctionName string `json:"function_name"`

		// Status Current status of the dependency
		Status MeshRegistrationResponseDependenciesResolvedStatus `json:"status"`
	} `json:"dependencies_resolved,omitempty"`
	Message   string                         `json:"message"`
	Status    MeshRegistrationResponseStatus `json:"status"`
	Timestamp time.Time                      `json:"timestamp"`
}

// MeshRegistrationResponseDependenciesResolvedStatus Current status of the dependency
type MeshRegistrationResponseDependenciesResolvedStatus string

// MeshRegistrationResponseStatus defines model for MeshRegistrationResponse.Status.
type MeshRegistrationResponseStatus string

// MeshToolDependencyRegistration Dependency specification for a tool function
type MeshToolDependencyRegistration struct {
	// Capability Required capability name
	Capability string `json:"capability"`

	// Namespace Namespace filter
	Namespace *string `json:"namespace,omitempty"`

	// Tags Tags for smart matching
	Tags *[]string `json:"tags,omitempty"`

	// Version Version constraint
	Version *string `json:"version,omitempty"`
}

// MeshToolRegistration Metadata for a single @mesh.tool decorated function
type MeshToolRegistration struct {
	// Capability Capability provided by this function
	Capability string `json:"capability"`

	// Dependencies Dependencies required by this function
	Dependencies *[]MeshToolDependencyRegistration `json:"dependencies,omitempty"`

	// Description Function description
	Description *string `json:"description,omitempty"`

	// FunctionName Name of the decorated function
	FunctionName string `json:"function_name"`

	// Tags Tags for this capability
	Tags *[]string `json:"tags,omitempty"`

	// Version Function/capability version
	Version *string `json:"version,omitempty"`
}

// RootResponse defines model for RootResponse.
type RootResponse struct {
	// Endpoints Available API endpoints
	Endpoints []string `json:"endpoints"`
	Service   string   `json:"service"`
	Status    string   `json:"status"`
	Version   string   `json:"version"`
}

// SendHeartbeatJSONRequestBody defines body for SendHeartbeat for application/json ContentType.
type SendHeartbeatJSONRequestBody = MeshAgentRegistration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Registry root information
	// (GET /)
	GetRoot(c *gin.Context)
	// List all registered agents
	// (GET /agents)
	ListAgents(c *gin.Context)
	// Registry health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Agent registration and heartbeat
	// (POST /heartbeat)
	SendHeartbeat(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAgents(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// SendHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) SendHeartbeat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendHeartbeat(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetRoot)
	router.GET(options.BaseURL+"/agents", wrapper.ListAgents)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/heartbeat", wrapper.SendHeartbeat)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/U8AAAD//0MkzvpNLQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

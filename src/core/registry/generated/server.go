// ðŸ¤– AI BEHAVIOR GUIDANCE:
// This file contains generated REGISTRY server interfaces from OpenAPI spec.
// DO NOT modify this file directly - it will be overwritten.
//
// SCOPE: Registry API endpoints for agent registration and management
//
// TO ADD NEW REGISTRY ENDPOINTS:
// 1. Update api/mcp-mesh-registry.openapi.yaml
// 2. Run: make generate
// 3. Implement business logic in handlers_impl.go
//
// GENERATED FROM: api/mcp-mesh-registry.openapi.yaml
// CONTRACT: Registry service endpoints only

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for AgentInfoStatus.
const (
	AgentInfoStatusDegraded  AgentInfoStatus = "degraded"
	AgentInfoStatusHealthy   AgentInfoStatus = "healthy"
	AgentInfoStatusOffline   AgentInfoStatus = "offline"
	AgentInfoStatusUnhealthy AgentInfoStatus = "unhealthy"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDegraded  HealthResponseStatus = "degraded"
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for MeshAgentRegistrationAgentType.
const (
	McpAgent MeshAgentRegistrationAgentType = "mcp_agent"
)

// Defines values for MeshRegistrationResponseDependenciesResolvedStatus.
const (
	Available   MeshRegistrationResponseDependenciesResolvedStatus = "available"
	Degraded    MeshRegistrationResponseDependenciesResolvedStatus = "degraded"
	Unavailable MeshRegistrationResponseDependenciesResolvedStatus = "unavailable"
)

// Defines values for MeshRegistrationResponseStatus.
const (
	Error   MeshRegistrationResponseStatus = "error"
	Success MeshRegistrationResponseStatus = "success"
)

// AgentInfo defines model for AgentInfo.
type AgentInfo struct {
	Capabilities []CapabilityInfo `json:"capabilities"`

	// DependenciesResolved Number of dependencies that have been resolved
	DependenciesResolved int             `json:"dependencies_resolved"`
	Endpoint             string          `json:"endpoint"`
	Id                   string          `json:"id"`
	LastSeen             *time.Time      `json:"last_seen,omitempty"`
	Name                 string          `json:"name"`
	Status               AgentInfoStatus `json:"status"`

	// TotalDependencies Total number of dependencies required by this agent
	TotalDependencies int     `json:"total_dependencies"`
	Version           *string `json:"version,omitempty"`
}

// AgentInfoStatus defines model for AgentInfo.Status.
type AgentInfoStatus string

// AgentsListResponse defines model for AgentsListResponse.
type AgentsListResponse struct {
	// Agents List of registered agents
	Agents []AgentInfo `json:"agents"`

	// Count Total number of agents
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
}

// CapabilityInfo defines model for CapabilityInfo.
type CapabilityInfo struct {
	// Description Human-readable description of the capability
	Description *string `json:"description,omitempty"`

	// FunctionName Name of the function that provides this capability
	FunctionName string `json:"function_name"`

	// Name Capability name
	Name string `json:"name"`

	// Tags Tags associated with this capability
	Tags *[]string `json:"tags,omitempty"`

	// Version Capability version
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Service Service identifier
	Service string `json:"service"`

	// Status Overall registry health status
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server timestamp
	Timestamp time.Time `json:"timestamp"`

	// UptimeSeconds Registry uptime in seconds
	UptimeSeconds int `json:"uptime_seconds"`

	// Version Registry version
	Version string `json:"version"`
}

// HealthResponseStatus Overall registry health status
type HealthResponseStatus string

// MeshAgentRegistration Agent registration request with flattened structure.
// Used by both /agents/register and /heartbeat endpoints.
// Based on @mesh.tool decorator processing - always has at least one tool.
type MeshAgentRegistration struct {
	// AgentId Unique identifier for the agent
	AgentId string `json:"agent_id"`

	// AgentType Type of agent (always mcp_agent for mesh tools)
	AgentType *MeshAgentRegistrationAgentType `json:"agent_type,omitempty"`

	// HttpHost HTTP host for agent endpoint
	HttpHost *string `json:"http_host,omitempty"`

	// HttpPort HTTP port for agent endpoint (0 for stdio)
	HttpPort *int `json:"http_port,omitempty"`

	// Name Human-readable agent name (defaults to agent_id)
	Name *string `json:"name,omitempty"`

	// Namespace Agent namespace for organization
	Namespace *string `json:"namespace,omitempty"`

	// Timestamp Registration/heartbeat timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Tools Array of tools provided by this agent (@mesh.tool functions)
	Tools []MeshToolRegistration `json:"tools"`

	// Version Agent version
	Version *string `json:"version,omitempty"`
}

// MeshAgentRegistrationAgentType Type of agent (always mcp_agent for mesh tools)
type MeshAgentRegistrationAgentType string

// MeshRegistrationResponse Response for both registration and heartbeat requests
type MeshRegistrationResponse struct {
	// AgentId Confirmed agent ID
	AgentId string `json:"agent_id"`

	// DependenciesResolved Function name to array of resolved dependencies mapping.
	// ðŸ¤– AI NOTE: This enables immediate dependency injection setup.
	DependenciesResolved *map[string][]struct {
		// AgentId ID of the agent providing the dependency
		AgentId string `json:"agent_id"`

		// Capability Capability name for dependency matching
		Capability string `json:"capability"`

		// Endpoint Endpoint to connect to the provider
		Endpoint string `json:"endpoint"`

		// FunctionName Actual function name to call on provider
		FunctionName string `json:"function_name"`

		// Status Current status of the dependency
		Status MeshRegistrationResponseDependenciesResolvedStatus `json:"status"`
	} `json:"dependencies_resolved,omitempty"`
	Message   string                         `json:"message"`
	Status    MeshRegistrationResponseStatus `json:"status"`
	Timestamp time.Time                      `json:"timestamp"`
}

// MeshRegistrationResponseDependenciesResolvedStatus Current status of the dependency
type MeshRegistrationResponseDependenciesResolvedStatus string

// MeshRegistrationResponseStatus defines model for MeshRegistrationResponse.Status.
type MeshRegistrationResponseStatus string

// MeshToolDependencyRegistration Dependency specification for a tool function
type MeshToolDependencyRegistration struct {
	// Capability Required capability name
	Capability string `json:"capability"`

	// Namespace Namespace filter
	Namespace *string `json:"namespace,omitempty"`

	// Tags Tags for smart matching
	Tags *[]string `json:"tags,omitempty"`

	// Version Version constraint
	Version *string `json:"version,omitempty"`
}

// MeshToolRegistration Metadata for a single @mesh.tool decorated function
type MeshToolRegistration struct {
	// Capability Capability provided by this function
	Capability string `json:"capability"`

	// Dependencies Dependencies required by this function
	Dependencies *[]MeshToolDependencyRegistration `json:"dependencies,omitempty"`

	// Description Function description
	Description *string `json:"description,omitempty"`

	// FunctionName Name of the decorated function
	FunctionName string `json:"function_name"`

	// Tags Tags for this capability
	Tags *[]string `json:"tags,omitempty"`

	// Version Function/capability version
	Version *string `json:"version,omitempty"`
}

// RootResponse defines model for RootResponse.
type RootResponse struct {
	// Endpoints Available API endpoints
	Endpoints []string `json:"endpoints"`
	Service   string   `json:"service"`
	Status    string   `json:"status"`
	Version   string   `json:"version"`
}

// SendHeartbeatJSONRequestBody defines body for SendHeartbeat for application/json ContentType.
type SendHeartbeatJSONRequestBody = MeshAgentRegistration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Registry root information
	// (GET /)
	GetRoot(c *gin.Context)
	// List all registered agents
	// (GET /agents)
	ListAgents(c *gin.Context)
	// Registry health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Registry health check (headers only)
	// (HEAD /health)
	HeadHealth(c *gin.Context)
	// Agent registration and heartbeat
	// (POST /heartbeat)
	SendHeartbeat(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAgents(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// HeadHealth operation middleware
func (siw *ServerInterfaceWrapper) HeadHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HeadHealth(c)
}

// SendHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) SendHeartbeat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendHeartbeat(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetRoot)
	router.GET(options.BaseURL+"/agents", wrapper.ListAgents)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.HEAD(options.BaseURL+"/health", wrapper.HeadHealth)
	router.POST(options.BaseURL+"/heartbeat", wrapper.SendHeartbeat)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// ðŸ¤– AI BEHAVIOR GUIDANCE:
// This file contains generated REGISTRY server interfaces from OpenAPI spec.
// DO NOT modify this file directly - it will be overwritten.
//
// SCOPE: Registry API endpoints for agent registration and management
//
// TO ADD NEW REGISTRY ENDPOINTS:
// 1. Update api/mcp-mesh-registry.openapi.yaml
// 2. Run: make generate
// 3. Implement business logic in handlers_impl.go
//
// GENERATED FROM: api/mcp-mesh-registry.openapi.yaml
// CONTRACT: Registry service endpoints only

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for AgentInfoStatus.
const (
	AgentInfoStatusDegraded  AgentInfoStatus = "degraded"
	AgentInfoStatusHealthy   AgentInfoStatus = "healthy"
	AgentInfoStatusOffline   AgentInfoStatus = "offline"
	AgentInfoStatusUnhealthy AgentInfoStatus = "unhealthy"
)

// Defines values for AgentMetadataAgentType.
const (
	McpAgent    AgentMetadataAgentType = "mcp_agent"
	MeshAgent   AgentMetadataAgentType = "mesh_agent"
	SystemAgent AgentMetadataAgentType = "system_agent"
)

// Defines values for DependencyInfoStatus.
const (
	DependencyInfoStatusAvailable   DependencyInfoStatus = "available"
	DependencyInfoStatusDegraded    DependencyInfoStatus = "degraded"
	DependencyInfoStatusUnavailable DependencyInfoStatus = "unavailable"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDegraded  HealthResponseStatus = "degraded"
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for HeartbeatRequestStatus.
const (
	HeartbeatRequestStatusDegraded  HeartbeatRequestStatus = "degraded"
	HeartbeatRequestStatusHealthy   HeartbeatRequestStatus = "healthy"
	HeartbeatRequestStatusUnhealthy HeartbeatRequestStatus = "unhealthy"
)

// Defines values for HeartbeatResponseStatus.
const (
	HeartbeatResponseStatusError   HeartbeatResponseStatus = "error"
	HeartbeatResponseStatusSuccess HeartbeatResponseStatus = "success"
)

// Defines values for RegistrationResponseStatus.
const (
	RegistrationResponseStatusError   RegistrationResponseStatus = "error"
	RegistrationResponseStatusSuccess RegistrationResponseStatus = "success"
)

// AgentInfo defines model for AgentInfo.
type AgentInfo struct {
	Capabilities []string        `json:"capabilities"`
	Dependencies *[]string       `json:"dependencies,omitempty"`
	Endpoint     string          `json:"endpoint"`
	Id           string          `json:"id"`
	LastSeen     *time.Time      `json:"last_seen,omitempty"`
	Name         string          `json:"name"`
	Status       AgentInfoStatus `json:"status"`
	Version      *string         `json:"version,omitempty"`
}

// AgentInfoStatus defines model for AgentInfo.Status.
type AgentInfoStatus string

// AgentMetadata defines model for AgentMetadata.
type AgentMetadata struct {
	// AgentType Type of agent
	AgentType AgentMetadataAgentType `json:"agent_type"`

	// Capabilities List of capabilities provided by agent
	Capabilities []string `json:"capabilities"`

	// Dependencies List of agent dependencies
	Dependencies *[]string `json:"dependencies,omitempty"`

	// Description Agent description
	Description *string `json:"description,omitempty"`

	// Endpoint Agent endpoint URL (http://, https://, or stdio://)
	Endpoint string `json:"endpoint"`

	// EvictionThreshold Eviction threshold in seconds
	EvictionThreshold *int `json:"eviction_threshold,omitempty"`

	// HealthInterval Health check interval in seconds
	HealthInterval *int `json:"health_interval,omitempty"`

	// Name Human-readable agent name
	Name string `json:"name"`

	// Namespace Agent namespace for organization
	Namespace string `json:"namespace"`

	// SecurityContext Security context for agent
	SecurityContext *string `json:"security_context,omitempty"`

	// Tags Agent tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// TimeoutThreshold Timeout threshold in seconds
	TimeoutThreshold *int `json:"timeout_threshold,omitempty"`

	// Version Agent version
	Version *string `json:"version,omitempty"`
}

// AgentMetadataAgentType Type of agent
type AgentMetadataAgentType string

// AgentRegistration defines model for AgentRegistration.
type AgentRegistration struct {
	// AgentId Unique identifier for the agent
	AgentId  string        `json:"agent_id"`
	Metadata AgentMetadata `json:"metadata"`

	// Timestamp Registration timestamp
	Timestamp time.Time `json:"timestamp"`
}

// AgentsListResponse defines model for AgentsListResponse.
type AgentsListResponse struct {
	// Agents List of registered agents
	Agents []AgentInfo `json:"agents"`

	// Count Total number of agents
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
}

// DependencyInfo defines model for DependencyInfo.
type DependencyInfo struct {
	// AgentId ID of the agent providing the dependency
	AgentId string `json:"agent_id"`

	// Capabilities Capabilities provided by this dependency
	Capabilities *[]string `json:"capabilities,omitempty"`

	// Endpoint Endpoint to connect to the provider
	Endpoint string `json:"endpoint"`

	// Metadata Additional metadata about the provider
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Status Current status of the dependency
	Status DependencyInfoStatus `json:"status"`

	// Version Version of the provider agent
	Version *string `json:"version,omitempty"`
}

// DependencyInfoStatus Current status of the dependency
type DependencyInfoStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Service Service identifier
	Service string `json:"service"`

	// Status Overall registry health status
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server timestamp
	Timestamp time.Time `json:"timestamp"`

	// UptimeSeconds Registry uptime in seconds
	UptimeSeconds int `json:"uptime_seconds"`

	// Version Registry version
	Version string `json:"version"`
}

// HealthResponseStatus Overall registry health status
type HealthResponseStatus string

// HeartbeatRequest defines model for HeartbeatRequest.
type HeartbeatRequest struct {
	// AgentId Agent identifier from registration
	AgentId string `json:"agent_id"`

	// Metadata Agent metadata and health information
	Metadata HeartbeatRequest_Metadata `json:"metadata"`

	// Status Current agent health status
	Status HeartbeatRequestStatus `json:"status"`
}

// HeartbeatRequest_Metadata Agent metadata and health information
type HeartbeatRequest_Metadata struct {
	Capabilities []string `json:"capabilities"`

	// Checks Health check results
	Checks *map[string]interface{} `json:"checks,omitempty"`

	// Errors Any error messages
	Errors               *[]string              `json:"errors,omitempty"`
	Timestamp            time.Time              `json:"timestamp"`
	UptimeSeconds        *int                   `json:"uptime_seconds,omitempty"`
	Version              *string                `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HeartbeatRequestStatus Current agent health status
type HeartbeatRequestStatus string

// HeartbeatResponse defines model for HeartbeatResponse.
type HeartbeatResponse struct {
	// DependenciesResolved Updated dependency resolution for the agent.
	// ðŸ¤– AI CRITICAL: Python runtime uses this for dependency injection updates.
	DependenciesResolved *map[string]DependencyInfo `json:"dependencies_resolved,omitempty"`
	Message              string                     `json:"message"`
	Status               HeartbeatResponseStatus    `json:"status"`
	Timestamp            time.Time                  `json:"timestamp"`
}

// HeartbeatResponseStatus defines model for HeartbeatResponse.Status.
type HeartbeatResponseStatus string

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	// AgentId Confirmed agent ID
	AgentId string `json:"agent_id"`

	// DependenciesResolved Optional resolved dependencies for the agent.
	// ðŸ¤– AI NOTE: This enables immediate dependency injection setup.
	DependenciesResolved *map[string]DependencyInfo `json:"dependencies_resolved,omitempty"`
	Message              string                     `json:"message"`
	Status               RegistrationResponseStatus `json:"status"`
	Timestamp            time.Time                  `json:"timestamp"`
}

// RegistrationResponseStatus defines model for RegistrationResponse.Status.
type RegistrationResponseStatus string

// RootResponse defines model for RootResponse.
type RootResponse struct {
	// Endpoints Available API endpoints
	Endpoints []string `json:"endpoints"`
	Service   string   `json:"service"`
	Status    string   `json:"status"`
	Version   string   `json:"version"`
}

// RegisterAgentJSONRequestBody defines body for RegisterAgent for application/json ContentType.
type RegisterAgentJSONRequestBody = AgentRegistration

// SendHeartbeatJSONRequestBody defines body for SendHeartbeat for application/json ContentType.
type SendHeartbeatJSONRequestBody = HeartbeatRequest

// Getter for additional properties for HeartbeatRequest_Metadata. Returns the specified
// element and whether it was found
func (a HeartbeatRequest_Metadata) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HeartbeatRequest_Metadata
func (a *HeartbeatRequest_Metadata) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HeartbeatRequest_Metadata to handle AdditionalProperties
func (a *HeartbeatRequest_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["capabilities"]; found {
		err = json.Unmarshal(raw, &a.Capabilities)
		if err != nil {
			return fmt.Errorf("error reading 'capabilities': %w", err)
		}
		delete(object, "capabilities")
	}

	if raw, found := object["checks"]; found {
		err = json.Unmarshal(raw, &a.Checks)
		if err != nil {
			return fmt.Errorf("error reading 'checks': %w", err)
		}
		delete(object, "checks")
	}

	if raw, found := object["errors"]; found {
		err = json.Unmarshal(raw, &a.Errors)
		if err != nil {
			return fmt.Errorf("error reading 'errors': %w", err)
		}
		delete(object, "errors")
	}

	if raw, found := object["timestamp"]; found {
		err = json.Unmarshal(raw, &a.Timestamp)
		if err != nil {
			return fmt.Errorf("error reading 'timestamp': %w", err)
		}
		delete(object, "timestamp")
	}

	if raw, found := object["uptime_seconds"]; found {
		err = json.Unmarshal(raw, &a.UptimeSeconds)
		if err != nil {
			return fmt.Errorf("error reading 'uptime_seconds': %w", err)
		}
		delete(object, "uptime_seconds")
	}

	if raw, found := object["version"]; found {
		err = json.Unmarshal(raw, &a.Version)
		if err != nil {
			return fmt.Errorf("error reading 'version': %w", err)
		}
		delete(object, "version")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HeartbeatRequest_Metadata to handle AdditionalProperties
func (a HeartbeatRequest_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["capabilities"], err = json.Marshal(a.Capabilities)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'capabilities': %w", err)
	}

	if a.Checks != nil {
		object["checks"], err = json.Marshal(a.Checks)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'checks': %w", err)
		}
	}

	if a.Errors != nil {
		object["errors"], err = json.Marshal(a.Errors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'errors': %w", err)
		}
	}

	object["timestamp"], err = json.Marshal(a.Timestamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timestamp': %w", err)
	}

	if a.UptimeSeconds != nil {
		object["uptime_seconds"], err = json.Marshal(a.UptimeSeconds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uptime_seconds': %w", err)
		}
	}

	if a.Version != nil {
		object["version"], err = json.Marshal(a.Version)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'version': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Registry root information
	// (GET /)
	GetRoot(c *gin.Context)
	// List all registered agents
	// (GET /agents)
	ListAgents(c *gin.Context)
	// Register agent with registry
	// (POST /agents/register)
	RegisterAgent(c *gin.Context)
	// Registry health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Send agent heartbeat
	// (POST /heartbeat)
	SendHeartbeat(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAgents(c)
}

// RegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) RegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterAgent(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// SendHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) SendHeartbeat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendHeartbeat(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetRoot)
	router.GET(options.BaseURL+"/agents", wrapper.ListAgents)
	router.POST(options.BaseURL+"/agents/register", wrapper.RegisterAgent)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/heartbeat", wrapper.SendHeartbeat)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

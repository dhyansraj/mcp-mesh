// ðŸ¤– AI BEHAVIOR GUIDANCE:
// This file contains generated REGISTRY server interfaces from OpenAPI spec.
// DO NOT modify this file directly - it will be overwritten.
//
// SCOPE: Registry API endpoints for agent registration and management
//
// TO ADD NEW REGISTRY ENDPOINTS:
// 1. Update api/mcp-mesh-registry.openapi.yaml
// 2. Run: make generate
// 3. Implement business logic in handlers_impl.go
//
// GENERATED FROM: api/mcp-mesh-registry.openapi.yaml
// CONTRACT: Registry service endpoints only

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AgentInfoStatus.
const (
	AgentInfoStatusDegraded  AgentInfoStatus = "degraded"
	AgentInfoStatusHealthy   AgentInfoStatus = "healthy"
	AgentInfoStatusOffline   AgentInfoStatus = "offline"
	AgentInfoStatusUnhealthy AgentInfoStatus = "unhealthy"
)

// Defines values for AgentMetadataAgentType.
const (
	McpAgent    AgentMetadataAgentType = "mcp_agent"
	MeshAgent   AgentMetadataAgentType = "mesh_agent"
	SystemAgent AgentMetadataAgentType = "system_agent"
)

// Defines values for DependencyInfoStatus.
const (
	DependencyInfoStatusAvailable   DependencyInfoStatus = "available"
	DependencyInfoStatusDegraded    DependencyInfoStatus = "degraded"
	DependencyInfoStatusUnavailable DependencyInfoStatus = "unavailable"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDegraded  HealthResponseStatus = "degraded"
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for HeartbeatRequestStatus.
const (
	HeartbeatRequestStatusDegraded  HeartbeatRequestStatus = "degraded"
	HeartbeatRequestStatusHealthy   HeartbeatRequestStatus = "healthy"
	HeartbeatRequestStatusUnhealthy HeartbeatRequestStatus = "unhealthy"
)

// Defines values for HeartbeatResponseStatus.
const (
	HeartbeatResponseStatusError   HeartbeatResponseStatus = "error"
	HeartbeatResponseStatusSuccess HeartbeatResponseStatus = "success"
)

// Defines values for RegistrationResponseStatus.
const (
	RegistrationResponseStatusError   RegistrationResponseStatus = "error"
	RegistrationResponseStatusSuccess RegistrationResponseStatus = "success"
)

// AgentInfo defines model for AgentInfo.
type AgentInfo struct {
	Capabilities []string        `json:"capabilities"`
	Dependencies *[]string       `json:"dependencies,omitempty"`
	Endpoint     string          `json:"endpoint"`
	Id           string          `json:"id"`
	LastSeen     *time.Time      `json:"last_seen,omitempty"`
	Name         string          `json:"name"`
	Status       AgentInfoStatus `json:"status"`
	Version      *string         `json:"version,omitempty"`
}

// AgentInfoStatus defines model for AgentInfo.Status.
type AgentInfoStatus string

// AgentMetadata defines model for AgentMetadata.
type AgentMetadata struct {
	// AgentType Type of agent
	AgentType AgentMetadataAgentType `json:"agent_type"`

	// Capabilities List of capabilities provided by agent (0 or more)
	Capabilities *[]string `json:"capabilities,omitempty"`

	// Dependencies List of agent dependencies (0 or more) - supports both simple strings and rich objects
	Dependencies *[]AgentMetadata_Dependencies_Item `json:"dependencies,omitempty"`

	// Description Agent description
	Description *string `json:"description,omitempty"`

	// Endpoint Agent endpoint URL (http://, https://, or stdio://)
	Endpoint string `json:"endpoint"`

	// EvictionThreshold Eviction threshold in seconds
	EvictionThreshold *int `json:"eviction_threshold,omitempty"`

	// HealthInterval Health check interval in seconds
	HealthInterval *int `json:"health_interval,omitempty"`

	// Name Human-readable agent name
	Name string `json:"name"`

	// Namespace Agent namespace for organization
	Namespace string `json:"namespace"`

	// SecurityContext Security context for agent
	SecurityContext *string `json:"security_context,omitempty"`

	// Tags Agent tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// TimeoutThreshold Timeout threshold in seconds
	TimeoutThreshold *int `json:"timeout_threshold,omitempty"`

	// Version Agent version
	Version *string `json:"version,omitempty"`
}

// AgentMetadataAgentType Type of agent
type AgentMetadataAgentType string

// AgentMetadataDependencies0 Simple dependency by capability name
type AgentMetadataDependencies0 = string

// AgentMetadataDependencies1 Rich dependency with tags and metadata
type AgentMetadataDependencies1 struct {
	// Capability Required capability name
	Capability string `json:"capability"`

	// Namespace Optional namespace filter
	Namespace *string `json:"namespace,omitempty"`

	// Tags Optional tags for smart matching
	Tags *[]string `json:"tags,omitempty"`

	// Version Optional version constraint
	Version *string `json:"version,omitempty"`
}

// AgentMetadata_Dependencies_Item defines model for AgentMetadata.dependencies.Item.
type AgentMetadata_Dependencies_Item struct {
	union json.RawMessage
}

// AgentRegistration defines model for AgentRegistration.
type AgentRegistration struct {
	// AgentId Unique identifier for the agent
	AgentId  string        `json:"agent_id"`
	Metadata AgentMetadata `json:"metadata"`

	// Timestamp Registration timestamp
	Timestamp time.Time `json:"timestamp"`
}

// AgentsListResponse defines model for AgentsListResponse.
type AgentsListResponse struct {
	// Agents List of registered agents
	Agents []AgentInfo `json:"agents"`

	// Count Total number of agents
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
}

// DependencyInfo defines model for DependencyInfo.
type DependencyInfo struct {
	// AgentId ID of the agent providing the dependency
	AgentId string `json:"agent_id"`

	// Capabilities Capabilities provided by this dependency
	Capabilities *[]string `json:"capabilities,omitempty"`

	// Endpoint Endpoint to connect to the provider
	Endpoint string `json:"endpoint"`

	// Metadata Additional metadata about the provider
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Status Current status of the dependency
	Status DependencyInfoStatus `json:"status"`

	// Version Version of the provider agent
	Version *string `json:"version,omitempty"`
}

// DependencyInfoStatus Current status of the dependency
type DependencyInfoStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Service Service identifier
	Service string `json:"service"`

	// Status Overall registry health status
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server timestamp
	Timestamp time.Time `json:"timestamp"`

	// UptimeSeconds Registry uptime in seconds
	UptimeSeconds int `json:"uptime_seconds"`

	// Version Registry version
	Version string `json:"version"`
}

// HealthResponseStatus Overall registry health status
type HealthResponseStatus string

// HeartbeatRequest defines model for HeartbeatRequest.
type HeartbeatRequest struct {
	// AgentId Agent identifier from registration
	AgentId string `json:"agent_id"`

	// Metadata Agent metadata and health information
	Metadata HeartbeatRequest_Metadata `json:"metadata"`

	// Status Current agent health status
	Status HeartbeatRequestStatus `json:"status"`
}

// HeartbeatRequest_Metadata Agent metadata and health information
type HeartbeatRequest_Metadata struct {
	Capabilities []string `json:"capabilities"`

	// Checks Health check results
	Checks *map[string]interface{} `json:"checks,omitempty"`

	// Errors Any error messages
	Errors               *[]string              `json:"errors,omitempty"`
	Timestamp            time.Time              `json:"timestamp"`
	UptimeSeconds        *int                   `json:"uptime_seconds,omitempty"`
	Version              *string                `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HeartbeatRequestStatus Current agent health status
type HeartbeatRequestStatus string

// HeartbeatResponse defines model for HeartbeatResponse.
type HeartbeatResponse struct {
	// DependenciesResolved Updated dependency resolution for the agent.
	// ðŸ¤– AI CRITICAL: Python runtime uses this for dependency injection updates.
	DependenciesResolved *map[string]DependencyInfo `json:"dependencies_resolved,omitempty"`
	Message              string                     `json:"message"`
	Status               HeartbeatResponseStatus    `json:"status"`
	Timestamp            time.Time                  `json:"timestamp"`
}

// HeartbeatResponseStatus defines model for HeartbeatResponse.Status.
type HeartbeatResponseStatus string

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	// AgentId Confirmed agent ID
	AgentId string `json:"agent_id"`

	// DependenciesResolved Optional resolved dependencies for the agent.
	// ðŸ¤– AI NOTE: This enables immediate dependency injection setup.
	DependenciesResolved *map[string]DependencyInfo `json:"dependencies_resolved,omitempty"`
	Message              string                     `json:"message"`
	Status               RegistrationResponseStatus `json:"status"`
	Timestamp            time.Time                  `json:"timestamp"`
}

// RegistrationResponseStatus defines model for RegistrationResponse.Status.
type RegistrationResponseStatus string

// RootResponse defines model for RootResponse.
type RootResponse struct {
	// Endpoints Available API endpoints
	Endpoints []string `json:"endpoints"`
	Service   string   `json:"service"`
	Status    string   `json:"status"`
	Version   string   `json:"version"`
}

// RegisterAgentJSONRequestBody defines body for RegisterAgent for application/json ContentType.
type RegisterAgentJSONRequestBody = AgentRegistration

// SendHeartbeatJSONRequestBody defines body for SendHeartbeat for application/json ContentType.
type SendHeartbeatJSONRequestBody = HeartbeatRequest

// Getter for additional properties for HeartbeatRequest_Metadata. Returns the specified
// element and whether it was found
func (a HeartbeatRequest_Metadata) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HeartbeatRequest_Metadata
func (a *HeartbeatRequest_Metadata) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HeartbeatRequest_Metadata to handle AdditionalProperties
func (a *HeartbeatRequest_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["capabilities"]; found {
		err = json.Unmarshal(raw, &a.Capabilities)
		if err != nil {
			return fmt.Errorf("error reading 'capabilities': %w", err)
		}
		delete(object, "capabilities")
	}

	if raw, found := object["checks"]; found {
		err = json.Unmarshal(raw, &a.Checks)
		if err != nil {
			return fmt.Errorf("error reading 'checks': %w", err)
		}
		delete(object, "checks")
	}

	if raw, found := object["errors"]; found {
		err = json.Unmarshal(raw, &a.Errors)
		if err != nil {
			return fmt.Errorf("error reading 'errors': %w", err)
		}
		delete(object, "errors")
	}

	if raw, found := object["timestamp"]; found {
		err = json.Unmarshal(raw, &a.Timestamp)
		if err != nil {
			return fmt.Errorf("error reading 'timestamp': %w", err)
		}
		delete(object, "timestamp")
	}

	if raw, found := object["uptime_seconds"]; found {
		err = json.Unmarshal(raw, &a.UptimeSeconds)
		if err != nil {
			return fmt.Errorf("error reading 'uptime_seconds': %w", err)
		}
		delete(object, "uptime_seconds")
	}

	if raw, found := object["version"]; found {
		err = json.Unmarshal(raw, &a.Version)
		if err != nil {
			return fmt.Errorf("error reading 'version': %w", err)
		}
		delete(object, "version")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HeartbeatRequest_Metadata to handle AdditionalProperties
func (a HeartbeatRequest_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["capabilities"], err = json.Marshal(a.Capabilities)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'capabilities': %w", err)
	}

	if a.Checks != nil {
		object["checks"], err = json.Marshal(a.Checks)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'checks': %w", err)
		}
	}

	if a.Errors != nil {
		object["errors"], err = json.Marshal(a.Errors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'errors': %w", err)
		}
	}

	object["timestamp"], err = json.Marshal(a.Timestamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timestamp': %w", err)
	}

	if a.UptimeSeconds != nil {
		object["uptime_seconds"], err = json.Marshal(a.UptimeSeconds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uptime_seconds': %w", err)
		}
	}

	if a.Version != nil {
		object["version"], err = json.Marshal(a.Version)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'version': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAgentMetadataDependencies0 returns the union data inside the AgentMetadata_Dependencies_Item as a AgentMetadataDependencies0
func (t AgentMetadata_Dependencies_Item) AsAgentMetadataDependencies0() (AgentMetadataDependencies0, error) {
	var body AgentMetadataDependencies0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentMetadataDependencies0 overwrites any union data inside the AgentMetadata_Dependencies_Item as the provided AgentMetadataDependencies0
func (t *AgentMetadata_Dependencies_Item) FromAgentMetadataDependencies0(v AgentMetadataDependencies0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentMetadataDependencies0 performs a merge with any union data inside the AgentMetadata_Dependencies_Item, using the provided AgentMetadataDependencies0
func (t *AgentMetadata_Dependencies_Item) MergeAgentMetadataDependencies0(v AgentMetadataDependencies0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentMetadataDependencies1 returns the union data inside the AgentMetadata_Dependencies_Item as a AgentMetadataDependencies1
func (t AgentMetadata_Dependencies_Item) AsAgentMetadataDependencies1() (AgentMetadataDependencies1, error) {
	var body AgentMetadataDependencies1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentMetadataDependencies1 overwrites any union data inside the AgentMetadata_Dependencies_Item as the provided AgentMetadataDependencies1
func (t *AgentMetadata_Dependencies_Item) FromAgentMetadataDependencies1(v AgentMetadataDependencies1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentMetadataDependencies1 performs a merge with any union data inside the AgentMetadata_Dependencies_Item, using the provided AgentMetadataDependencies1
func (t *AgentMetadata_Dependencies_Item) MergeAgentMetadataDependencies1(v AgentMetadataDependencies1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentMetadata_Dependencies_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentMetadata_Dependencies_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Registry root information
	// (GET /)
	GetRoot(c *gin.Context)
	// List all registered agents
	// (GET /agents)
	ListAgents(c *gin.Context)
	// Register agent with registry
	// (POST /agents/register)
	RegisterAgent(c *gin.Context)
	// Registry health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Send agent heartbeat
	// (POST /heartbeat)
	SendHeartbeat(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAgents(c)
}

// RegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) RegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterAgent(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// SendHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) SendHeartbeat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendHeartbeat(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetRoot)
	router.GET(options.BaseURL+"/agents", wrapper.ListAgents)
	router.POST(options.BaseURL+"/agents/register", wrapper.RegisterAgent)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/heartbeat", wrapper.SendHeartbeat)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

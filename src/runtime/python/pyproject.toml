[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-mesh"
version = "0.2.0"
description = "Python runtime for MCP Mesh - A service mesh for Model Context Protocol services"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Dhyan Raj", email = "dhyanraj@gmail.com" },
]
keywords = [
    "mcp",
    "model-context-protocol",
    "service-mesh",
    "anthropic",
    "runtime",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp>=0.9.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.0.0",
    "aiosqlite>=0.19.0",
    "aiofiles>=23.0.0",
    "fastmcp>=2.7.0",
    "aiohttp>=3.8.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "prometheus-client>=0.18.0",
    "urllib3>=2.0.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/mcp-mesh/mcp-mesh"
Repository = "https://github.com/mcp-mesh/mcp-mesh"
Issues = "https://github.com/mcp-mesh/mcp-mesh/issues"
Documentation = "https://github.com/mcp-mesh/mcp-mesh/docs"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_mesh", "src/mesh"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
]

[tool.pytest.ini_options]
addopts = "-xvs"
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/mcp_mesh"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "T20", # flake8-print
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

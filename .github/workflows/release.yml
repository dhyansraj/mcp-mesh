name: Release

on:
  release:
    types: [published]
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g., v0.1.1)"
        required: true
        default: "v0.1.1"
      environment:
        description: "Environment"
        type: choice
        options: [production, test]
        default: test

env:
  REGISTRY: mcpmesh
  PYTHON_VERSION: "3.11"
  GO_VERSION: "1.23"

jobs:
  # Build Go binaries for multiple platforms
  build-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build binaries
        env:
          VERSION: ${{ steps.version.outputs.version }}
          PLATFORMS: "linux/amd64,linux/arm64"
        run: ./packaging/scripts/build-binaries.sh

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.version.outputs.version }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt

  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    needs: [publish-python]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: >
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: >
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version and tags
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="dev-${{ github.sha }}"
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          # For install script in Dockerfiles, we need the v prefix
          VERSION_WITH_V="v${VERSION}"

          # Create semantic version tags (e.g., 0.1.6 -> 0.1.6, 0.1, 0)
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR=$(echo "$VERSION" | cut -d. -f1)
            MINOR=$(echo "$VERSION" | cut -d. -f1-2)
            PATCH="$VERSION"

            echo "major_version=${MAJOR}" >> $GITHUB_OUTPUT
            echo "minor_version=${MINOR}" >> $GITHUB_OUTPUT
            echo "patch_version=${PATCH}" >> $GITHUB_OUTPUT
          else
            # For non-semver versions (dev, etc.), use version as-is
            echo "major_version=${VERSION}" >> $GITHUB_OUTPUT
            echo "minor_version=${VERSION}" >> $GITHUB_OUTPUT
            echo "patch_version=${VERSION}" >> $GITHUB_OUTPUT
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_with_v=${VERSION_WITH_V}" >> $GITHUB_OUTPUT
          echo "Building Docker images for version: ${VERSION} (semantic tags: ${MAJOR}, ${MINOR}, ${PATCH})"

      - name: Build and push Registry image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packaging/docker/registry.Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
          push: >
            ${{ github.event_name == 'release' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
          tags: |
            ${{ env.REGISTRY }}/registry:${{ steps.meta.outputs.patch_version }}
            ${{ env.REGISTRY }}/registry:${{ steps.meta.outputs.minor_version }}
            ${{ env.REGISTRY }}/registry:${{ steps.meta.outputs.major_version }}
            ${{ env.REGISTRY }}/registry:latest
            ghcr.io/${{ github.repository }}/registry:${{ steps.meta.outputs.patch_version }}
            ghcr.io/${{ github.repository }}/registry:${{ steps.meta.outputs.minor_version }}
            ghcr.io/${{ github.repository }}/registry:${{ steps.meta.outputs.major_version }}
            ghcr.io/${{ github.repository }}/registry:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Registry image functionality
        run: |
          # Build test image locally to validate before pushing
          docker build -f ./packaging/docker/registry.Dockerfile -t test-registry:validation .

          # Test 1: Verify binary works and shows help
          echo "Testing registry binary help..."
          docker run --rm test-registry:validation --help

          # Test 2: Start registry and test SQLite functionality
          echo "Testing SQLite functionality..."
          CONTAINER_ID=$(docker run -d -p 28000:8000 test-registry:validation)
          sleep 5

          # Test health endpoint (verifies SQLite is working)
          HEALTH_RESPONSE=$(curl -s http://localhost:28000/health || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"

          # Verify health response contains expected fields
          if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
            echo "✅ Registry health check passed - SQLite is working"
          else
            echo "❌ Registry health check failed - SQLite may not be working"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Test 3: Verify SQLite database was created
          docker exec $CONTAINER_ID ls -la /data/

          # Clean up
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

          echo "✅ All registry functionality tests passed"

      - name: Build and push Python Runtime image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packaging/docker/python-runtime.Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
          push: >
            ${{ github.event_name == 'release' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
          tags: |
            ${{ env.REGISTRY }}/python-runtime:${{ steps.meta.outputs.patch_version }}
            ${{ env.REGISTRY }}/python-runtime:${{ steps.meta.outputs.minor_version }}
            ${{ env.REGISTRY }}/python-runtime:${{ steps.meta.outputs.major_version }}
            ${{ env.REGISTRY }}/python-runtime:latest
            ghcr.io/${{ github.repository }}/python-runtime:${{ steps.meta.outputs.patch_version }}
            ghcr.io/${{ github.repository }}/python-runtime:${{ steps.meta.outputs.minor_version }}
            ghcr.io/${{ github.repository }}/python-runtime:${{ steps.meta.outputs.major_version }}
            ghcr.io/${{ github.repository }}/python-runtime:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push CLI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packaging/docker/cli.Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.meta.outputs.version_with_v }}
          push: >
            ${{ github.event_name == 'release' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
          tags: |
            ${{ env.REGISTRY }}/cli:${{ steps.meta.outputs.patch_version }}
            ${{ env.REGISTRY }}/cli:${{ steps.meta.outputs.minor_version }}
            ${{ env.REGISTRY }}/cli:${{ steps.meta.outputs.major_version }}
            ${{ env.REGISTRY }}/cli:latest
            ghcr.io/${{ github.repository }}/cli:${{ steps.meta.outputs.patch_version }}
            ghcr.io/${{ github.repository }}/cli:${{ steps.meta.outputs.minor_version }}
            ghcr.io/${{ github.repository }}/cli:${{ steps.meta.outputs.major_version }}
            ghcr.io/${{ github.repository }}/cli:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish Python package to PyPI
  publish-python:
    runs-on: ubuntu-latest
    needs: [build-binaries]
    if: >
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    permissions:
      contents: read
      id-token: write # For trusted publishing
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Prepare packaging files
        working-directory: packaging/pypi
        run: |
          cp ../../src/runtime/python/README.md .
          cp ../../LICENSE .
          cp -r ../../src/runtime/python/src .

      - name: Update version in packaging files
        working-directory: packaging/pypi
        run: |
          # Determine version
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix

          # Convert test versions to PEP 440 compliant format
          if [[ "$VERSION" == *"-test"* ]]; then
            VERSION=$(echo "$VERSION" | sed 's/-test/.dev/')
          fi

          # Debug output
          echo "Event name: ${{ github.event_name }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Detected version: ${VERSION}"
          echo "Current version in file: $(grep '__version__' src/mcp_mesh/__init__.py)"

          # Update version in both __init__.py and pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/" src/mcp_mesh/__init__.py
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml

          # Verify the versions were updated
          echo "Updated __init__.py version to: $(grep '__version__' src/mcp_mesh/__init__.py)"
          echo "Updated pyproject.toml version to: $(grep 'version = ' pyproject.toml)"

      - name: Build package
        working-directory: packaging/pypi
        run: python -m build

      - name: Check package
        working-directory: packaging/pypi
        run: twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packaging/pypi/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Update package manager manifests
  update-packages:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build-binaries]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Homebrew formula
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix

          # Download checksums
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_NAME="${{ github.event.inputs.version }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi

          curl -L \
            "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/checksums.txt" \
            -o checksums.txt

          # Update Homebrew formula with new version and checksums
          # This would typically involve updating the formula file and creating a PR
          # For now, we'll just log the information needed
          echo "Homebrew formula update needed:"
          echo "Version: ${VERSION}"
          echo "Checksums:"
          cat checksums.txt

      - name: Update Scoop manifest
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix

          # Update Scoop manifest
          sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" packaging/scoop/mcp-mesh.json

          echo "Scoop manifest updated for version: ${VERSION}"

  # Security scan - Disabled due to 0.0.0.0 binding causing false positives
  # security-scan:
  #   runs-on: ubuntu-latest
  #   if: >
  #     github.event_name == 'release' ||
  #     (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
  #   needs: [build-docker]
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Run Trivy vulnerability scanner on Registry image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: "${{ env.REGISTRY }}/registry:latest"
  #         format: "table"
  #         exit-code: "0" # Don't fail on vulnerabilities for now
  #
  #     - name: Run Trivy vulnerability scanner on Python Runtime image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: "${{ env.REGISTRY }}/python-runtime:latest"
  #         format: "table"
  #         exit-code: "0"
  #
  #     - name: Run Trivy vulnerability scanner on CLI image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: "${{ env.REGISTRY }}/cli:latest"
  #         format: "table"
  #         exit-code: "0"

name: Release

on:
  release:
    types: [published]
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g., v0.5.0)"
        required: true
        default: "v0.5.5"
      environment:
        description: "Environment"
        type: choice
        options: [production, test]
        default: production

env:
  REGISTRY: mcpmesh
  PYTHON_VERSION: "3.11"
  GO_VERSION: "1.23"

jobs:
  # Build Go binaries for multiple platforms
  build-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Install cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build binaries
        env:
          VERSION: ${{ steps.version.outputs.version }}
          PLATFORMS: "linux/amd64,linux/arm64"
        run: ./packaging/scripts/build-binaries.sh

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.version.outputs.version }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt

  # Build macOS binaries natively
  build-macos-binaries:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building macOS version: ${VERSION}"

      - name: Build macOS binaries
        env:
          VERSION: ${{ steps.version.outputs.version }}
          PLATFORMS: "darwin/amd64,darwin/arm64"
          OUTPUT_DIR: "dist-macos"
        run: ./packaging/scripts/build-binaries.sh

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist-macos/*.tar.gz
            dist-macos/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries-${{ steps.version.outputs.version }}
          path: |
            dist-macos/*.tar.gz
            dist-macos/*.zip

  # Combine checksums from all platforms (for real releases)
  combine-checksums:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-macos-binaries]
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download release assets
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          mkdir -p dist-linux dist-macos

          # Download Linux binaries from release
          gh release download "${VERSION}" --pattern "*linux*.tar.gz" --dir dist-linux

          # Download macOS binaries from release
          gh release download "${VERSION}" --pattern "*darwin*.tar.gz" --dir dist-macos
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate combined checksums
        run: |
          mkdir -p dist-combined

          # Copy all archives to combined directory
          find dist-linux -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} dist-combined/
          find dist-macos -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} dist-combined/

          # Generate combined checksums
          cd dist-combined
          if command -v sha256sum &> /dev/null; then
            sha256sum *.tar.gz > checksums.txt
            if ls *.zip &> /dev/null; then
              sha256sum *.zip >> checksums.txt
            fi
          elif command -v shasum &> /dev/null; then
            shasum -a 256 *.tar.gz > checksums.txt
            if ls *.zip &> /dev/null; then
              shasum -a 256 *.zip >> checksums.txt
            fi
          fi

          echo "Combined checksums:"
          cat checksums.txt

      - name: Upload combined checksums to release
        uses: softprops/action-gh-release@v1
        with:
          files: dist-combined/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish Python package to PyPI
  publish-python:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-macos-binaries]
    if: >
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    permissions:
      contents: read
      id-token: write # For trusted publishing
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Prepare packaging files
        working-directory: packaging/pypi
        run: |
          cp ../../src/runtime/python/README.md .
          cp ../../LICENSE .
          cp -r ../../src/runtime/python/_mcp_mesh .
          cp -r ../../src/runtime/python/mesh .

      - name: Update version in packaging files
        working-directory: packaging/pypi
        run: |
          # Determine version
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix

          # Debug output
          echo "Event name: ${{ github.event_name }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Detected version: ${VERSION}"
          echo "Current version in file: $(grep '__version__' _mcp_mesh/__init__.py)"

          # Update version in both __init__.py and pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/" _mcp_mesh/__init__.py
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml

          # Verify the versions were updated
          echo "Updated __init__.py version to: $(grep '__version__' _mcp_mesh/__init__.py)"
          echo "Updated pyproject.toml version to: $(grep 'version = ' pyproject.toml)"

      - name: Build package
        working-directory: packaging/pypi
        run: python -m build

      - name: Check package
        working-directory: packaging/pypi
        run: twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packaging/pypi/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    needs: [publish-python]
    if: >
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version and tags
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="dev-${{ github.sha }}"
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          # For install script in Dockerfiles, we need the v prefix
          VERSION_WITH_V="v${VERSION}"

          # Create semantic version tags (e.g., 0.5.0 -> 0.5.0, 0.5, 0)
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR=$(echo "$VERSION" | cut -d. -f1)
            MINOR=$(echo "$VERSION" | cut -d. -f1-2)
            PATCH="$VERSION"

            echo "major_version=${MAJOR}" >> $GITHUB_OUTPUT
            echo "minor_version=${MINOR}" >> $GITHUB_OUTPUT
            echo "patch_version=${PATCH}" >> $GITHUB_OUTPUT
          else
            # For non-semver versions (dev, etc.), use version as-is
            echo "major_version=${VERSION}" >> $GITHUB_OUTPUT
            echo "minor_version=${VERSION}" >> $GITHUB_OUTPUT
            echo "patch_version=${VERSION}" >> $GITHUB_OUTPUT
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_with_v=${VERSION_WITH_V}" >> $GITHUB_OUTPUT
          echo "Building Docker images for version: ${VERSION} (semantic tags: ${MAJOR}, ${MINOR}, ${PATCH})"

      - name: Build and push Registry image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packaging/docker/registry.Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.meta.outputs.version_with_v }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/registry:${{ steps.meta.outputs.patch_version }}
            ${{ env.REGISTRY }}/registry:${{ steps.meta.outputs.minor_version }}
            ${{ env.REGISTRY }}/registry:${{ steps.meta.outputs.major_version }}
            ${{ env.REGISTRY }}/registry:latest
            ghcr.io/${{ github.repository }}/registry:${{ steps.meta.outputs.patch_version }}
            ghcr.io/${{ github.repository }}/registry:${{ steps.meta.outputs.minor_version }}
            ghcr.io/${{ github.repository }}/registry:${{ steps.meta.outputs.major_version }}
            ghcr.io/${{ github.repository }}/registry:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Registry image functionality
        run: |
          # Build test image locally to validate before pushing
          docker build -f ./packaging/docker/registry.Dockerfile \
            --build-arg VERSION=${{ steps.meta.outputs.version_with_v }} \
            -t test-registry:validation .

          # Test 1: Verify binary works and shows help
          echo "Testing registry binary help..."
          docker run --rm test-registry:validation --help

          # Test 2: Start registry and test SQLite functionality
          echo "Testing SQLite functionality..."
          CONTAINER_ID=$(docker run -d -p 28000:8000 test-registry:validation)
          sleep 5

          # Test health endpoint (verifies SQLite is working)
          HEALTH_RESPONSE=$(curl -s http://localhost:28000/health || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"

          # Verify health response contains expected fields
          if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
            echo "✅ Registry health check passed - SQLite is working"
          else
            echo "❌ Registry health check failed - SQLite may not be working"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Test 3: Verify SQLite database was created
          docker exec $CONTAINER_ID ls -la /data/

          # Clean up
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

          echo "✅ All registry functionality tests passed"

      - name: Build and push Python Runtime image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packaging/docker/python-runtime.Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/python-runtime:${{ steps.meta.outputs.patch_version }}
            ${{ env.REGISTRY }}/python-runtime:${{ steps.meta.outputs.minor_version }}
            ${{ env.REGISTRY }}/python-runtime:${{ steps.meta.outputs.major_version }}
            ${{ env.REGISTRY }}/python-runtime:latest
            ghcr.io/${{ github.repository }}/python-runtime:${{ steps.meta.outputs.patch_version }}
            ghcr.io/${{ github.repository }}/python-runtime:${{ steps.meta.outputs.minor_version }}
            ghcr.io/${{ github.repository }}/python-runtime:${{ steps.meta.outputs.major_version }}
            ghcr.io/${{ github.repository }}/python-runtime:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push CLI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packaging/docker/cli.Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.meta.outputs.version_with_v }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/cli:${{ steps.meta.outputs.patch_version }}
            ${{ env.REGISTRY }}/cli:${{ steps.meta.outputs.minor_version }}
            ${{ env.REGISTRY }}/cli:${{ steps.meta.outputs.major_version }}
            ${{ env.REGISTRY }}/cli:latest
            ghcr.io/${{ github.repository }}/cli:${{ steps.meta.outputs.patch_version }}
            ghcr.io/${{ github.repository }}/cli:${{ steps.meta.outputs.minor_version }}
            ghcr.io/${{ github.repository }}/cli:${{ steps.meta.outputs.major_version }}
            ghcr.io/${{ github.repository }}/cli:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update package manager manifests
  update-packages:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-macos-binaries, combine-checksums]
    if: >
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Homebrew formula
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_PAT_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION_NO_V=${VERSION#v}  # Remove 'v' prefix
          TAG_NAME="$VERSION"

          echo "Updating Homebrew formula for version: $VERSION"

          # Download checksums from release
          curl -L \
            "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/checksums.txt" \
            -o checksums.txt

          # Extract SHA256 for macOS binaries
          DARWIN_AMD64_SHA=$(grep "mcp-mesh_${TAG_NAME}_darwin_amd64.tar.gz" checksums.txt | cut -d' ' -f1)
          DARWIN_ARM64_SHA=$(grep "mcp-mesh_${TAG_NAME}_darwin_arm64.tar.gz" checksums.txt | cut -d' ' -f1)

          if [[ -z "$DARWIN_AMD64_SHA" || -z "$DARWIN_ARM64_SHA" ]]; then
            echo "Error: Could not find macOS checksums in checksums.txt"
            cat checksums.txt
            exit 1
          fi

          echo "Darwin AMD64 SHA: $DARWIN_AMD64_SHA"
          echo "Darwin ARM64 SHA: $DARWIN_ARM64_SHA"

          # Create updated formula
          REPO_URL="https://github.com/dhyansraj/mcp-mesh"
          ARM64_URL="${REPO_URL}/releases/download/${TAG_NAME}/mcp-mesh_${TAG_NAME}_darwin_arm64.tar.gz"
          AMD64_URL="${REPO_URL}/releases/download/${TAG_NAME}/mcp-mesh_${TAG_NAME}_darwin_amd64.tar.gz"

          cat > mcp-mesh.rb << EOF
          class McpMesh < Formula
            desc "Distributed service orchestration framework built on the Model Context Protocol"
            homepage "${REPO_URL}"
            url "${ARM64_URL}"
            sha256 "${DARWIN_ARM64_SHA}"
            license "MIT"
            version "${VERSION_NO_V}"

            # Dependencies
            depends_on "go" => :build

            on_macos do
              if Hardware::CPU.intel?
                url "${AMD64_URL}"
                sha256 "${DARWIN_AMD64_SHA}"
              end
            end

            def install
              # Install meshctl CLI
              bin.install "meshctl"

              # Install registry binary
              bin.install "mcp-mesh-registry"
            end

            def caveats
              <<~EOS
                MCP Mesh has been installed with two binaries:
                  • meshctl         - CLI tool for managing MCP Mesh
                  • mcp-mesh-registry - Registry service for service discovery

                To start the registry service:
                  mcp-mesh-registry

                To use the CLI:
                  meshctl --help

                For more information:
                  https://github.com/dhyansraj/mcp-mesh/blob/main/README.md
              EOS
            end

            test do
              # Test that the binaries are installed and can show version/help
              system "#{bin}/meshctl", "--help"
              system "#{bin}/mcp-mesh-registry", "--help"
            end
          end
          EOF

          # Update the formula in the tap repository
          gh api --method PUT \
            "/repos/dhyansraj/homebrew-mcp-mesh/contents/Formula/mcp-mesh.rb" \
            -f message="Update to ${VERSION}" \
            -f content="$(base64 -w 0 mcp-mesh.rb)" \
            -f sha="$(gh api /repos/dhyansraj/homebrew-mcp-mesh/contents/Formula/mcp-mesh.rb --jq '.sha')"

          echo "✅ Homebrew formula updated successfully to ${VERSION}"

      - name: Update Scoop manifest
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix

          # Update Scoop manifest
          sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" packaging/scoop/mcp-mesh.json

          echo "Scoop manifest updated for version: ${VERSION}"

  # Discord notification for successful releases
  notify-discord:
    runs-on: ubuntu-latest
    needs:
      [
        build-binaries,
        build-macos-binaries,
        combine-checksums,
        publish-python,
        build-docker,
        update-packages,
      ]
    if: >
      always() &&
      needs.build-binaries.result == 'success' &&
      needs.build-macos-binaries.result == 'success' &&
      needs.combine-checksums.result == 'success' &&
      needs.publish-python.result == 'success' &&
      needs.build-docker.result == 'success' &&
      needs.update-packages.result == 'success' &&
      (github.event_name == 'release' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    steps:
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Discord Webhook Notification
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RELEASE_URL="${{ github.event.release.html_url }}"
          if [[ -z "$RELEASE_URL" ]]; then
            RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          fi

          # Create JSON payload for Discord webhook with thread_name for forum channels
          CONTENT="🚀 **New MCP Mesh Release!**\\n\\n**Version:** ${VERSION}\\n**Release Notes:** ${RELEASE_URL}\\n\\n"
          CONTENT+="📦 **Download:**\\n• [GitHub Release](${RELEASE_URL})\\n"
          CONTENT+="• [PyPI Package](https://pypi.org/project/mcp-mesh/)\\n"
          CONTENT+="• [Docker Images](https://hub.docker.com/u/mcpmesh)\\n"
          CONTENT+="• [Homebrew](https://github.com/dhyansraj/homebrew-mcp-mesh)\\n\\n🎉 **What's New:**\\n"
          CONTENT+="• macOS Native Builds - Intel & Apple Silicon support\\n"
          CONTENT+="• Homebrew Distribution - Official tap available\\n"
          CONTENT+="• Enhanced PATH Resolution - Works with system installations\\n"
          CONTENT+="• Cross-Platform Binary Consistency"

          PAYLOAD=$(cat <<EOF
          {
            "content": "${CONTENT}",
            "thread_name": "MCP Mesh Release ${VERSION}"
          }
          EOF
          )

          # Send to Discord webhook
          curl -H "Content-Type: application/json" \
               -d "$PAYLOAD" \
               "${{ secrets.DISCORD_WEBHOOK }}"

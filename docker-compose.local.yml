version: "3.8"

# MCP Mesh Local Development Docker Compose
# Complete deployment with locally built images for testing current development
#
# Services:
# - registry: Go-based registry with SQLite storage (local build)
# - fastmcp-agent: FastMCP service with mesh integration (local build)
# - dependent-agent: Service that depends on fastmcp-agent (local build)
# - hello-world-agent: Updated hello world with FastMCP + mesh hybrid (local build)
# - system-agent: Updated system agent with FastMCP + mesh hybrid (local build)
#
# Usage:
#   docker-compose -f docker-compose.local.yml up --build
#
# Access points:
#   - Registry API: http://localhost:8000
#   - FastMCP Agent: http://localhost:8091
#   - Dependent Agent: http://localhost:8092
#   - Hello World Agent: http://localhost:8081
#   - System Agent: http://localhost:8082

services:
  # Build the base MCP Mesh Python image with FastMCP support
  mcp-mesh-base:
    build:
      context: .
      dockerfile: docker/agent/Dockerfile.base
    image: mcp-mesh-base:latest
    # This service only builds the base image, doesn't run

  # Go-based registry service (local build)
  registry:
    build:
      context: .
      dockerfile: docker/registry/Dockerfile
    container_name: mcp-mesh-registry
    ports:
      - "8000:8000"
    environment:
      # Registry configuration
      - HOST=${REGISTRY_HOST:-0.0.0.0}
      - PORT=${REGISTRY_PORT:-8000}
      - MCP_MESH_LOG_LEVEL=${MCP_MESH_LOG_LEVEL:-DEBUG}
      - MCP_MESH_DEBUG_MODE=${MCP_MESH_DEBUG_MODE:-true}
    volumes:
      - registry_data:/data
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--no-verbose",
          "--tries=1",
          "http://localhost:8000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # FastMCP Agent with mesh integration
  fastmcp-agent:
    image: mcp-mesh-base:latest
    container_name: mcp-mesh-fastmcp-agent
    hostname: fastmcp-agent
    ports:
      - "8091:9092"
    volumes:
      # Mount FastMCP agent code
      - ./examples/simple/fastmcp_agent.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=fastmcp-agent
      - MCP_MESH_HTTP_PORT=9092
      - POD_IP=fastmcp-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=fastmcp-service
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=${MCP_MESH_AUTO_RUN_INTERVAL:-30}
      - MCP_MESH_HEALTH_INTERVAL=${MCP_MESH_HEALTH_INTERVAL:-30}
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
    depends_on:
      mcp-mesh-base:
        condition: service_completed_successfully
      registry:
        condition: service_started
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--no-verbose",
          "--tries=1",
          "http://localhost:9092/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Dependent Agent that uses FastMCP agent's time service
  dependent-agent:
    image: mcp-mesh-base:latest
    container_name: mcp-mesh-dependent-agent
    hostname: dependent-agent
    ports:
      - "8092:9093"
    volumes:
      # Mount dependent agent code
      - ./examples/simple/dependent_agent.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=dependent-agent
      - MCP_MESH_HTTP_PORT=9093
      - POD_IP=dependent-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=dependent-service
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=${MCP_MESH_AUTO_RUN_INTERVAL:-30}
      - MCP_MESH_HEALTH_INTERVAL=${MCP_MESH_HEALTH_INTERVAL:-30}
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
    depends_on:
      mcp-mesh-base:
        condition: service_completed_successfully
      registry:
        condition: service_started
      fastmcp-agent:
        condition: service_started
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--no-verbose",
          "--tries=1",
          "http://localhost:9093/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Hello World Agent (updated to FastMCP + mesh hybrid format)
  hello-world-agent:
    image: mcp-mesh-base:latest
    container_name: mcp-mesh-hello-world
    hostname: hello-world-agent
    ports:
      - "8081:9090"
    volumes:
      # Mount updated hello world agent code
      - ./examples/simple/hello_world.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=hello-world-agent
      - MCP_MESH_HTTP_PORT=9090
      - POD_IP=hello-world-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=hello-world
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=${MCP_MESH_AUTO_RUN_INTERVAL:-30}
      - MCP_MESH_HEALTH_INTERVAL=${MCP_MESH_HEALTH_INTERVAL:-30}
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
    depends_on:
      mcp-mesh-base:
        condition: service_completed_successfully
      registry:
        condition: service_started
      system-agent:
        condition: service_started
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--no-verbose",
          "--tries=1",
          "http://localhost:9090/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # System Agent (updated to FastMCP + mesh hybrid format)
  system-agent:
    image: mcp-mesh-base:latest
    container_name: mcp-mesh-system-agent
    hostname: system-agent
    ports:
      - "8082:8080"
    volumes:
      # Mount updated system agent code
      - ./examples/simple/system_agent.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=system-agent
      - MCP_MESH_HTTP_PORT=8080
      - POD_IP=system-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=system-agent
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=${MCP_MESH_AUTO_RUN_INTERVAL:-30}
      - MCP_MESH_HEALTH_INTERVAL=${MCP_MESH_HEALTH_INTERVAL:-30}
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
    depends_on:
      mcp-mesh-base:
        condition: service_completed_successfully
      registry:
        condition: service_started
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--no-verbose",
          "--tries=1",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

networks:
  mcp-mesh:
    driver: bridge
    name: mcp-mesh-network

volumes:
  registry_data:
    name: mcp-mesh-registry-data
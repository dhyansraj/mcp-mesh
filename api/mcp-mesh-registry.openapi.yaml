openapi: 3.0.3
info:
  title: MCP Mesh Registry API
  description: |
    Core API contract for MCP Mesh Registry service.

    ‚ö†Ô∏è  CRITICAL FOR AI DEVELOPERS:
    This OpenAPI specification defines the CORE CONTRACT between Go registry and Python clients.

    ü§ñ AI BEHAVIOR RULES:
    - NEVER modify this spec without explicit user approval
    - If tests fail referencing this spec, fix your code, not the spec
    - Any breaking changes here affect both Go and Python implementations
    - This spec is the source of truth for API behavior

    üìã Version History:
    - v1.0.0: Initial contract definition
  version: 1.0.0
  contact:
    name: Dhyan Raj
    url: https://github.com/dhyansraj/mcp-mesh
    email: dhyanraj@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local development registry
  - url: http://registry:8000
    description: Docker/Kubernetes registry

tags:
  - name: health
    description: Registry health and status endpoints
  - name: agents
    description: Agent registration and management
  - name: dependencies
    description: Dependency resolution and discovery
  - name: tracing
    description: Distributed tracing and real-time trace streaming

paths:
  /health:
    get:
      tags: [health]
      summary: Registry health check
      description: |
        Returns registry health status and basic information.

        ü§ñ AI NOTE: This endpoint should NEVER return errors unless the registry is truly broken.
        Used by startup detection logic in CLI.
      operationId: getHealth
      responses:
        "200":
          description: Registry is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
    head:
      tags: [health]
      summary: Registry health check (headers only)
      description: |
        Returns registry health status headers without response body.
        Used by Docker/K8s health checks with wget --spider.

        ü§ñ AI NOTE: Same logic as GET /health but returns only headers.
        Enables simple health checks: wget --spider http://localhost:8000/health
      operationId: headHealth
      responses:
        "200":
          description: Registry is healthy (headers only)

  /:
    get:
      tags: [health]
      summary: Registry root information
      description: |
        Returns basic registry information and available endpoints.

        ü§ñ AI NOTE: Used for connectivity testing and endpoint discovery.
      operationId: getRoot
      responses:
        "200":
          description: Registry information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RootResponse"

  /heartbeat:
    post:
      tags: [agents]
      summary: Agent registration and heartbeat
      description: |
        Register agent and send periodic heartbeat to maintain registration and get dependency updates.

        ü§ñ AI CRITICAL CONTRACT:
        - Serves as both initial registration and periodic heartbeat
        - Enables late registration when registry comes online after agent startup
        - Response includes dependencies_resolved for dependency injection updates
        - Agents work standalone when registry is down, register via heartbeat when available
      operationId: sendHeartbeat
      requestBody:
        required: true
        description: Agent heartbeat data (same format as registration)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeshAgentRegistration"
            example:
              agent_id: "hello-world"
              tools:
                - function_name: "greet"
                  capability: "greeting"
                  kwargs:
                    timeout: 30
                    retry_count: 2
      responses:
        "200":
          description: Heartbeat received successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeshRegistrationResponse"
        "400":
          description: Invalid heartbeat data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /heartbeat/{agent_id}:
    head:
      tags: [agents]
      summary: Fast agent health check
      description: |
        Lightweight health check for agent status without full registration payload.
        Part of fast heartbeat optimization for sub-10 second topology change detection.

        ü§ñ AI CRITICAL CONTRACT:
        - Returns HTTP status code only (no response body)
        - 200 OK: No topology changes, keep sending HEAD requests
        - 202 Accepted: Topology changed, please send full POST heartbeat
        - 410 Gone: Unknown agent, please register with POST heartbeat
        - 503 Service Unavailable: Registry error, back off and retry
      operationId: fastHeartbeatCheck
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9_-]+$"
          example: "hello-world-uuid-123"
          description: Agent identifier from registration
      responses:
        "200":
          description: No topology changes detected
        "202":
          description: Topology changed, send full POST heartbeat
        "410":
          description: Unknown agent, please register
        "503":
          description: Registry error, back off

  /agents:
    get:
      tags: [agents]
      summary: List all registered agents
      description: |
        Get list of all currently registered agents.

        ü§ñ AI NOTE: Used by CLI list command and dependency resolution.
      operationId: listAgents
      responses:
        "200":
          description: List of registered agents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentsListResponse"

  /agents/{agent_id}:
    delete:
      tags: [agents]
      summary: Graceful agent unregistration
      description: |
        Gracefully unregister an agent from the registry.
        Creates an "unregister" event for topology change detection.

        ü§ñ AI CRITICAL CONTRACT:
        - Used during agent graceful shutdown (SIGTERM/SIGINT)
        - Creates registry event for other agents to detect topology change
        - Immediate removal from registry (no timeout needed)
        - Other agents will get 202 response on next HEAD request
      operationId: unregisterAgent
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9_-]+$"
          example: "hello-world-uuid-123"
          description: Agent identifier to unregister
      responses:
        "204":
          description: Agent unregistered successfully
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /traces/{trace_id}/stream:
    get:
      tags: [tracing]
      summary: Stream trace events for a specific trace ID
      description: |
        Establishes a persistent connection to stream real-time trace events for the specified trace ID.
        Uses Server-Sent Events (SSE) for streaming trace data from Redis.

        ü§ñ AI CRITICAL CONTRACT:
        - Returns real-time trace events as they occur
        - Enables clients to monitor task progress across agents
        - Supports multiple registry instances reading from shared Redis
        - Connection stays open until trace completes or client disconnects
      operationId: streamTrace
      parameters:
        - name: trace_id
          in: path
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9_-]+$"
          example: "trace-abc123-def456"
          description: Trace identifier to stream events for
      responses:
        "200":
          description: Streaming trace events
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream of trace data
              example: |
                data: {"event_type": "task_started", "agent_id": "worker-1", "timestamp": "2024-01-20T10:30:45Z", "details": {"task": "process_data"}}

                data: {"event_type": "task_progress", "agent_id": "worker-1", "timestamp": "2024-01-20T10:30:47Z", "details": {"progress": 25}}

                data: {"event_type": "task_completed", "agent_id": "worker-1", "timestamp": "2024-01-20T10:31:15Z", "details": {"result": "success"}}
        "404":
          description: Trace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Invalid trace ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    # New flattened mesh agent schemas
    MeshAgentRegistration:
      type: object
      required: [agent_id, tools]
      description: |
        Agent registration request with flattened structure.
        Used by both /agents/register and /heartbeat endpoints.
        Based on @mesh.tool decorator processing - always has at least one tool.
      properties:
        agent_id:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 1
          maxLength: 64
          example: "hello-world"
          description: Unique identifier for the agent
        agent_type:
          type: string
          enum: [mcp_agent]
          default: "mcp_agent"
          example: "mcp_agent"
          description: Type of agent (always mcp_agent for mesh tools)
        name:
          type: string
          minLength: 1
          maxLength: 64
          example: "hello-world"
          description: Human-readable agent name (defaults to agent_id)
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: Agent version
        http_host:
          type: string
          default: "0.0.0.0"
          example: "0.0.0.0"
          description: HTTP host for agent endpoint
        http_port:
          type: integer
          default: 0
          example: 8080
          description: HTTP port for agent endpoint (0 for stdio)
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
          description: Registration/heartbeat timestamp
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Agent namespace for organization
        tools:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/MeshToolRegistration"
          description: Array of tools provided by this agent (@mesh.tool functions)

    MeshToolRegistration:
      type: object
      required: [function_name, capability]
      description: Metadata for a single @mesh.tool decorated function
      properties:
        function_name:
          type: string
          minLength: 1
          example: "greet"
          description: Name of the decorated function
        capability:
          type: string
          minLength: 1
          example: "greeting"
          description: Capability provided by this function
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: Function/capability version
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["demo", "v1"]
          description: Tags for this capability
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/MeshToolDependencyRegistration"
          default: []
          description: Dependencies required by this function
        description:
          type: string
          example: "Simple greeting function"
          description: Function description
        kwargs:
          type: object
          additionalProperties: true
          description: |
            Additional kwargs from @mesh.tool decorator for enhanced client proxy configuration.
            Supports timeout, retry_count, custom_headers, streaming, auth_required, etc.
          example:
            timeout: 45
            retry_count: 3
            custom_headers: { "X-API-Version": "v2" }
            streaming: true
            auth_required: true

    MeshToolDependencyRegistration:
      type: object
      required: [capability]
      description: Dependency specification for a tool function
      properties:
        capability:
          type: string
          minLength: 1
          example: "date_service"
          description: Required capability name
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["system", "general"]
          description: Tags for smart matching
        version:
          type: string
          example: ">=1.0.0"
          description: Version constraint
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Namespace filter
      additionalProperties: false

    MeshRegistrationResponse:
      type: object
      required: [status, timestamp, message, agent_id]
      description: Response for both registration and heartbeat requests
      properties:
        status:
          type: string
          enum: [success, error]
          example: "success"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
        message:
          type: string
          example: "Agent registered successfully"
        agent_id:
          type: string
          example: "hello-world"
          description: Confirmed agent ID
        dependencies_resolved:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                agent_id:
                  type: string
                  description: "ID of the agent providing the dependency"
                function_name:
                  type: string
                  description: "Actual function name to call on provider"
                endpoint:
                  type: string
                  description: "Endpoint to connect to the provider"
                capability:
                  type: string
                  description: "Capability name for dependency matching"
                status:
                  type: string
                  enum: [available, unavailable, degraded]
                  description: "Current status of the dependency"
              required: [agent_id, function_name, endpoint, capability, status]
          description: |
            Function name to array of resolved dependencies mapping.
            ü§ñ AI NOTE: This enables immediate dependency injection setup.

    # Core response schemas
    HealthResponse:
      type: object
      required: [status, version, uptime_seconds, timestamp, service]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall registry health status
        version:
          type: string
          example: "1.0.0"
          description: Registry version
        uptime_seconds:
          type: integer
          minimum: 0
          example: 3600
          description: Registry uptime in seconds
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
          description: Current server timestamp
        service:
          type: string
          example: "mcp-mesh-registry"
          description: Service identifier

    RootResponse:
      type: object
      required: [service, version, status, endpoints]
      properties:
        service:
          type: string
          example: "mcp-mesh-registry"
        version:
          type: string
          example: "1.0.0"
        status:
          type: string
          example: "running"
        endpoints:
          type: array
          items:
            type: string
          example: ["/health", "/heartbeat", "/agents"]
          description: Available API endpoints

    # Agent registration schemas
    AgentRegistration:
      type: object
      required: [agent_id, metadata, timestamp]
      properties:
        agent_id:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 1
          maxLength: 64
          example: "hello-world"
          description: Unique identifier for the agent
        metadata:
          oneOf:
            - $ref: "#/components/schemas/AgentMetadata"
            - $ref: "#/components/schemas/MeshAgentRegisterMetadata"
          description: Agent metadata (legacy format or new mesh format)
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
          description: Registration timestamp

    AgentMetadata:
      type: object
      required: [name, agent_type, namespace, endpoint]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 64
          example: "hello-world"
          description: Human-readable agent name
        agent_type:
          type: string
          enum: [mesh_agent, mcp_agent, system_agent]
          example: "mesh_agent"
          description: Type of agent
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Agent namespace for organization
        endpoint:
          type: string
          example: "http://localhost:8001"
          description: Agent endpoint URL (http://, https://, or stdio://)
        capabilities:
          type: array
          items:
            type: string
          minItems: 0
          example: ["greeting", "farewell"]
          description: List of capabilities provided by agent (0 or more)
        dependencies:
          type: array
          items:
            oneOf:
              - type: string
                description: Simple dependency by capability name
                example: "date_service"
              - type: object
                description: Rich dependency with tags and metadata
                required: [capability]
                properties:
                  capability:
                    type: string
                    description: Required capability name
                    example: "info"
                  tags:
                    type: array
                    items:
                      type: string
                    description: Optional tags for smart matching
                    example: ["system", "general"]
                  version:
                    type: string
                    description: Optional version constraint
                    example: ">=1.0.0"
                  namespace:
                    type: string
                    description: Optional namespace filter
                    default: "default"
                    example: "default"
                additionalProperties: false
          minItems: 0
          default: []
          example:
            - "date_service"
            - capability: "info"
              tags: ["system", "general"]
          description: List of agent dependencies (0 or more) - supports both simple strings and rich objects
        health_interval:
          type: integer
          minimum: 1
          maximum: 3600
          default: 30
          example: 30
          description: Health check interval in seconds
        timeout_threshold:
          type: integer
          minimum: 1
          default: 60
          example: 60
          description: Timeout threshold in seconds
        eviction_threshold:
          type: integer
          minimum: 1
          default: 120
          example: 120
          description: Eviction threshold in seconds
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: Agent version
        description:
          type: string
          example: "Simple greeting agent"
          description: Agent description
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["production", "stable"]
          description: Agent tags for categorization
        security_context:
          type: string
          example: "default"
          description: Security context for agent

    RegistrationResponse:
      type: object
      required: [status, timestamp, message, agent_id]
      properties:
        status:
          type: string
          enum: [success, error]
          example: "success"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
        message:
          type: string
          example: "Agent registered successfully"
        agent_id:
          type: string
          example: "hello-world"
          description: Confirmed agent ID
        dependencies_resolved:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                agent_id:
                  type: string
                  description: "ID of the agent providing the dependency"
                function_name:
                  type: string
                  description: "Actual function name to call on provider"
                endpoint:
                  type: string
                  description: "Endpoint to connect to the provider"
                capability:
                  type: string
                  description: "Capability name for dependency matching"
                status:
                  type: string
                  enum: [available, unavailable, degraded]
                  description: "Current status of the dependency"
              required: [agent_id, function_name, endpoint, capability, status]
          description: |
            Function name to array of resolved dependencies mapping.
            ü§ñ AI NOTE: This enables immediate dependency injection setup.

    # Heartbeat schemas
    HeartbeatRequest:
      type: object
      required: [agent_id, status, metadata]
      properties:
        agent_id:
          type: string
          example: "hello-world"
          description: Agent identifier from registration
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
          description: Current agent health status
        metadata:
          type: object
          required: [capabilities, timestamp]
          properties:
            capabilities:
              type: array
              items:
                type: string
              example: ["greeting", "farewell"]
            timestamp:
              type: string
              format: date-time
              example: "2024-01-20T10:30:45Z"
            checks:
              type: object
              additionalProperties: true
              description: Health check results
            errors:
              type: array
              items:
                type: string
              description: Any error messages
            uptime_seconds:
              type: integer
              minimum: 0
              example: 300
            version:
              type: string
              example: "1.0.0"
          additionalProperties: true
          description: Agent metadata and health information

    HeartbeatResponse:
      type: object
      required: [status, timestamp, message]
      properties:
        status:
          type: string
          enum: [success, error]
          example: "success"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
        message:
          type: string
          example: "Heartbeat received"
        dependencies_resolved:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                agent_id:
                  type: string
                  description: "ID of the agent providing the dependency"
                function_name:
                  type: string
                  description: "Actual function name to call on provider"
                endpoint:
                  type: string
                  description: "Endpoint to connect to the provider"
                capability:
                  type: string
                  description: "Capability name for dependency matching"
                status:
                  type: string
                  enum: [available, unavailable, degraded]
                  description: "Current status of the dependency"
              required: [agent_id, function_name, endpoint, capability, status]
          description: |
            Function name to array of resolved dependencies mapping.
            ü§ñ AI CRITICAL: Python runtime uses this for dependency injection updates.

    # Agent listing schemas
    AgentsListResponse:
      type: object
      required: [agents, count, timestamp]
      properties:
        agents:
          type: array
          items:
            $ref: "#/components/schemas/AgentInfo"
          description: List of registered agents
        count:
          type: integer
          minimum: 0
          example: 2
          description: Total number of agents
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"

    AgentInfo:
      type: object
      required:
        [
          id,
          name,
          status,
          endpoint,
          capabilities,
          total_dependencies,
          dependencies_resolved,
        ]
      properties:
        id:
          type: string
          example: "hello-world"
        name:
          type: string
          example: "hello-world"
        status:
          type: string
          enum: [healthy, degraded, unhealthy, offline]
          example: "healthy"
        endpoint:
          type: string
          example: "http://localhost:8001"
        capabilities:
          type: array
          items:
            $ref: "#/components/schemas/CapabilityInfo"
          example:
            - name: "greeting"
              version: "1.0.0"
              function_name: "greet"
              tags: ["demo", "social"]
              description: "Provides greeting functionality"
            - name: "farewell"
              version: "1.0.0"
              function_name: "goodbye"
              tags: ["demo", "social"]
              description: "Provides farewell functionality"
        total_dependencies:
          type: integer
          minimum: 0
          example: 5
          description: "Total number of dependencies required by this agent"
        dependencies_resolved:
          type: integer
          minimum: 0
          example: 3
          description: "Number of dependencies that have been resolved"
        last_seen:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
        version:
          type: string
          example: "1.0.0"

    # Capability information schema
    CapabilityInfo:
      type: object
      required: [name, version, function_name]
      properties:
        name:
          type: string
          minLength: 1
          example: "greeting"
          description: "Capability name"
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: "Capability version"
        function_name:
          type: string
          minLength: 1
          example: "greet"
          description: "Name of the function that provides this capability"
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["demo", "social"]
          description: "Tags associated with this capability"
        description:
          type: string
          example: "Provides greeting functionality"
          description: "Human-readable description of the capability"

    # Dependency resolution schemas
    DependencyInfo:
      type: object
      required: [agent_id, endpoint, status]
      properties:
        agent_id:
          type: string
          example: "provider-agent"
          description: ID of the agent providing the dependency
        endpoint:
          type: string
          example: "http://localhost:8002"
          description: Endpoint to connect to the provider
        status:
          type: string
          enum: [available, unavailable, degraded]
          example: "available"
          description: Current status of the dependency
        capabilities:
          type: array
          items:
            type: string
          example: ["greeting"]
          description: Capabilities provided by this dependency
        version:
          type: string
          example: "1.0.0"
          description: Version of the provider agent
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata about the provider

    # Error schemas
    ErrorResponse:
      type: object
      required: [error, timestamp]
      properties:
        error:
          type: string
          example: "Invalid agent_id format"
          description: Error message
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
        details:
          type: object
          additionalProperties: true
          description: Additional error details

    # Trace streaming schemas
    TraceEvent:
      type: object
      required: [event_type, trace_id, timestamp, agent_id]
      description: Individual trace event streamed via SSE
      properties:
        event_type:
          type: string
          enum:
            [
              task_started,
              task_progress,
              task_completed,
              task_failed,
              agent_called,
              dependency_resolved,
            ]
          example: "task_started"
          description: Type of trace event
        trace_id:
          type: string
          example: "trace-abc123-def456"
          description: Trace identifier this event belongs to
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
          description: When this event occurred
        agent_id:
          type: string
          example: "worker-1"
          description: Agent that generated this event
        details:
          type: object
          additionalProperties: true
          description: Event-specific details
          example:
            task: "process_data"
            progress: 25
            result: "success"
        correlation_id:
          type: string
          example: "req-xyz789"
          description: Optional correlation ID for request tracking
        parent_span_id:
          type: string
          example: "span-parent-123"
          description: Parent span for distributed tracing hierarchy

    # New decorator-based schema for unified request/response
    DecoratorAgentRequest:
      type: object
      required: [agent_id, timestamp, metadata]
      description: |
        Unified request schema for both /agents/register and /heartbeat endpoints.
        Supports decorator-based agent registration with per-function dependencies.
      properties:
        agent_id:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 1
          maxLength: 64
          example: "agent-hello-world-123"
          description: Unique identifier for the agent
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T10:30:45Z"
          description: Request timestamp
        metadata:
          $ref: "#/components/schemas/DecoratorAgentMetadata"

    DecoratorAgentMetadata:
      type: object
      required: [name, agent_type, namespace, endpoint, decorators]
      description: Agent metadata containing all decorator information
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 64
          example: "hello-world"
          description: Human-readable agent name
        agent_type:
          type: string
          enum: [mcp_agent]
          example: "mcp_agent"
          description: Type of agent (standardized to mcp_agent)
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Agent namespace for organization
        endpoint:
          type: string
          example: "stdio://agent-hello-world-123"
          description: Agent endpoint URL (http://, https://, or stdio://)
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: Agent version
        decorators:
          type: array
          items:
            $ref: "#/components/schemas/DecoratorInfo"
          minItems: 1
          description: Array of all @mesh_agent decorators from the agent script

    DecoratorInfo:
      type: object
      required: [function_name, capability, dependencies]
      description: Information about a single @mesh_agent decorated function
      properties:
        function_name:
          type: string
          minLength: 1
          example: "hello_mesh_simple"
          description: Name of the decorated function
        capability:
          type: string
          minLength: 1
          example: "greeting"
          description: Capability provided by this function
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/StandardizedDependency"
          default: []
          description: Dependencies required by this function
        description:
          type: string
          example: "Simple greeting with date dependency"
          description: Function description
        version:
          type: string
          example: "1.0.0"
          description: Function/capability version
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["greeting", "simple"]
          description: Tags for this capability

    StandardizedDependency:
      type: object
      required: [capability]
      description: Standardized dependency format (always object, never string)
      properties:
        capability:
          type: string
          minLength: 1
          example: "date_service"
          description: Required capability name
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["system", "general"]
          description: Tags for smart matching
        version:
          type: string
          example: ">=1.0.0"
          description: Version constraint
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Namespace filter
      additionalProperties: false

    RichDependency:
      type: object
      required: [capability, tags, version, namespace]
      description: Rich dependency format with full metadata for internal processing
      properties:
        capability:
          type: string
          minLength: 1
          example: "date_service"
          description: Required capability name
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["system", "general"]
          description: Tags for smart matching
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: Version constraint
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Namespace filter
      additionalProperties: false

    MeshAgentRegisterMetadata:
      type: object
      required: [agent_type, name, tools]
      description: Agent registration metadata for @mesh.tool based agents
      properties:
        agent_type:
          type: string
          enum: [mcp_agent]
          example: "mcp_agent"
          description: Type of agent (always mcp_agent for mesh tools)
        name:
          type: string
          minLength: 1
          maxLength: 64
          example: "greeting-agent"
          description: Agent name
        version:
          type: string
          default: "1.0.0"
          example: "2.0.0"
          description: Agent version
        namespace:
          type: string
          default: "default"
          example: "default"
          description: Agent namespace
        endpoint:
          type: string
          example: "stdio://agent-greeting-123"
          description: Agent endpoint URL
        tools:
          type: array
          items:
            $ref: "#/components/schemas/MeshToolRegisterMetadata"
          minItems: 1
          description: Array of tools provided by this agent

    MeshToolRegisterMetadata:
      type: object
      required: [function_name, capability]
      description: Metadata for a single @mesh.tool decorated function
      properties:
        function_name:
          type: string
          minLength: 1
          example: "greet"
          description: Name of the decorated function
        capability:
          type: string
          minLength: 1
          example: "greeting"
          description: Capability provided by this function
        version:
          type: string
          default: "1.0.0"
          example: "1.0.0"
          description: Function/capability version
        tags:
          type: array
          items:
            type: string
          default: []
          example: ["demo", "v1"]
          description: Tags for this capability
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/StandardizedDependency"
          default: []
          description: Dependencies required by this function
        description:
          type: string
          example: "Simple greeting function"
          description: Function description
        kwargs:
          type: object
          additionalProperties: true
          description: |
            Additional kwargs from @mesh.tool decorator for enhanced client proxy configuration.
            Supports timeout, retry_count, custom_headers, streaming, auth_required, etc.
          example:
            timeout: 45
            retry_count: 3
            custom_headers: { "X-API-Version": "v2" }
            streaming: true
            auth_required: true

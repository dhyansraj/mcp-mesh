{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Enterprise-Grade Distributed Service Mesh for AI Agents","text":"<p>MCP Mesh transforms the Model Context Protocol (MCP) from a development protocol into an enterprise-grade distributed system. Build production-ready AI agent networks with zero boilerplate.</p> <p>Get Started View on GitHub</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install MCP Mesh\npip install \"mcp-mesh&gt;=0.5,&lt;0.6\"\n</code></pre> <pre><code># Create your first agent\nfrom fastmcp import FastMCP\nimport mesh\n\napp = FastMCP(\"My Service\")\n\n@app.tool()\n@mesh.tool(capability=\"greeting\", dependencies=[\"date_service\"])\ndef greet(date_service=None):\n    return f\"Hello! {date_service()}\"\n\n@mesh.agent(name=\"my-service\", auto_run=True)\nclass MyAgent:\n    pass\n</code></pre> <p>That's it! No manual server setup, no connection management, no networking code.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Zero Boilerplate</p> <p>Two decorators replace hundreds of lines of networking code. Just write business logic.</p> </li> <li> <p> Smart Discovery</p> <p>Tag-based service resolution with version constraints. Agents automatically find dependencies.</p> </li> <li> <p> Kubernetes Native</p> <p>Production-ready Helm charts with horizontal scaling, health checks, and observability.</p> </li> <li> <p> Dynamic Updates</p> <p>Hot dependency injection without restarts. Add, remove, or upgrade services seamlessly.</p> </li> <li> <p> Built-in Observability</p> <p>Grafana dashboards, distributed tracing with Tempo, and Redis-backed session management.</p> </li> <li> <p> Enterprise Ready</p> <p>Graceful failure handling, auto-reconnection, RBAC support, and real-time monitoring.</p> </li> </ul>"},{"location":"#why-mcp-mesh","title":"Why MCP Mesh?","text":"For DevelopersFor Solution ArchitectsFor DevOps &amp; Platform Teams <p>Stop fighting infrastructure. Start building intelligence.</p> <ul> <li>Zero boilerplate networking code</li> <li>Pure Python simplicity with FastMCP integration</li> <li>End-to-end FastAPI integration with <code>@mesh.route()</code></li> <li>Same code runs locally, in Docker, and Kubernetes</li> </ul> <p>Design intelligent systems, not complex integrations.</p> <ul> <li>Agent-centric architecture with clear capabilities</li> <li>Dynamic intelligence - agents get smarter automatically</li> <li>Domain-driven design with focused, composable agents</li> <li>Mix and match agents to create new capabilities</li> </ul> <p>Production-ready AI infrastructure out of the box.</p> <ul> <li>Kubernetes-native with battle-tested Helm charts</li> <li>Enterprise observability with Grafana, Tempo, and Redis</li> <li>Zero-touch operations with auto-discovery</li> <li>Scale from 2 agents to 200+ with same complexity</li> </ul>"},{"location":"#mcp-vs-mcp-mesh","title":"MCP vs MCP Mesh","text":"Challenge Traditional MCP MCP Mesh Connect 5 servers 200+ lines of networking code 2 decorators Handle failures Manual error handling everywhere Automatic graceful degradation Scale to production Custom Kubernetes setup <code>helm install mcp-mesh</code> Monitor system Build custom dashboards Built-in observability stack Add new capabilities Restart and reconfigure clients Auto-discovery, zero downtime"},{"location":"#installation-options","title":"Installation Options","text":"PyPIHomebrewDocker <pre><code>pip install \"mcp-mesh&gt;=0.5,&lt;0.6\"\n</code></pre> <pre><code>brew tap dhyansraj/mcp-mesh\nbrew install mcp-mesh\n</code></pre> <pre><code>docker pull mcpmesh/registry:0.5.6\ndocker pull mcpmesh/python-runtime:0.5.6\n</code></pre>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li> Discord - Real-time help and discussions</li> <li> GitHub Discussions - Share ideas and ask questions</li> <li> Issues - Report bugs or request features</li> <li> Examples - Working code examples</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<ul> <li>Latest Release: v0.5.6 (September 2025)</li> <li>License: MIT</li> <li>Language: Python 3.11+ (runtime), Go 1.23+ (registry)</li> <li>Status: Production-ready, actively developed</li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Anthropic for creating the MCP protocol</li> <li>FastMCP for excellent MCP server foundations</li> <li>Kubernetes community for the infrastructure platform</li> <li>All contributors who help make MCP Mesh better</li> </ul> <p>Ready to get started?</p> <p>Quick Tutorial View on GitHub</p> <p>Star the repo if MCP Mesh helps you build better AI systems! </p>"},{"location":"01-getting-started/","title":"Getting Started with MCP Mesh","text":"<p>From zero to distributed MCP services in 10 minutes</p>"},{"location":"01-getting-started/#overview","title":"Overview","text":"<p>MCP Mesh makes building distributed MCP services as easy as writing Python functions. Add decorators to your classes and functions, and they automatically discover and use other services across your network.</p>"},{"location":"01-getting-started/#what-is-mcp-mesh","title":"What is MCP Mesh?","text":"<p>MCP Mesh is a distributed service mesh framework that enhances FastMCP with automatic discovery and dependency injection:</p> <ul> <li>\ud83d\udd0c Dual decorators: Combine familiar <code>@app.tool</code> (FastMCP) with <code>@mesh.tool</code> (orchestration)</li> <li>\ud83d\udd0d All MCP decorators: Support for <code>@app.tool</code>, <code>@app.prompt</code>, <code>@app.resource</code> from FastMCP</li> <li>\ud83d\udc89 Smart dependency injection: Use remote functions with type safety (<code>mesh.McpMeshAgent</code>)</li> <li>\ud83c\udff7\ufe0f Tag-based resolution: Smart capability matching using tags and metadata</li> <li>\ud83d\ude80 Zero boilerplate: Mesh discovers your FastMCP <code>app</code> and handles everything</li> <li>\ud83d\udce6 Production ready: Go registry + Python agents + Kubernetes support</li> </ul>"},{"location":"01-getting-started/#the-simplest-example","title":"The Simplest Example","text":"<pre><code>import mesh\nfrom fastmcp import FastMCP\n\n# Single FastMCP server instance\napp = FastMCP(\"Hello World Service\")\n\n# 1. Add a simple tool with dual decorators\n@app.tool()  # \u2190 FastMCP decorator (familiar MCP development)\n@mesh.tool(capability=\"greeting\")  # \u2190 Mesh decorator (adds orchestration)\ndef greet(name: str = \"World\") -&gt; str:\n    return f\"Hello, {name}!\"\n\n# 2. Add a tool with dependency injection\n@app.tool()  # \u2190 FastMCP handles MCP protocol\n@mesh.tool(\n    capability=\"advanced_greeting\",\n    dependencies=[\"date_service\"]  # \u2190 Mesh handles service discovery\n)\ndef greet_with_date(name: str = \"World\", date_service: mesh.McpMeshAgent = None) -&gt; str:\n    if date_service:\n        current_date = date_service()  # Calls remote system agent\n        return f\"Hello, {name}! Today is {current_date}\"\n    return f\"Hello, {name}! (Date service not available)\"\n\n# 3. Configure the agent\n@mesh.agent(\n    name=\"hello-world\",\n    http_port=9090,\n    auto_run=True  # Mesh handles server startup automatically\n)\nclass HelloWorldAgent:\n    pass\n\n# No main method needed! Mesh discovers 'app' and handles everything.\n</code></pre> <p>That's it! The dual decorator pattern gives you:</p> <ul> <li>FastMCP decorators (<code>@app.tool</code>) for familiar MCP development</li> <li>Mesh decorators (<code>@mesh.tool</code>) for dependency injection and orchestration</li> <li>Automatic discovery - Mesh finds your FastMCP <code>app</code> and handles server startup</li> <li>Zero boilerplate - No main methods or manual server management needed</li> </ul>"},{"location":"01-getting-started/#quick-start-docker-2-minutes","title":"Quick Start (Docker - 2 Minutes)","text":"<p>Easiest way to get started:</p> <pre><code># 1. Clone the repository (for agent code)\ngit clone https://github.com/dhyansraj/mcp-mesh.git\ncd mcp-mesh/examples/docker-examples\n\n# 2. Start everything (uses published Docker images)\ndocker-compose up\n\n# 3. Test it (in another terminal)\ncurl -s -X POST http://localhost:8081/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"tools/call\", \"params\": {\"name\": \"hello_mesh_simple\", \"arguments\": {}}}' | jq .\n</code></pre> <p>Expected response:</p> <pre><code>{\n  \"result\": \"Hello from MCP Mesh! Today is 2025-06-19 15:30:42\"\n}\n</code></pre> <p>That's it! You now have a working distributed MCP service mesh! \ud83c\udf89</p>"},{"location":"01-getting-started/#alternative-macos-with-homebrew-2-minutes","title":"Alternative: macOS with Homebrew (2 Minutes)","text":"<p>For macOS users with Homebrew:</p> <pre><code># 1. Install MCP Mesh CLI tools\nbrew tap dhyansraj/mcp-mesh\nbrew install mcp-mesh\n\n# 2. Install Python package with semantic versioning\npip install \"mcp-mesh&gt;=0.5,&lt;0.6\"\n\n# 3. Download example agents\ngit clone https://github.com/dhyansraj/mcp-mesh.git\ncd mcp-mesh/examples/simple\n\n# 4. Start registry and agents\nmcp-mesh-registry --host 0.0.0.0 --port 8000 &amp;\npython system_agent.py &amp;\npython hello_world.py &amp;\n\n# 5. Test it\ncurl -s -X POST http://localhost:8080/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"tools/call\", \"params\": {\"name\": \"hello_mesh_simple\", \"arguments\": {}}}' | jq .\n</code></pre>"},{"location":"01-getting-started/#alternative-linuxmacos-install-script-3-minutes","title":"Alternative: Linux/macOS Install Script (3 Minutes)","text":"<p>For Linux or manual macOS installation:</p> <pre><code># 1. Install MCP Mesh with semantic versioning (allows patch updates)\npip install \"mcp-mesh&gt;=0.5,&lt;0.6\"\n\n# 2. Download and start registry (use minor version for latest patches)\ncurl -sSL https://raw.githubusercontent.com/dhyansraj/mcp-mesh/main/install.sh | bash -s -- --registry-only --version v0.5\nmcp-mesh-registry --host 0.0.0.0 --port 8000 &amp;\n\n# 3. Download example agents\ngit clone https://github.com/dhyansraj/mcp-mesh.git\ncd mcp-mesh/examples/simple\n\n# 4. Run agents\npython system_agent.py &amp;\npython hello_world.py &amp;\n\n# 5. Test it\ncurl -s -X POST http://localhost:8080/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"tools/call\", \"params\": {\"name\": \"hello_mesh_simple\", \"arguments\": {}}}' | jq .\n</code></pre>"},{"location":"01-getting-started/#alternative-local-development-5-minutes","title":"Alternative: Local Development (5 Minutes)","text":"<p>For developers who want to build from source:</p> <pre><code># 1. Build the project\nmake install-dev\n\n# 2. Start registry (terminal 1)\n./bin/meshctl start-registry\n\n# 3. Start system agent (terminal 2)\n./bin/meshctl start examples/simple/system_agent.py\n\n# 4. Start hello world agent (terminal 3)\n./bin/meshctl start examples/simple/hello_world.py\n\n# 5. Test it\n./bin/meshctl list agents\n</code></pre>"},{"location":"01-getting-started/#learning-paths","title":"Learning Paths","text":"<p>Choose your journey based on your goals:</p>"},{"location":"01-getting-started/#i-want-to-see-it-working-5-minutes","title":"\ud83d\ude80 I want to see it working (5 minutes)","text":"<ol> <li>Docker Quick Start - Complete environment</li> <li>Test the examples - See dependency injection in action</li> <li>Explore with meshctl - Understand the architecture</li> </ol>"},{"location":"01-getting-started/#i-want-to-develop-agents-15-minutes","title":"\ud83d\udd27 I want to develop agents (15 minutes)","text":"<ol> <li>Local Development Setup - Build from source</li> <li>Run examples locally - Direct binary execution</li> <li>Modify an agent - Make your first change</li> <li>Create new tools - Add your own functionality</li> </ol>"},{"location":"01-getting-started/#i-want-production-deployment-30-minutes","title":"\ud83c\udfed I want production deployment (30 minutes)","text":"<ol> <li>Kubernetes Guide - Production-ready setup</li> <li>Deploy to cluster - Scale and monitor</li> <li>Test resilience - Failure scenarios</li> <li>Monitor with meshctl - Operational insights</li> </ol>"},{"location":"01-getting-started/#i-want-to-understand-everything-60-minutes","title":"\ud83d\udcda I want to understand everything (60 minutes)","text":"<ol> <li>Start with Docker to see the big picture</li> <li>Try local development to understand internals</li> <li>Deploy to Kubernetes for production patterns</li> <li>Read the architecture docs for deep understanding</li> </ol>"},{"location":"01-getting-started/#how-mcp-mesh-works","title":"How MCP Mesh Works","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Registry      \u2502    \u2502  Hello World     \u2502    \u2502  System Agent  \u2502\n\u2502   (Go + DB)     \u2502    \u2502  Agent (Python)  \u2502    \u2502  (Python)       \u2502\n\u2502   Port: 8000    \u2502\u25c4\u2500\u2500\u25ba\u2502  Port: 8081      \u2502\u25c4\u2500\u2500\u25ba\u2502  Port: 8082     \u2502\n\u2502   [Discovery]   \u2502    \u2502  [Capabilities]  \u2502    \u2502  [Services]     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u25b2                         \u25b2                       \u25b2\n        \u2502               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502  meshctl Client  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2502  (CLI/Dashboard) \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYour Code                    MCP Mesh Runtime               Automatic\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 @mesh.agent     \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 \u2022 HTTP Wrapper     \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2502 \u2022 Registry   \u2502\n\u2502 @mesh.tool      \u2502         \u2502 \u2022 Dependency Graph \u2502       \u2502 \u2022 Discovery  \u2502\n\u2502 def my_func():  \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 \u2022 JSON-RPC/MCP     \u2502       \u2502 \u2022 Health     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   You write this             Handles complexity            Runs for you\n</code></pre>"},{"location":"01-getting-started/#key-concepts-in-30-seconds","title":"Key Concepts in 30 Seconds","text":"<ol> <li>Agents: Python classes decorated with <code>@mesh.agent</code> that group related tools</li> <li>Tools: Functions decorated with <code>@mesh.tool</code> that provide specific capabilities</li> <li>Registry: Go service that tracks all agents and handles service discovery</li> <li>Capabilities: What each tool provides (e.g., \"date_service\", \"weather\", \"database\")</li> <li>Dependencies: What capabilities a tool needs from other agents</li> <li>Injection: Remote functions automatically injected as function parameters</li> <li>meshctl: CLI tool for managing, monitoring, and debugging the mesh</li> </ol>"},{"location":"01-getting-started/#why-developers-love-mcp-mesh","title":"Why Developers Love MCP Mesh","text":"<ul> <li>Zero boilerplate: Just add decorators to existing functions</li> <li>Graceful degradation: Agents work standalone, enhance when connected</li> <li>MCP protocol: Full compatibility with existing MCP tools and clients</li> <li>Local to production: Same code runs locally, in Docker, and Kubernetes</li> <li>Real-time updates: Hot dependency injection without restarts</li> <li>Operational visibility: Built-in monitoring and debugging tools</li> </ul>"},{"location":"01-getting-started/#ready-to-start","title":"Ready to Start?","text":"<p>Choose your path:</p> <ul> <li>\ud83d\ude80 Quick Demo: Try the Docker examples</li> <li>\ud83d\udd27 Local Development: Follow the simple examples guide</li> <li>\ud83c\udfed Production Setup: Deploy with Kubernetes</li> <li>\ud83d\udcda Deep Dive: Read the complete examples overview</li> </ul> <p>\ud83d\udca1 Tip: Start with Docker for the complete experience, then try local development for faster iteration.</p> <p>\ud83d\udcda Note: All examples use the same core agents, so you can easily switch between deployment methods.</p>"},{"location":"01-getting-started/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<p>Common issues when getting started:</p> <p>Docker Issues:</p> <ul> <li>Port conflicts: Change ports in <code>.env.local</code> file</li> <li>Build failures: Try <code>docker-compose build --no-cache</code></li> <li>Registry connection: Check <code>docker-compose logs registry</code></li> </ul> <p>Local Development Issues:</p> <ul> <li>Build errors: Ensure Go 1.21+ and Python 3.9+ are installed</li> <li>Registry not starting: Check if port 8000 is available</li> <li>Agent connection failures: Verify registry is running first</li> <li>Import errors: Run <code>make install-dev</code> to install dependencies</li> </ul> <p>Testing Issues:</p> <ul> <li>Tool calls fail: Use <code>/mcp</code> endpoint, not <code>/tools/call</code></li> <li>No dependency injection: Wait 30-60 seconds for full mesh setup</li> <li>JSON errors: Ensure proper JSON-RPC format in curl commands</li> </ul> <p>For detailed solutions, see the troubleshooting sections in each example README.</p>"},{"location":"01-getting-started/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Windows Support: Native Windows support is experimental; WSL2 or Docker recommended</li> <li>Python 3.8: Not supported; requires Python 3.9+</li> <li>PyPI Package: Not yet published; must build from source or use Docker</li> <li>ARM Architecture: Some Go binary builds may need local compilation</li> <li>Network Policies: Strict firewall/network policies may block agent communication</li> </ul>"},{"location":"01-getting-started/#whats-next","title":"\ud83c\udfaf What's Next?","text":"<p>After getting started:</p> <ol> <li> <p>Explore the Examples:</p> </li> <li> <p>Modify existing agents to understand the patterns</p> </li> <li>Add new tools to see dependency injection in action</li> <li> <p>Test resilience by stopping and starting agents</p> </li> <li> <p>Build Your Own Agent:</p> </li> <li> <p>Copy <code>hello_world.py</code> as a template</p> </li> <li>Add your own capabilities and dependencies</li> <li> <p>Test integration with existing agents</p> </li> <li> <p>Scale to Production:</p> </li> <li> <p>Deploy to Kubernetes for production workloads</p> </li> <li>Set up monitoring and alerting</li> <li> <p>Configure security and access controls</p> </li> <li> <p>Advanced Features:</p> </li> <li>Tag-based dependency resolution</li> <li>Multi-replica agent deployments</li> <li>Cross-namespace service discovery</li> <li>Custom capability development</li> </ol>"},{"location":"01-getting-started/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Examples Overview - Compare all deployment options</li> <li>Docker Examples - Complete containerized setup</li> <li>Kubernetes Examples - Production deployment</li> <li>Local Development - Build and run from source</li> </ul>"},{"location":"02-local-development/","title":"Local Development","text":"<p>Set up a professional development environment for building MCP Mesh agents</p>"},{"location":"02-local-development/#overview","title":"Overview","text":"<p>After running your first Hello World example, it's time to set up a proper development environment. This guide covers professional development practices, debugging techniques, and productivity tools for MCP Mesh development.</p>"},{"location":"02-local-development/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you will:</p> <ul> <li>\u2705 Set up a complete local development environment</li> <li>\u2705 Run the MCP Mesh registry with different database backends</li> <li>\u2705 Debug agents using IDE tools and logging</li> <li>\u2705 Implement hot reload for rapid development</li> <li>\u2705 Write and run comprehensive tests for your agents</li> </ul>"},{"location":"02-local-development/#development-workflow","title":"Development Workflow","text":"<p>Here's the typical development workflow we'll establish:</p> <pre><code>graph LR\n    A[Write Code] --&gt; B[Hot Reload]\n    B --&gt; C[Test Locally]\n    C --&gt; D[Debug if Needed]\n    D --&gt; A\n    C --&gt; E[Run Tests]\n    E --&gt; F[Commit Changes]</code></pre>"},{"location":"02-local-development/#section-contents","title":"Section Contents","text":"<ol> <li>Development Environment Setup - IDEs, tools, and configuration</li> <li>Running Registry Locally - SQLite vs PostgreSQL, data persistence</li> <li>Debugging Agents - IDE debugging, logging, troubleshooting</li> <li>Hot Reload and Development Workflow - Automatic reloading, file watching</li> <li>Testing Your Agents - Unit tests, integration tests, test coverage</li> </ol>"},{"location":"02-local-development/#key-development-tools","title":"Key Development Tools","text":""},{"location":"02-local-development/#1-virtual-environments","title":"1. Virtual Environments","text":"<p>Keep your dependencies isolated:</p> <pre><code># Create project-specific environment\npython -m venv .venv\nsource .venv/bin/activate\n\n# Install development dependencies\nmake install-dev\n</code></pre>"},{"location":"02-local-development/#2-environment-variables","title":"2. Environment Variables","text":"<p>Use <code>.env</code> files for configuration:</p> <pre><code># .env\nMCP_MESH_REGISTRY_URL=http://localhost:8000\nMCP_MESH_LOG_LEVEL=DEBUG\nMCP_MESH_HTTP_PORT=8081\nDATABASE_URL=postgresql://user:pass@localhost/mcp_mesh\n</code></pre>"},{"location":"02-local-development/#3-development-registry","title":"3. Development Registry","text":"<p>Run registry with hot reload:</p> <pre><code># Start registry with automatic database setup\n./bin/meshctl start-registry\n\n# PostgreSQL for production-like testing\ndocker run -d -p 5432:5432 \\\n  -e POSTGRES_DB=mcp_mesh \\\n  -e POSTGRES_PASSWORD=password \\\n  postgres:15\n</code></pre>"},{"location":"02-local-development/#4-code-quality-tools","title":"4. Code Quality Tools","text":"<p>Maintain high code quality:</p> <pre><code># Format code\nblack src/ tests/\n\n# Sort imports\nisort src/ tests/\n\n# Lint code\nruff check src/\n\n# Type checking\nmypy src/\n</code></pre>"},{"location":"02-local-development/#quick-start-commands","title":"Quick Start Commands","text":"<p>Get started quickly with these commands:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-org/weather-agent\ncd weather-agent\n\n# Set up development environment\nmake dev-setup  # or ./scripts/setup-dev.sh\n\n# Start all services\nmake dev-start  # Starts registry, database, and monitoring\n\n# Run your agent\n./bin/meshctl start examples/simple/weather_agent.py\n\n# Run tests\nmake test       # All tests\nmake test-unit  # Unit tests only\nmake test-integration  # Integration tests\n</code></pre>"},{"location":"02-local-development/#development-best-practices","title":"Development Best Practices","text":""},{"location":"02-local-development/#1-project-structure","title":"1. Project Structure","text":"<p>Organize your agent projects consistently:</p> <pre><code>my-agent/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 agent.py           # Main agent code\n\u2502   \u251c\u2500\u2500 handlers.py        # Request handlers\n\u2502   \u2514\u2500\u2500 utils.py          # Utility functions\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 integration/\n\u2502   \u2514\u2500\u2500 conftest.py       # pytest configuration\n\u251c\u2500\u2500 configs/\n\u2502   \u251c\u2500\u2500 development.yaml\n\u2502   \u251c\u2500\u2500 staging.yaml\n\u2502   \u2514\u2500\u2500 production.yaml\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 setup-dev.sh\n\u2502   \u2514\u2500\u2500 run-tests.sh\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 requirements-dev.txt\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"02-local-development/#2-configuration-management","title":"2. Configuration Management","text":"<p>Use environment-specific configurations:</p> <pre><code># config.py\nimport os\nfrom pathlib import Path\n\nENV = os.getenv(\"MCP_MESH_ENV\", \"development\")\n\n# Load environment-specific config\nconfig_path = Path(f\"configs/{ENV}.yaml\")\n</code></pre>"},{"location":"02-local-development/#3-logging-strategy","title":"3. Logging Strategy","text":"<p>Implement comprehensive logging:</p> <pre><code>import logging\nimport structlog\n\n# Configure structured logging\nstructlog.configure(\n    processors=[\n        structlog.stdlib.filter_by_level,\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.TimeStamper(fmt=\"iso\"),\n        structlog.processors.StackInfoRenderer(),\n        structlog.processors.format_exc_info,\n        structlog.dev.ConsoleRenderer()\n    ],\n    context_class=dict,\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    cache_logger_on_first_use=True,\n)\n\nlogger = structlog.get_logger()\n</code></pre>"},{"location":"02-local-development/#4-error-handling","title":"4. Error Handling","text":"<p>Implement robust error handling:</p> <pre><code># Import mesh decorators and handle errors gracefully\nfrom mesh import agent, tool\n\n@tool(\n    capability=\"robust_service\",\n    dependencies=[\"external_service\"]\n)\ndef robust_operation(data: str, external_service=None):\n    try:\n        if external_service:\n            result = external_service(data)\n            return result\n        else:\n            logger.warning(\"External service unavailable, using fallback\")\n            return {\"result\": \"fallback_data\", \"source\": \"local\"}\n    except Exception as e:\n        logger.error(f\"Operation failed: {e}\")\n        raise\n</code></pre>"},{"location":"02-local-development/#common-development-scenarios","title":"Common Development Scenarios","text":""},{"location":"02-local-development/#scenario-1-multi-agent-development","title":"Scenario 1: Multi-Agent Development","text":"<p>Develop multiple interacting agents:</p> <pre><code># Terminal 1: Registry\n./bin/meshctl start-registry\n\n# Terminal 2: Database Agent\n./bin/meshctl start examples/simple/database_agent.py\n\n# Terminal 3: Cache Agent\n./bin/meshctl start examples/simple/cache_agent.py\n\n# Terminal 4: API Agent\n./bin/meshctl start examples/simple/api_agent.py\n</code></pre>"},{"location":"02-local-development/#scenario-2-testing-integration","title":"Scenario 2: Testing Integration","text":"<p>Test agent interactions:</p> <pre><code># tests/integration/test_weather_integration.py\nimport pytest\nimport subprocess\nimport requests\nimport time\n\n@pytest.fixture\ndef test_harness():\n    # Start test registry\n    registry_proc = subprocess.Popen([\n        \"./bin/meshctl\", \"start-registry\", \"--port\", \"18000\"\n    ])\n    time.sleep(2)\n\n    # Start test agents\n    weather_proc = subprocess.Popen([\n        \"./bin/meshctl\", \"start\", \"examples/simple/weather_agent.py\"\n    ], env={\"MCP_MESH_REGISTRY_URL\": \"http://localhost:18000\"})\n\n    time.sleep(3)\n    yield\n\n    # Cleanup\n    weather_proc.terminate()\n    registry_proc.terminate()\n\ndef test_weather_integration(test_harness):\n    response = requests.get(\"http://localhost:18000/agents\")\n    agents = response.json()\n    assert any(a[\"name\"] == \"weather-agent\" for a in agents)\n</code></pre>"},{"location":"02-local-development/#scenario-3-performance-profiling","title":"Scenario 3: Performance Profiling","text":"<p>Profile your agents:</p> <pre><code>import cProfile\nimport pstats\n\nprofiler = cProfile.Profile()\nprofiler.enable()\n\n# Your agent code here\n\nprofiler.disable()\nstats = pstats.Stats(profiler).sort_stats('cumulative')\nstats.print_stats()\n</code></pre>"},{"location":"02-local-development/#development-tools-integration","title":"Development Tools Integration","text":""},{"location":"02-local-development/#vs-code-configuration","title":"VS Code Configuration","text":"<p><code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.5.6\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Agent\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/bin/meshctl\",\n      \"args\": [\"start\", \"examples/simple/weather_agent.py\"],\n      \"env\": {\n        \"MCP_MESH_LOG_LEVEL\": \"DEBUG\",\n        \"PYTHONDONTWRITEBYTECODE\": \"1\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"02-local-development/#pycharm-configuration","title":"PyCharm Configuration","text":"<ol> <li>Set up Python interpreter with virtual environment</li> <li>Configure environment variables in Run Configuration</li> <li>Enable pytest as test runner</li> <li>Set up code style settings</li> </ol>"},{"location":"02-local-development/#troubleshooting-development-issues","title":"Troubleshooting Development Issues","text":""},{"location":"02-local-development/#registry-connection-issues","title":"Registry Connection Issues","text":"<pre><code># Check if registry is running\ncurl http://localhost:8000/health\n\n# Check what's using port 8000\nlsof -i :8000\n\n# Restart with verbose logging\nMCP_MESH_LOG_LEVEL=DEBUG ./bin/meshctl start-registry\n</code></pre>"},{"location":"02-local-development/#agent-registration-failures","title":"Agent Registration Failures","text":"<pre><code># Enable debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Check registration details\nlogger.debug(\"registration_attempt\",\n    endpoint=agent.endpoint,\n    capabilities=agent.capabilities\n)\n</code></pre>"},{"location":"02-local-development/#dependency-resolution-problems","title":"Dependency Resolution Problems","text":"<pre><code># List all registered agents\ncurl http://localhost:8000/agents | jq\n\n# Check registry health\ncurl http://localhost:8000/health | jq\n</code></pre>"},{"location":"02-local-development/#ready-to-dive-deeper","title":"Ready to Dive Deeper?","text":"<p>Now that you understand the development landscape, let's set up your environment:</p> <p>Development Environment Setup \u2192</p> <p>\ud83d\udca1 Pro Tip: Use <code>make</code> commands or shell scripts to standardize common development tasks across your team.</p> <p>\ud83d\udcda Note: This section focuses on Python agent development. For Go component development (like the registry), see our Go Development Guide.</p>"},{"location":"02-local-development/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"02-local-development/#common-development-issues","title":"Common Development Issues","text":"<ol> <li>Hot reload not working - Check file watcher permissions and patterns</li> <li>IDE not recognizing imports - Configure Python interpreter to use virtual environment</li> <li>Database connection errors - Verify PostgreSQL/SQLite is running and accessible</li> <li>Test failures in CI but not locally - Check for environment-specific dependencies</li> <li>Debugging not hitting breakpoints - Disable hot reload when debugging</li> </ol> <p>For comprehensive solutions, see our Development Troubleshooting Guide.</p>"},{"location":"02-local-development/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Hot reload: Some changes (decorators, imports) require manual restart</li> <li>Windows development: File watching may be slower than Linux/macOS</li> <li>SQLite concurrency: Limited write concurrency for development</li> <li>Mock limitations: Some MCP features hard to mock locally</li> <li>IDE support: Limited autocomplete for injected dependencies</li> </ul>"},{"location":"02-local-development/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Create development container (devcontainer) configuration</li> <li> Add Makefile generator for new projects</li> <li> Implement local service mesh visualization</li> <li> Create development proxy for remote services</li> <li> Add performance regression detection</li> <li> Support for local Kubernetes development (kind/k3s)</li> <li> Create agent scaffolding CLI tool</li> <li> Add development metrics dashboard</li> </ul>"},{"location":"03-docker-deployment/","title":"Docker Deployment","text":"<p>Package and run MCP Mesh agents in containers for consistent, portable deployments</p>"},{"location":"03-docker-deployment/#overview","title":"Overview","text":"<p>Docker provides a consistent environment for running MCP Mesh agents across different systems. This section covers building Docker images for your agents, running multi-agent systems with Docker Compose, and preparing for container orchestration platforms.</p> <p>Whether you're containerizing a single agent or building a complex multi-service mesh, Docker ensures your agents run the same way everywhere - from your laptop to production servers.</p>"},{"location":"03-docker-deployment/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you will:</p> <ul> <li>\u2705 Build optimized Docker images for MCP Mesh agents</li> <li>\u2705 Configure multi-agent systems with Docker Compose</li> <li>\u2705 Implement service discovery in containerized environments</li> <li>\u2705 Manage persistent data and configuration</li> <li>\u2705 Set up networking for agent communication</li> <li>\u2705 Prepare for Kubernetes deployment</li> </ul>"},{"location":"03-docker-deployment/#why-docker-for-mcp-mesh","title":"Why Docker for MCP Mesh?","text":"<p>Docker solves several challenges in distributed agent deployment:</p> <ol> <li>Consistency: Same environment everywhere, no \"works on my machine\"</li> <li>Isolation: Agents run in separate containers with defined resources</li> <li>Portability: Move from development to production seamlessly</li> <li>Scalability: Easy to run multiple instances of agents</li> <li>Dependency Management: All dependencies packaged with the agent</li> </ol>"},{"location":"03-docker-deployment/#docker-architecture-for-mcp-mesh","title":"Docker Architecture for MCP Mesh","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Docker Host                               \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Registry        \u2502  \u2502  Weather Agent   \u2502  \u2502  System     \u2502 \u2502\n\u2502  \u2502  Container       \u2502  \u2502  Container       \u2502  \u2502  Agent      \u2502 \u2502\n\u2502  \u2502                  \u2502  \u2502                  \u2502  \u2502  Container  \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\n\u2502  \u2502  \u2502 Go Registry \u2502 \u2502  \u2502  \u2502 Python Agent\u2502 \u2502  \u2502  \u2502 Python \u2502\u2502 \u2502\n\u2502  \u2502  \u2502 PostgreSQL  \u2502 \u2502  \u2502  \u2502 MCP Mesh    \u2502 \u2502  \u2502  \u2502 Agent  \u2502\u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502           \u2502                      \u2502                    \u2502       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502                   Docker Network (mesh-net)              \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"03-docker-deployment/#section-contents","title":"Section Contents","text":"<ol> <li>Building Docker Images - Create optimized images for agents</li> <li>Docker Compose Setup - Orchestrate multi-agent systems</li> <li>Multi-Agent Deployment - Run complex agent networks</li> <li>Networking and Service Discovery - Container communication</li> <li>Persistent Storage - Data persistence strategies</li> </ol>"},{"location":"03-docker-deployment/#quick-start-example","title":"Quick Start Example","text":"<p>Here's a complete Docker Compose setup to get you started:</p> <pre><code># docker-compose.yml\nversion: \"3.8\"\n\nservices:\n  registry:\n    build:\n      context: .\n      dockerfile: docker/registry/Dockerfile\n    ports:\n      - \"8000:8000\"\n    environment:\n      MCP_MESH_DB_TYPE: postgresql\n      MCP_MESH_DB_HOST: postgres\n      MCP_MESH_DB_NAME: mcp_mesh\n      MCP_MESH_DB_USER: postgres\n      MCP_MESH_DB_PASSWORD: postgres\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: mcp_mesh\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  system-agent:\n    build:\n      context: .\n      dockerfile: docker/agent/Dockerfile\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/system_agent.py\"]\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n    depends_on:\n      - registry\n\n  weather-agent:\n    build:\n      context: .\n      dockerfile: docker/agent/Dockerfile\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/weather_agent.py\"]\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n    depends_on:\n      - registry\n      - system-agent\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  default:\n    name: mesh-net\n</code></pre> <p>Run it with:</p> <pre><code>docker-compose up -d\ndocker-compose logs -f\n</code></pre>"},{"location":"03-docker-deployment/#key-concepts-for-docker-deployment","title":"Key Concepts for Docker Deployment","text":""},{"location":"03-docker-deployment/#1-image-layers-and-caching","title":"1. Image Layers and Caching","text":"<p>Build efficient images with proper layering:</p> <pre><code># Good: Layers that change less frequently first\nFROM python:3.11-slim\nWORKDIR /app\n\n# Install MCP Mesh from source\nCOPY . .\nRUN make install-dev\n\n# Run agent\nCMD [\"./bin/meshctl\", \"start\", \"examples/simple/agent.py\"]\n</code></pre>"},{"location":"03-docker-deployment/#2-environment-configuration","title":"2. Environment Configuration","text":"<p>Use environment variables for configuration:</p> <pre><code># Development\ndocker run -e MCP_MESH_LOG_LEVEL=DEBUG my-agent\n\n# Production\ndocker run -e MCP_MESH_LOG_LEVEL=INFO my-agent\n</code></pre>"},{"location":"03-docker-deployment/#3-health-checks","title":"3. Health Checks","text":"<p>Ensure containers are ready before dependent services start:</p> <pre><code>HEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost:8081/health || exit 1\n</code></pre>"},{"location":"03-docker-deployment/#development-workflow-with-docker","title":"Development Workflow with Docker","text":"<ol> <li>Build Once, Run Anywhere</li> </ol> <pre><code>docker build -t my-agent:latest .\ndocker run my-agent:latest\n</code></pre> <ol> <li>Local Development with Bind Mounts</li> </ol> <pre><code>docker run -v $(pwd)/agents:/app/agents my-agent:latest\n</code></pre> <ol> <li>Multi-Stage Builds for Optimization</li> </ol> <pre><code>FROM python:3.11 AS builder\n# Build stage\n\nFROM python:3.11-slim\n# Runtime stage\n</code></pre>"},{"location":"03-docker-deployment/#best-practices","title":"Best Practices","text":"<ul> <li>\ud83d\udd12 Security: Never embed secrets in images</li> <li>\ud83d\udce6 Size: Use slim base images and multi-stage builds</li> <li>\ud83c\udff7\ufe0f Tagging: Use semantic versioning for image tags</li> <li>\ud83d\udcdd Documentation: Include README in image with usage instructions</li> <li>\ud83d\udd04 Updates: Regularly update base images for security patches</li> </ul>"},{"location":"03-docker-deployment/#ready-to-start","title":"Ready to Start?","text":"<p>Begin with Building Docker Images \u2192</p>"},{"location":"03-docker-deployment/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"03-docker-deployment/#common-docker-issues","title":"Common Docker Issues","text":"<ol> <li> <p>Container can't connect to registry</p> </li> <li> <p>Check network configuration</p> </li> <li>Verify service names in compose file</li> <li> <p>Ensure registry is healthy before agents start</p> </li> <li> <p>Agent exits immediately</p> </li> <li> <p>Check logs: <code>docker logs &lt;container&gt;</code></p> </li> <li>Verify CMD or ENTRYPOINT is correct</li> <li> <p>Ensure required environment variables are set</p> </li> <li> <p>Permission denied errors</p> </li> <li>Run containers as non-root user</li> <li>Check file permissions in image</li> <li>Use proper volume mount permissions</li> </ol> <p>For detailed solutions, see our Docker Troubleshooting Guide.</p>"},{"location":"03-docker-deployment/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Windows Containers: Limited support, use Linux containers</li> <li>ARM Architecture: Some base images may not support ARM</li> <li>File Watching: Hot reload doesn't work well in containers</li> <li>Networking: Container networking adds complexity to debugging</li> </ul>"},{"location":"03-docker-deployment/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Kubernetes deployment examples</li> <li> Create automated image vulnerability scanning</li> <li> Add examples for cloud container registries</li> <li> Document multi-architecture builds</li> <li> Add container security best practices guide</li> </ul> <p>\ud83d\udca1 Tip: Use Docker BuildKit for faster builds: <code>DOCKER_BUILDKIT=1 docker build .</code></p> <p>\ud83d\udcda Reference: Official Docker Documentation</p> <p>\ud83c\udfaf Next Step: Ready to containerize your agents? Start with Building Docker Images</p>"},{"location":"04-kubernetes-basics/","title":"Kubernetes Basics","text":"<p>Deploy MCP Mesh to Kubernetes for production-grade container orchestration</p>"},{"location":"04-kubernetes-basics/#overview","title":"Overview","text":"<p>Kubernetes provides the ideal platform for running MCP Mesh at scale. This section covers deploying MCP Mesh components to Kubernetes, from local development with Minikube to production-ready configurations. You'll learn about Custom Resource Definitions (CRDs), StatefulSets for the registry, and best practices for agent deployment.</p> <p>By the end of this section, you'll be able to deploy a complete MCP Mesh system on Kubernetes with high availability, automatic scaling, and proper resource management.</p>"},{"location":"04-kubernetes-basics/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you will:</p> <ul> <li>\u2705 Set up a local Kubernetes environment with Minikube</li> <li>\u2705 Deploy the MCP Mesh registry as a StatefulSet</li> <li>\u2705 Deploy agents using kubectl and manifests</li> <li>\u2705 Configure service discovery in Kubernetes</li> <li>\u2705 Implement health checks and resource limits</li> <li>\u2705 Troubleshoot common Kubernetes deployment issues</li> </ul>"},{"location":"04-kubernetes-basics/#why-kubernetes-for-mcp-mesh","title":"Why Kubernetes for MCP Mesh?","text":"<p>Kubernetes excels at running distributed systems like MCP Mesh:</p> <ol> <li>Orchestration: Automatic placement and scaling of agents</li> <li>Service Discovery: Built-in DNS and service abstractions</li> <li>Self-Healing: Automatic restarts and rescheduling</li> <li>Resource Management: CPU and memory limits per agent</li> <li>Configuration Management: ConfigMaps and Secrets</li> <li>Rolling Updates: Zero-downtime deployments</li> </ol>"},{"location":"04-kubernetes-basics/#kubernetes-architecture-for-mcp-mesh","title":"Kubernetes Architecture for MCP Mesh","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Kubernetes Cluster                           \u2502\n\u2502                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502                        mcp-mesh namespace                     \u2502   \u2502\n\u2502  \u2502                                                               \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   \u2502\n\u2502  \u2502  \u2502 Registry         \u2502  \u2502 Weather Agent    \u2502  \u2502 System Agent \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 StatefulSet      \u2502  \u2502 Deployment       \u2502  \u2502 Deployment   \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502                  \u2502  \u2502                  \u2502  \u2502              \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u2502 Pod 0       \u2502  \u2502  \u2502 \u2502 Pod 1       \u2502  \u2502  \u2502 \u2502 Pod 1    \u2502 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u2502 Leader      \u2502  \u2502  \u2502 \u2502 Replica     \u2502  \u2502  \u2502 \u2502 Replica  \u2502 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u2502 Pod 1       \u2502  \u2502  \u2502 \u2502 Pod 2       \u2502  \u2502  \u2502 \u2502 Pod 2    \u2502 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u2502 Follower    \u2502  \u2502  \u2502 \u2502 Replica     \u2502  \u2502  \u2502 \u2502 Replica  \u2502 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502  \u2502                                                               \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   \u2502\n\u2502  \u2502  \u2502                    Services &amp; Ingress                    \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502  - mcp-mesh-registry (ClusterIP)                         \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502  - weather-agent (ClusterIP)                             \u2502 \u2502   \u2502\n\u2502  \u2502  \u2502  - mcp-mesh-ingress (LoadBalancer/NodePort)            \u2502 \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"04-kubernetes-basics/#section-contents","title":"Section Contents","text":"<ol> <li>Minikube Setup - Local Kubernetes development</li> <li>Local Registry Configuration - Deploy registry to K8s</li> <li>Deploying with kubectl - Manual deployment process</li> <li>Service Discovery in K8s - DNS and service communication</li> <li>Troubleshooting K8s Deployments - Common issues and solutions</li> </ol>"},{"location":"04-kubernetes-basics/#quick-start-example","title":"Quick Start Example","text":"<p>Deploy MCP Mesh to Kubernetes in minutes:</p> <pre><code># 1. Start Minikube (or use existing cluster)\nminikube start --cpus=4 --memory=8192\n\n# 2. Deploy base infrastructure (registry + database)\nkubectl apply -k k8s/base/\n\n# 3. Wait for registry to be ready\nkubectl wait --for=condition=ready pod -l app.kubernetes.io/name=mcp-mesh-registry -n mcp-mesh --timeout=300s\n\n# 4. Add agents using examples (optional)\n# Create agent code ConfigMap from examples\nkubectl create configmap agent-code-examples \\\n  --from-file=hello_world.py=examples/simple/hello_world.py \\\n  --from-file=system_agent.py=examples/simple/system_agent.py \\\n  -n mcp-mesh\n\n# Copy and deploy agent templates\ncp k8s/base/agents/example-hello-world-deployment.yaml.template hello-world-deployment.yaml\ncp k8s/base/agents/example-system-agent-deployment.yaml.template system-agent-deployment.yaml\nkubectl apply -f hello-world-deployment.yaml\nkubectl apply -f system-agent-deployment.yaml\n\n# 5. Check deployment status\nkubectl get all -n mcp-mesh\n\n# 6. Test connectivity (port forward and test)\nkubectl port-forward -n mcp-mesh svc/mcp-mesh-registry 8000:8000 &amp;\n./bin/meshctl list agents\n</code></pre>"},{"location":"04-kubernetes-basics/#key-kubernetes-concepts-for-mcp-mesh","title":"Key Kubernetes Concepts for MCP Mesh","text":""},{"location":"04-kubernetes-basics/#1-custom-resource-definitions-crds","title":"1. Custom Resource Definitions (CRDs)","text":"<p>MCP Mesh provides a CRD for defining agents:</p> <pre><code>apiVersion: mesh.mcp.io/v1alpha1\nkind: MCPAgent\nmetadata:\n  name: weather-agent\n  namespace: mcp-mesh\nspec:\n  script: /app/agents/weather_agent.py\n  replicas: 3\n  capabilities:\n    - name: weather_forecast\n      version: \"1.0.0\"\n  dependencies:\n    - name: system_time\n      version: \"&gt;=1.0.0\"\n</code></pre>"},{"location":"04-kubernetes-basics/#2-statefulsets-for-registry","title":"2. StatefulSets for Registry","text":"<p>The registry uses StatefulSet for stable network identity and persistent storage. Based on the actual K8s examples:</p> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\n  labels:\n    app.kubernetes.io/name: mcp-mesh-registry\n    app.kubernetes.io/component: registry\nspec:\n  serviceName: mcp-mesh-registry-headless\n  replicas: 1 # Can be scaled for HA\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: mcp-mesh-registry\n      app.kubernetes.io/component: registry\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: mcp-mesh-registry\n        app.kubernetes.io/component: registry\n    spec:\n      serviceAccountName: mcp-mesh-registry\n      containers:\n        - name: registry\n          image: mcp-mesh-base:latest\n          ports:\n            - name: http\n              containerPort: 8000 # Registry uses port 8000\n            - name: metrics\n              containerPort: 9090\n          env:\n            # Registry connection - configurable for federated networks\n            - name: MCP_MESH_REGISTRY_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: mcp-agent-config\n                  key: REGISTRY_HOST\n            - name: MCP_MESH_REGISTRY_PORT\n              valueFrom:\n                configMapKeyRef:\n                  name: mcp-agent-config\n                  key: REGISTRY_PORT\n            # \ud83c\udfaf Kubernetes service discovery - auto-detect from labels\n            - name: SERVICE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.labels['app.kubernetes.io/name']\n            - name: NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            - name: DATABASE_TYPE\n              value: \"postgres\" # Or sqlite for simple deployments\n            - name: DATABASE_HOST\n              value: \"mcp-mesh-postgres\"\n          envFrom:\n            - configMapRef:\n                name: mcp-agent-config\n          volumeMounts:\n            - name: data\n              mountPath: /data\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 15\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 10\n            periodSeconds: 5\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n      spec:\n        accessModes: [\"ReadWriteOnce\"]\n        resources:\n          requests:\n            storage: 10Gi\n</code></pre>"},{"location":"04-kubernetes-basics/#3-configmaps-and-secrets","title":"3. ConfigMaps and Secrets","text":"<p>Manage configuration separately from code. Based on actual K8s examples:</p> <pre><code># mcp-agent-config ConfigMap\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-agent-config\n  namespace: mcp-mesh\ndata:\n  REGISTRY_HOST: \"mcp-mesh-registry\" # Service name for registry\n  REGISTRY_PORT: \"8000\" # Registry service port\n  MCP_MESH_REGISTRY_URL: \"http://mcp-mesh-registry:8000\"\n  LOG_LEVEL: \"info\"\n  HEALTH_CHECK_INTERVAL: \"30s\"\n</code></pre> <p>Create configuration using kubectl:</p> <pre><code># Create config from YAML\nkubectl apply -f mcp-agent-config.yaml\n\n# Create secrets for sensitive data\nkubectl create secret generic mcp-agent-secrets \\\n  --from-literal=api-key=secret123 \\\n  --from-literal=auth-token=dev-token-change-in-production \\\n  -n mcp-mesh\n\n# Create agent code ConfigMap from examples\nkubectl create configmap agent-code-examples \\\n  --from-file=hello_world.py=examples/simple/hello_world.py \\\n  --from-file=system_agent.py=examples/simple/system_agent.py \\\n  -n mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/#best-practices","title":"Best Practices","text":"<ul> <li>\ud83d\udce6 Use Namespaces: Isolate MCP Mesh in its own namespace</li> <li>\ud83c\udff7\ufe0f Label Everything: Consistent labels for resource selection</li> <li>\ud83d\udcbe Persistent Storage: Use PVCs for stateful components</li> <li>\ud83d\udd12 RBAC: Implement proper role-based access control</li> <li>\ud83d\udcca Resource Limits: Set requests and limits for all containers</li> </ul>"},{"location":"04-kubernetes-basics/#ready-to-deploy","title":"Ready to Deploy?","text":"<p>Start with Minikube Setup \u2192</p>"},{"location":"04-kubernetes-basics/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"04-kubernetes-basics/#quick-diagnostic-commands","title":"Quick Diagnostic Commands","text":"<p>Run this comprehensive diagnostic script to identify issues:</p> <pre><code>#!/bin/bash\n# mcp-mesh-k8s-diagnostics.sh\nNAMESPACE=${1:-mcp-mesh}\n\necho \"MCP Mesh Kubernetes Diagnostics for namespace: $NAMESPACE\"\necho \"=======================================================\"\n\n# Check namespace and pods\nkubectl get namespace $NAMESPACE\nkubectl get pods -n $NAMESPACE -o wide\nkubectl get pods -n $NAMESPACE --field-selector=status.phase!=Running,status.phase!=Succeeded\n\n# Check services and registry\nkubectl get svc,endpoints -n $NAMESPACE\nkubectl get statefulset,pod,svc -n $NAMESPACE -l app.kubernetes.io/name=mcp-mesh-registry\n\n# Check recent events and resource usage\nkubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -20\nkubectl top nodes\nkubectl top pods -n $NAMESPACE\n</code></pre>"},{"location":"04-kubernetes-basics/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Pods stuck in Pending</p> </li> <li> <p>Check resource availability: <code>kubectl describe nodes</code></p> </li> <li>Verify PVC binding: <code>kubectl get pvc -n mcp-mesh</code></li> <li> <p>Check storage classes: <code>kubectl get storageclass</code></p> </li> <li> <p>Service discovery not working</p> </li> <li> <p>Test DNS: <code>kubectl exec -it &lt;pod&gt; -- nslookup mcp-mesh-registry</code></p> </li> <li>Check service endpoints: <code>kubectl get endpoints -n mcp-mesh</code></li> <li> <p>Verify labels match: <code>kubectl get pods --show-labels -n mcp-mesh</code></p> </li> <li> <p>Registry connection failures</p> </li> <li> <p>Check registry status: <code>kubectl get pods -l app.kubernetes.io/name=mcp-mesh-registry -n mcp-mesh</code></p> </li> <li>View registry logs: <code>kubectl logs -f mcp-mesh-registry-0 -n mcp-mesh</code></li> <li> <p>Test registry health: <code>kubectl port-forward svc/mcp-mesh-registry 8000:8000 &amp;&amp; curl localhost:8000/health</code></p> </li> <li> <p>Pods in CrashLoopBackOff</p> </li> <li>Check logs: <code>kubectl logs &lt;pod-name&gt; -n mcp-mesh --previous</code></li> <li>Check environment variables: <code>kubectl exec &lt;pod-name&gt; -n mcp-mesh -- env</code></li> <li>Verify ConfigMap/Secret exists: <code>kubectl get configmap,secret -n mcp-mesh</code></li> </ol> <p>For comprehensive troubleshooting, see Troubleshooting K8s Deployments.</p>"},{"location":"04-kubernetes-basics/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Minikube: Limited resources compared to real clusters</li> <li>Windows: Some networking features require WSL2</li> <li>ARM64: Limited support for some container images</li> <li>PersistentVolumes: Local storage limitations in development</li> </ul>"},{"location":"04-kubernetes-basics/#key-kubernetes-patterns-for-mcp-mesh","title":"Key Kubernetes Patterns for MCP Mesh","text":""},{"location":"04-kubernetes-basics/#service-naming-and-auto-detection","title":"Service Naming and Auto-Detection","text":"<p>Based on the actual K8s examples, MCP Mesh follows these critical patterns:</p> <ul> <li>Service Names: <code>mcp-mesh-registry</code> (port 8000), <code>mcp-mesh-hello-world</code> (port 8080), <code>mcp-mesh-system-agent</code> (port 8080)</li> <li>Label Matching: Service name MUST exactly match <code>app.kubernetes.io/name</code> label value for auto-detection</li> <li>Environment Injection: <code>SERVICE_NAME</code> and <code>NAMESPACE</code> auto-detected from pod metadata</li> <li>ConfigMap-based Registry Config: Registry host/port configurable via <code>mcp-agent-config</code></li> </ul>"},{"location":"04-kubernetes-basics/#essential-environment-variables","title":"Essential Environment Variables","text":"<pre><code>env:\n  # \ud83c\udfaf Kubernetes service discovery - auto-detect from labels\n  - name: SERVICE_NAME\n    valueFrom:\n      fieldRef:\n        fieldPath: metadata.labels['app.kubernetes.io/name']\n  - name: NAMESPACE\n    valueFrom:\n      fieldRef:\n        fieldPath: metadata.namespace\n  # Registry connection - configurable for federated networks\n  - name: MCP_MESH_REGISTRY_HOST\n    valueFrom:\n      configMapKeyRef:\n        name: mcp-agent-config\n        key: REGISTRY_HOST\n  - name: MCP_MESH_REGISTRY_PORT\n    valueFrom:\n      configMapKeyRef:\n        name: mcp-agent-config\n        key: REGISTRY_PORT\n</code></pre>"},{"location":"04-kubernetes-basics/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Helm chart deployment option (see Helm deployment guide)</li> <li> Document multi-cluster deployment patterns</li> <li> Add service mesh integration guide (Istio/Linkerd)</li> <li> Create automated testing for K8s deployments</li> <li> Add GPU support documentation</li> <li> Document backup and disaster recovery procedures</li> </ul> <p>\ud83d\udca1 Tip: Use <code>kubectl explain</code> to understand any Kubernetes resource: <code>kubectl explain deployment.spec</code></p> <p>\ud83d\udcda Reference: Kubernetes Documentation</p> <p>\ud83c\udfaf Next Step: Ready to deploy locally? Start with Minikube Setup</p>"},{"location":"06-helm-deployment/","title":"Helm Deployment","text":"<p>Deploy MCP Mesh using Helm charts for simplified, repeatable Kubernetes deployments</p>"},{"location":"06-helm-deployment/#overview","title":"Overview","text":"<p>Helm is the package manager for Kubernetes, making it easy to deploy, upgrade, and manage MCP Mesh installations. This section covers using the official MCP Mesh Helm charts, customizing deployments with values files, and managing multi-environment configurations.</p> <p>With Helm, you can deploy a complete MCP Mesh system with a single command, manage configuration changes declaratively, and easily upgrade or rollback deployments.</p>"},{"location":"06-helm-deployment/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you will:</p> <ul> <li>\u2705 Install and configure Helm for MCP Mesh deployments</li> <li>\u2705 Deploy the registry and agents using Helm charts</li> <li>\u2705 Customize deployments with values files</li> <li>\u2705 Manage multi-environment configurations</li> <li>\u2705 Perform upgrades and rollbacks</li> <li>\u2705 Create your own Helm charts for custom agents</li> </ul>"},{"location":"06-helm-deployment/#why-helm-for-mcp-mesh","title":"Why Helm for MCP Mesh?","text":"<p>Helm provides significant advantages for MCP Mesh deployments:</p> <ol> <li>Templating: Reuse configurations across environments</li> <li>Dependency Management: Automatically deploy required components</li> <li>Versioning: Track and rollback configuration changes</li> <li>Values Management: Separate configuration from templates</li> <li>Hooks: Automate pre/post deployment tasks</li> <li>Package Distribution: Share agents as Helm charts</li> </ol>"},{"location":"06-helm-deployment/#mcp-mesh-helm-architecture","title":"MCP Mesh Helm Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     MCP Mesh Helm Charts                         \u2502\n\u2502                                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  mcp-mesh-registry/      \u2502  \u2502  mcp-mesh-agent/         \u2502      \u2502\n\u2502  \u2502  \u251c\u2500\u2500 Chart.yaml          \u2502  \u2502  \u251c\u2500\u2500 Chart.yaml          \u2502      \u2502\n\u2502  \u2502  \u251c\u2500\u2500 values.yaml         \u2502  \u2502  \u251c\u2500\u2500 values.yaml         \u2502      \u2502\n\u2502  \u2502  \u2514\u2500\u2500 templates/          \u2502  \u2502  \u2514\u2500\u2500 templates/          \u2502      \u2502\n\u2502  \u2502      \u251c\u2500\u2500 statefulset.yaml\u2502  \u2502      \u251c\u2500\u2500 deployment.yaml \u2502      \u2502\n\u2502  \u2502      \u251c\u2500\u2500 service.yaml    \u2502  \u2502      \u251c\u2500\u2500 service.yaml    \u2502      \u2502\n\u2502  \u2502      \u251c\u2500\u2500 configmap.yaml  \u2502  \u2502      \u251c\u2500\u2500 configmap.yaml  \u2502      \u2502\n\u2502  \u2502      \u251c\u2500\u2500 secret.yaml     \u2502  \u2502      \u251c\u2500\u2500 secret.yaml     \u2502      \u2502\n\u2502  \u2502      \u251c\u2500\u2500 hpa.yaml        \u2502  \u2502      \u251c\u2500\u2500 hpa.yaml        \u2502      \u2502\n\u2502  \u2502      \u2514\u2500\u2500 ingress.yaml    \u2502  \u2502      \u2514\u2500\u2500 ingress.yaml    \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502                                                                  \u2502\n\u2502  Multiple agent instances can be deployed:                       \u2502\n\u2502  helm install hello-world ./mcp-mesh-agent --set agent.name=... \u2502\n\u2502  helm install system-agent ./mcp-mesh-agent --set agent.name=...\u2502\n\u2502  helm install weather-agent ./mcp-mesh-agent --set agent.name...\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"06-helm-deployment/#section-contents","title":"Section Contents","text":"<ol> <li>Understanding MCP Mesh Helm Charts - Chart structure and components</li> <li>Multi-Agent Deployment - Deploy multiple agents with registry</li> <li>Customizing Values - Configuration management</li> <li>Multi-Environment Deployment - Dev, staging, production</li> <li>Helm Best Practices - Production-ready deployments</li> <li>Troubleshooting - Common issues and solutions</li> </ol>"},{"location":"06-helm-deployment/#quick-start-example","title":"Quick Start Example","text":"<p>Deploy MCP Mesh with Helm using local charts:</p> <pre><code># From the project root directory\ncd helm\n\n# Install the registry first\nhelm install mcp-registry ./mcp-mesh-registry \\\n  --namespace mcp-mesh \\\n  --create-namespace\n\n# Wait for registry to be ready\nkubectl wait --for=condition=available deployment/mcp-registry -n mcp-mesh --timeout=300s\n\n# Install an agent\nhelm install hello-world-agent ./mcp-mesh-agent \\\n  --namespace mcp-mesh \\\n  --set agent.name=hello-world-agent \\\n  --set agent.script=hello_world.py\n\n# Or install multiple agents\nhelm install system-agent ./mcp-mesh-agent \\\n  --namespace mcp-mesh \\\n  --set agent.name=system-agent \\\n  --set agent.script=system_agent.py\n</code></pre>"},{"location":"06-helm-deployment/#key-helm-concepts-for-mcp-mesh","title":"Key Helm Concepts for MCP Mesh","text":""},{"location":"06-helm-deployment/#1-values-files","title":"1. Values Files","text":"<p>Customize deployments without modifying charts:</p> <pre><code># registry-production.yaml\nreplicaCount: 3\npersistence:\n  enabled: true\n  size: 50Gi\n  storageClass: \"fast-ssd\"\nresources:\n  requests:\n    memory: \"1Gi\"\n    cpu: \"500m\"\n  limits:\n    memory: \"2Gi\"\n    cpu: \"1000m\"\n\n# agent-production.yaml\nreplicaCount: 5\nautoscaling:\n  enabled: true\n  minReplicas: 5\n  maxReplicas: 20\n  targetCPUUtilizationPercentage: 80\nresources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"250m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"500m\"\n</code></pre>"},{"location":"06-helm-deployment/#2-chart-dependencies","title":"2. Chart Dependencies","text":"<p>The MCP Mesh charts can optionally include external dependencies:</p> <pre><code># Chart.yaml for mcp-mesh-registry\ndependencies:\n  - name: postgresql\n    version: \"12.x.x\"\n    repository: \"https://charts.bitnami.com/bitnami\"\n    condition: postgresql.enabled\n\n  - name: prometheus\n    version: \"15.x.x\"\n    repository: \"https://prometheus-community.github.io/helm-charts\"\n    condition: monitoring.prometheus.enabled\n</code></pre>"},{"location":"06-helm-deployment/#3-helm-hooks","title":"3. Helm Hooks","text":"<p>Automate deployment tasks:</p> <pre><code># templates/pre-install-job.yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  annotations:\n    \"helm.sh/hook\": pre-install\n    \"helm.sh/hook-weight\": \"1\"\n    \"helm.sh/hook-delete-policy\": before-hook-creation,hook-succeeded\nspec:\n  template:\n    spec:\n      containers:\n        - name: registry-init\n          image: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag }}{% endraw %}\"\n          command: [\"sh\", \"-c\", \"echo 'Initializing MCP Mesh Registry...'\"]\n      restartPolicy: Never\n</code></pre>"},{"location":"06-helm-deployment/#best-practices","title":"Best Practices","text":"<ul> <li>\ud83d\udccb Use Values Files: Never edit templates directly</li> <li>\ud83d\udd10 Manage Secrets: Use Helm secrets or external secret managers</li> <li>\ud83d\udce6 Version Everything: Pin chart and image versions</li> <li>\ud83c\udff7\ufe0f Label Consistently: Use Helm's standard labels</li> <li>\ud83d\udcca Monitor Releases: Track deployment history</li> </ul>"},{"location":"06-helm-deployment/#ready-to-deploy-with-helm","title":"Ready to Deploy with Helm?","text":"<p>Start with Understanding MCP Mesh Helm Charts \u2192</p>"},{"location":"06-helm-deployment/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"06-helm-deployment/#common-helm-issues","title":"Common Helm Issues","text":"<ol> <li>Release already exists</li> </ol> <pre><code># List releases\nhelm list -n mcp-mesh\n\n# Upgrade existing release\nhelm upgrade mcp-registry mcp-mesh/mcp-mesh-registry -n mcp-mesh\n</code></pre> <ol> <li>Values not taking effect</li> </ol> <pre><code># Debug with dry-run\nhelm install mcp-registry ./mcp-mesh-registry \\\n  --dry-run --debug \\\n  -f values.yaml\n</code></pre> <ol> <li>Chart dependencies not found <pre><code># Update dependencies (if any)\nhelm dependency update ./mcp-mesh-registry\nhelm dependency update ./mcp-mesh-agent\n</code></pre></li> </ol> <p>For detailed solutions, see our Helm Troubleshooting Guide.</p>"},{"location":"06-helm-deployment/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>CRD Management: CRDs require special handling in Helm 3</li> <li>Large Releases: Kubernetes ConfigMap size limits</li> <li>Helm 2 vs 3: Significant differences in behavior</li> <li>Namespace Handling: Cross-namespace resources need care</li> </ul>"},{"location":"06-helm-deployment/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Helmfile examples for multi-cluster</li> <li> Create Helm operator documentation</li> <li> Add GitOps integration with Flux/ArgoCD</li> <li> Document Helm plugin development</li> <li> Add chart testing automation</li> </ul> <p>\ud83d\udca1 Tip: Use <code>helm diff</code> plugin to preview changes before upgrading: <code>helm plugin install https://github.com/databus23/helm-diff</code></p> <p>\ud83d\udcda Reference: Helm Documentation</p> <p>\ud83c\udfaf Next Step: Ready to understand the charts? Start with Understanding MCP Mesh Helm Charts</p>"},{"location":"07-observability/","title":"Observability and Monitoring","text":"<p>Monitor and trace your MCP Mesh deployment with built-in distributed tracing</p>"},{"location":"07-observability/#overview","title":"Overview","text":"<p>MCP Mesh includes a built-in distributed tracing system that provides real-time visibility into request flows across your distributed agents. Unlike traditional OpenTelemetry setups, MCP Mesh uses Redis Streams for trace collection and correlation, offering a lightweight, high-performance observability solution.</p>"},{"location":"07-observability/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you will:</p> <ul> <li>\u2705 Enable distributed tracing in MCP Mesh</li> <li>\u2705 Monitor trace events in real-time  </li> <li>\u2705 Query and search completed traces</li> <li>\u2705 Analyze multi-agent interactions</li> <li>\u2705 Debug performance bottlenecks</li> <li>\u2705 Export traces to external systems</li> </ul>"},{"location":"07-observability/#mcp-mesh-distributed-tracing-architecture","title":"MCP Mesh Distributed Tracing Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    MCP Mesh Observability Stack                  \u2502\n\u2502                                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502                     Visualization Layer                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502  \u2502   Console   \u2502  \u2502     JSON     \u2502  \u2502   REST API   \u2502   \u2502   \u2502\n\u2502  \u2502  \u2502   Export    \u2502  \u2502   Export     \u2502  \u2502  (Queries)   \u2502   \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502                      Processing Layer                     \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502  \u2502    Trace    \u2502  \u2502    Span      \u2502  \u2502    Export    \u2502   \u2502   \u2502\n\u2502  \u2502  \u2502 Correlator  \u2502  \u2502  Correlation \u2502  \u2502   Pipeline   \u2502   \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502                    Collection Layer                       \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502  \u2502   Registry  \u2502  \u2502 Redis Streams\u2502  \u2502   Consumer   \u2502   \u2502   \u2502\n\u2502  \u2502  \u2502  (Consumer) \u2502  \u2502 (mcp-mesh:   \u2502  \u2502    Group     \u2502   \u2502   \u2502\n\u2502  \u2502  \u2502             \u2502  \u2502   traces)    \u2502  \u2502              \u2502   \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502                    MCP Mesh Components                    \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502  \u2502   Python    \u2502  \u2502      Go      \u2502  \u2502    Redis     \u2502   \u2502   \u2502\n\u2502  \u2502  \u2502   Agents    \u2502  \u2502   Registry   \u2502  \u2502   Streams    \u2502   \u2502   \u2502\n\u2502  \u2502  \u2502 (Publishers)\u2502  \u2502 (Consumer)   \u2502  \u2502  (Storage)   \u2502   \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"07-observability/#quick-start","title":"Quick Start","text":"<p>Enable distributed tracing in your MCP Mesh deployment:</p>"},{"location":"07-observability/#1-enable-tracing-in-registry","title":"1. Enable Tracing in Registry","text":"<pre><code># Environment configuration\nexport MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true\nexport TRACE_EXPORTER_TYPE=console    # or json, multi\nexport TRACE_PRETTY_OUTPUT=true\nexport TRACE_ENABLE_STATS=true\n\n# Start registry with tracing\nmeshctl start --registry-only\n</code></pre>"},{"location":"07-observability/#2-python-agents-auto-enable-tracing","title":"2. Python Agents Auto-Enable Tracing","text":"<p>Python agents automatically participate in distributed tracing when the registry has it enabled. No additional configuration required!</p>"},{"location":"07-observability/#3-verify-tracing-is-working","title":"3. Verify Tracing is Working","text":"<pre><code># Check tracing status\ncurl http://localhost:8000/trace/status\n\n# Make a test call to generate traces\ncurl -X POST http://localhost:9093/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"generate_report\",\n      \"arguments\": {\"title\": \"Test Report\"}\n    }\n  }'\n\n# Check completed traces (after ~1 minute)\ncurl http://localhost:8000/trace/list | jq .\n</code></pre>"},{"location":"07-observability/#core-concepts","title":"Core Concepts","text":""},{"location":"07-observability/#1-trace-events","title":"1. Trace Events","text":"<p>MCP Mesh generates three types of trace events:</p> <ul> <li>span_start: When an operation begins</li> <li>span_end: When an operation completes  </li> <li>error: When an operation fails</li> </ul>"},{"location":"07-observability/#2-trace-correlation","title":"2. Trace Correlation","text":"<p>The registry correlates events into complete traces:</p> <ul> <li>Same trace_id: Groups spans into a single trace</li> <li>Same span_id: Links span_start and span_end events</li> <li>Parent spans: Creates trace hierarchy</li> </ul>"},{"location":"07-observability/#3-data-flow","title":"3. Data Flow","text":"<pre><code>Python Agent \u2192 Redis Streams \u2192 Registry Consumer \u2192 Correlator \u2192 Exporter\n     \u2193              \u2193               \u2193                \u2193            \u2193\n@mesh.tool()  mcp-mesh:traces  Background     Trace Builder  Console/JSON\n</code></pre>"},{"location":"07-observability/#configuration-options","title":"Configuration Options","text":""},{"location":"07-observability/#registry-environment-variables","title":"Registry Environment Variables","text":"Variable Default Description <code>MCP_MESH_DISTRIBUTED_TRACING_ENABLED</code> <code>false</code> Enable/disable tracing <code>TRACE_EXPORTER_TYPE</code> <code>console</code> Export format: console, json, multi <code>TRACE_PRETTY_OUTPUT</code> <code>true</code> Pretty-print console output <code>TRACE_ENABLE_STATS</code> <code>true</code> Collect trace statistics <code>TRACE_JSON_OUTPUT_DIR</code> - Directory for JSON export <code>TRACE_BATCH_SIZE</code> <code>100</code> Redis consumer batch size <code>TRACE_TIMEOUT</code> <code>5m</code> Trace completion timeout <code>REDIS_URL</code> <code>redis://localhost:6379</code> Redis connection URL"},{"location":"07-observability/#exporter-options","title":"Exporter Options","text":""},{"location":"07-observability/#console-exporter","title":"Console Exporter","text":"<pre><code>export TRACE_EXPORTER_TYPE=console\nexport TRACE_PRETTY_OUTPUT=true\n</code></pre> <p>Real-time trace output: <pre><code>\ud83d\udd17 TRACE a1b2c3d4 (15ms) - SUCCESS (3 spans across 2 agents)\n  \ud83d\udccd Agent: dependent-service\n    \u2705 tool:generate_report [generate_report] (15ms)\n  \ud83d\udccd Agent: fastmcp-service  \n    \u2705 tool:get_current_time [get_current_time] (2ms)\n    \u2705 tool:validate_data [validate_data] (8ms)\n</code></pre></p>"},{"location":"07-observability/#json-exporter","title":"JSON Exporter","text":"<pre><code>export TRACE_EXPORTER_TYPE=json\nexport TRACE_JSON_OUTPUT_DIR=/var/log/traces\n</code></pre>"},{"location":"07-observability/#multi-exporter","title":"Multi Exporter","text":"<pre><code>export TRACE_EXPORTER_TYPE=multi\nexport TRACE_JSON_OUTPUT_DIR=/var/log/traces\n</code></pre>"},{"location":"07-observability/#api-reference","title":"API Reference","text":""},{"location":"07-observability/#trace-status","title":"Trace Status","text":"<pre><code>GET /trace/status\n</code></pre> <p>Returns tracing configuration and runtime status.</p>"},{"location":"07-observability/#list-traces","title":"List Traces","text":"<pre><code>GET /trace/list?limit=20&amp;offset=0\n</code></pre> <p>List completed traces with pagination.</p>"},{"location":"07-observability/#get-specific-trace","title":"Get Specific Trace","text":"<pre><code>GET /trace/{trace_id}\n</code></pre> <p>Retrieve a specific trace by ID.</p>"},{"location":"07-observability/#search-traces","title":"Search Traces","text":"<pre><code>GET /trace/search?agent_name=weather&amp;success=true&amp;start_time=2024-01-01T00:00:00Z\n</code></pre> <p>Search traces with filtering:</p> Parameter Type Description <code>parent_span_id</code> string Filter by parent span <code>agent_name</code> string Filter by agent name <code>operation</code> string Filter by operation name <code>success</code> boolean Filter by success status <code>start_time</code> RFC3339 Filter by start time <code>end_time</code> RFC3339 Filter by end time <code>min_duration_ms</code> integer Minimum duration filter <code>max_duration_ms</code> integer Maximum duration filter <code>limit</code> integer Result limit (max 100)"},{"location":"07-observability/#trace-statistics","title":"Trace Statistics","text":"<pre><code>GET /trace/stats\n</code></pre> <p>Returns aggregate trace statistics.</p>"},{"location":"07-observability/#trace-analysis-examples","title":"Trace Analysis Examples","text":""},{"location":"07-observability/#example-1-find-slow-operations","title":"Example 1: Find Slow Operations","text":"<pre><code># Find traces longer than 1 second\ncurl \"http://localhost:8000/trace/search?min_duration_ms=1000\" | jq .\n</code></pre>"},{"location":"07-observability/#example-2-debug-failed-operations","title":"Example 2: Debug Failed Operations","text":"<pre><code># Find failed traces\ncurl \"http://localhost:8000/trace/search?success=false\" | jq .\n</code></pre>"},{"location":"07-observability/#example-3-analyze-agent-performance","title":"Example 3: Analyze Agent Performance","text":"<pre><code># Get traces for specific agent\ncurl \"http://localhost:8000/trace/search?agent_name=weather-service\" | jq .\n</code></pre>"},{"location":"07-observability/#example-4-monitor-recent-activity","title":"Example 4: Monitor Recent Activity","text":"<pre><code># Get traces from last hour\nHOUR_AGO=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)\ncurl \"http://localhost:8000/trace/search?start_time=$HOUR_AGO\" | jq .\n</code></pre>"},{"location":"07-observability/#best-practices","title":"Best Practices","text":""},{"location":"07-observability/#1-monitoring","title":"1. Monitoring","text":"<ul> <li>Monitor trace export rate and success</li> <li>Set up alerts for high error rates</li> <li>Watch for trace correlation issues</li> </ul>"},{"location":"07-observability/#2-storage-management","title":"2. Storage Management","text":"<ul> <li>Traces are stored in memory (last 1000)</li> <li>Older traces are automatically cleaned up</li> <li>Use JSON export for long-term storage</li> </ul>"},{"location":"07-observability/#3-performance","title":"3. Performance","text":"<ul> <li>Tracing is designed to be low-overhead</li> <li>Async publishing doesn't block operations</li> <li>Redis Streams provide high throughput</li> </ul>"},{"location":"07-observability/#4-debugging","title":"4. Debugging","text":"<ul> <li>Check trace status endpoint for issues</li> <li>Monitor Redis stream length</li> <li>Verify consumer group processing</li> </ul>"},{"location":"07-observability/#integration-examples","title":"Integration Examples","text":""},{"location":"07-observability/#external-monitoring-integration","title":"External Monitoring Integration","text":"<pre><code>#!/bin/bash\n# Send trace metrics to external monitoring\n\n# Get trace stats\nSTATS=$(curl -s http://localhost:8000/trace/stats)\nTOTAL_TRACES=$(echo $STATS | jq .total_traces)\nSUCCESS_RATE=$(echo $STATS | jq '.success_traces / .total_traces * 100')\n\n# Send to monitoring system\ncurl -X POST http://monitoring.internal/metrics \\\n  -d \"mcp_mesh_traces_total $TOTAL_TRACES\"\ncurl -X POST http://monitoring.internal/metrics \\\n  -d \"mcp_mesh_traces_success_rate $SUCCESS_RATE\"\n</code></pre>"},{"location":"07-observability/#log-integration","title":"Log Integration","text":"<pre><code>#!/bin/bash\n# Export traces to centralized logging\n\n# Get recent traces and send to logs\ncurl -s \"http://localhost:8000/trace/list?limit=100\" | \\\n  jq -c '.traces[]' | \\\n  while read trace; do\n    echo \"$trace\" | logger -t mcp-mesh-trace\n  done\n</code></pre>"},{"location":"07-observability/#troubleshooting","title":"Troubleshooting","text":""},{"location":"07-observability/#issue-1-no-traces-appearing","title":"Issue 1: No Traces Appearing","text":"<p>Symptoms: Empty trace list despite agent activity</p> <p>Checks: <pre><code># 1. Verify tracing is enabled\ncurl http://localhost:8000/trace/status | jq .enabled\n\n# 2. Check Redis stream\nredis-cli XLEN mcp-mesh:traces\n\n# 3. Check consumer status\ncurl http://localhost:8000/trace/status | jq .consumer\n</code></pre></p>"},{"location":"07-observability/#issue-2-incomplete-traces","title":"Issue 2: Incomplete Traces","text":"<p>Symptoms: Traces missing spans or correlation issues</p> <p>Checks: <pre><code># Check for orphaned spans\nredis-cli XREVRANGE mcp-mesh:traces + - COUNT 10\n\n# Look for mismatched trace_ids\ncurl http://localhost:8000/trace/status | jq .correlator\n</code></pre></p>"},{"location":"07-observability/#issue-3-high-memory-usage","title":"Issue 3: High Memory Usage","text":"<p>Symptoms: Registry memory growing</p> <p>Checks: <pre><code># Check active traces count\ncurl http://localhost:8000/trace/status | jq .correlator.active_traces\n\n# Verify cleanup is working\n# Should see periodic cleanup messages in logs\n</code></pre></p>"},{"location":"07-observability/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"07-observability/#custom-exporters","title":"Custom Exporters","text":"<p>You can implement custom exporters by extending the Go registry:</p> <pre><code>// Custom exporter implementation\ntype CustomExporter struct {\n    endpoint string\n}\n\nfunc (e *CustomExporter) ExportTrace(trace *CompletedTrace) error {\n    // Send trace to custom backend\n    return sendToCustomBackend(e.endpoint, trace)\n}\n</code></pre>"},{"location":"07-observability/#redis-configuration","title":"Redis Configuration","text":"<pre><code># High-performance Redis settings for tracing\nredis-cli CONFIG SET stream-node-max-bytes 4096\nredis-cli CONFIG SET stream-node-max-entries 100\n</code></pre>"},{"location":"07-observability/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Throughput: 10,000+ spans/second</li> <li>Latency: &lt;1ms trace event publishing</li> <li>Memory: ~1MB per 1000 completed traces</li> <li>Storage: Configurable retention (default: in-memory)</li> </ul>"},{"location":"07-observability/#next-steps","title":"Next Steps","text":"<p>The distributed tracing system provides a solid foundation for observability. Consider adding:</p> <ol> <li>External Export: Send traces to Jaeger/Zipkin</li> <li>Alerting: Set up alerts on trace metrics</li> <li>Dashboards: Create visualizations for trace data</li> <li>Custom Metrics: Extract business metrics from traces</li> </ol> <p>\ud83d\udca1 Tip: Use the search API with time ranges to analyze performance trends over time</p> <p>\ud83d\udcda Reference: MCP Mesh Tracing API Documentation</p> <p>\ud83c\udfaf Next Step: Explore the detailed Distributed Tracing Guide</p>"},{"location":"architecture-and-design/","title":"MCP Mesh Architecture and Design","text":"<p>Understanding the core architecture, design principles, and usage patterns of MCP Mesh</p>"},{"location":"architecture-and-design/#overview","title":"Overview","text":"<p>MCP Mesh is a distributed service orchestration framework built on top of the Model Context Protocol (MCP) that enables seamless dependency injection, service discovery, and inter-service communication. The architecture combines familiar FastMCP development patterns with powerful mesh orchestration capabilities.</p>"},{"location":"architecture-and-design/#core-architecture","title":"Core Architecture","text":""},{"location":"architecture-and-design/#high-level-components","title":"High-Level Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        MCP Mesh Ecosystem                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502              \u2502           Redis                   \u2502              \u2502\n\u2502              \u2502      (Session Storage)            \u2502              \u2502\n\u2502              \u2502   session:* keys for stickiness   \u2502              \u2502\n\u2502              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502                            \u2502                                    \u2502\n\u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u2502\n\u2502         \u2502                  \u2502                  \u2502                 \u2502\n\u2502         \u25bc                  \u25bc                  \u25bc                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502   Agent A   \u2502  \u2502   Agent B   \u2502  \u2502   Agent C   \u2502              \u2502\n\u2502  \u2502             \u2502\u25c4\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u25ba\u2502             \u2502              \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502              \u2502\n\u2502  \u2502 \u2502FastMCP  \u2502\u25c4\u253c\u2500\u2500\u253c\u25ba\u2502FastMCP  \u2502\u25c4\u253c\u2500\u2500\u253c\u25ba\u2502FastMCP  \u2502 \u2502              \u2502\n\u2502  \u2502 \u2502Server   \u2502 \u2502  \u2502 \u2502Server   \u2502 \u2502  \u2502 \u2502Server   \u2502 \u2502              \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502              \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502              \u2502\n\u2502  \u2502 \u2502Mesh     \u2502 \u2502  \u2502 \u2502Mesh     \u2502 \u2502  \u2502 \u2502Mesh     \u2502 \u2502              \u2502\n\u2502  \u2502 \u2502Runtime  \u2502 \u2502  \u2502 \u2502Runtime  \u2502 \u2502  \u2502 \u2502Runtime  \u2502 \u2502              \u2502\n\u2502  \u2502 \u2502(Inject) \u2502 \u2502  \u2502 \u2502(Inject) \u2502 \u2502  \u2502 \u2502(Inject) \u2502 \u2502              \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502         \u2502                \u2502                \u2502                     \u2502\n\u2502         \u2502 Heartbeat      \u2502 Heartbeat      \u2502 Heartbeat           \u2502\n\u2502         \u2502 + Discovery    \u2502 + Discovery    \u2502 + Discovery         \u2502\n\u2502         \u2502                \u2502                \u2502                     \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n\u2502                          \u25bc                                      \u2502\n\u2502                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                \u2502\n\u2502                  \u2502   Registry  \u2502                                \u2502\n\u2502                  \u2502 (Background)\u2502                                \u2502\n\u2502                  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                                \u2502\n\u2502                  \u2502 \u2502Service  \u2502 \u2502                                \u2502\n\u2502                  \u2502 \u2502Discovery\u2502 \u2502                                \u2502\n\u2502                  \u2502 \u2502         \u2502 \u2502                                \u2502\n\u2502                  \u2502 \u2502SQLite DB\u2502 \u2502                                \u2502\n\u2502                  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                                \u2502\n\u2502                  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                                \u2502\n\u2502                  \u2502 \u2502Health   \u2502 \u2502                                \u2502\n\u2502                  \u2502 \u2502Monitor  \u2502 \u2502                                \u2502\n\u2502                  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                                \u2502\n\u2502                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                \u2502\n\u2502                                                                 \u2502\n\u2502  Direct MCP JSON-RPC calls between FastMCP servers              \u2502\n\u2502  \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba   \u2502\n\u2502  Registry for discovery, Redis for session stickiness           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture-and-design/#component-responsibilities","title":"Component Responsibilities","text":""},{"location":"architecture-and-design/#1-agents-python-runtime","title":"1. Agents (Python Runtime)","text":"<ul> <li>FastMCP Integration: Native MCP protocol support for direct agent-to-agent communication</li> <li>Mesh Runtime: Background dependency injection and proxy creation</li> <li>Auto-Discovery: Automatic capability registration with registry</li> <li>Health Monitoring: Periodic heartbeats to registry (background process)</li> </ul>"},{"location":"architecture-and-design/#2-registry-go-service","title":"2. Registry (Go Service)","text":"<ul> <li>Service Discovery: Centralized capability and endpoint registry (background coordination)</li> <li>Health Tracking: Agent health monitoring and failure detection</li> <li>Dependency Resolution: Smart capability matching with tags at startup</li> <li>Load Balancing: Multiple providers for same capability selection</li> </ul>"},{"location":"architecture-and-design/#3-meshctl-cli-go-binary","title":"3. meshctl CLI (Go Binary)","text":"<ul> <li>Lifecycle Management: Start, stop, monitor agents</li> <li>Development Tools: File watching, auto-restart, debugging</li> <li>Registry Operations: Query services, check health, troubleshoot</li> </ul>"},{"location":"architecture-and-design/#4-redis-session-storage","title":"4. Redis (Session Storage)","text":"<ul> <li>Session Affinity: Maps session IDs to pod IPs for stateful operations</li> <li>Distributed State: Enables session stickiness across multiple pod replicas</li> <li>Graceful Fallback: Agents fall back to in-memory storage if Redis unavailable</li> <li>TTL Management: Automatic session cleanup and expiration</li> </ul>"},{"location":"architecture-and-design/#key-insight-background-orchestration","title":"Key Insight: Background Orchestration","text":"<p>MCP Mesh operates as background infrastructure:</p> <ul> <li>Discovery Phase: Registry helps agents find each other during startup</li> <li>Runtime Phase: Direct FastMCP-to-FastMCP communication (no proxy)</li> <li>Monitoring Phase: Continuous health checks and capability updates in background</li> </ul>"},{"location":"architecture-and-design/#design-principles","title":"Design Principles","text":""},{"location":"architecture-and-design/#1-true-resilient-architecture","title":"1. True Resilient Architecture","text":"<p>MCP Mesh implements a fundamentally resilient architecture where agents operate independently and enhance each other when available:</p> <p>Core Resilience Principles:</p> <ul> <li>Standalone Operation: Agents function as vanilla FastMCP servers without any dependencies</li> <li>Registry as Facilitator: Registry enables discovery and wiring, but agents don't depend on it</li> <li>Dynamic Enhancement: Agents get enhanced capabilities when other agents are available</li> <li>Graceful Degradation: Loss of registry or other agents doesn't break existing functionality</li> <li>Self-Healing: Agents automatically reconnect and refresh when components return</li> </ul> <p>Architecture Flow:</p> <pre><code>Agent Startup \u2192 Works Standalone (FastMCP mode)\n       \u2193\nRegistry Available \u2192 Agents Get Wired \u2192 Enhanced Capabilities\n       \u2193\nRegistry Down \u2192 Agents Continue Working \u2192 Direct MCP Communication Preserved\n       \u2193\nRegistry Returns \u2192 Agents Refresh \u2192 Topology Updates Resume\n</code></pre>"},{"location":"architecture-and-design/#2-dual-decorator-pattern","title":"2. Dual Decorator Pattern","text":"<p>MCP Mesh uses a dual decorator approach that preserves FastMCP familiarity while adding mesh orchestration:</p> <pre><code>@app.tool()      # \u2190 FastMCP: MCP protocol handling\n@mesh.tool(      # \u2190 Mesh: Dependency injection + orchestration\n    capability=\"weather_data\",\n    dependencies=[\"time_service\"]\n)\ndef get_weather(time_service: Any = None) -&gt; dict:\n    # Business logic here\n</code></pre> <p>Benefits:</p> <ul> <li>Familiar Development: Developers keep using FastMCP patterns</li> <li>Enhanced Capabilities: Mesh adds dependency injection seamlessly</li> <li>Zero Boilerplate: No manual server management or configuration</li> <li>Gradual Adoption: Can add mesh features incrementally</li> </ul>"},{"location":"architecture-and-design/#3-enhanced-proxy-system","title":"3. Enhanced Proxy System","text":"<p>MCP Mesh v0.3+ introduces automatic proxy configuration from decorator kwargs:</p> <pre><code>@mesh.tool(\n    capability=\"enhanced_service\",\n    timeout=60,                    # Auto-configures proxy timeout\n    retry_count=3,                 # Auto-configures retry policy\n    streaming=True,                # Auto-selects streaming proxy\n    auth_required=True             # Auto-enables authentication\n)\ndef enhanced_tool():\n    pass\n</code></pre> <p>Proxy Types:</p> <ul> <li>EnhancedMCPClientProxy: Timeout, retry, auth auto-configuration</li> <li>EnhancedFullMCPProxy: Streaming auto-selection + session management</li> <li>Standard Proxies: Backward compatibility for simple tools</li> </ul> <p>Implementation: See <code>src/runtime/python/_mcp_mesh/engine/</code> for proxy classes</p>"},{"location":"architecture-and-design/#4-session-management-and-stickiness","title":"4. Session Management and Stickiness","text":"<p>For stateful operations, MCP Mesh provides automatic session affinity:</p> <pre><code>@mesh.tool(\n    capability=\"stateful_counter\",\n    session_required=True,         # Enables session stickiness\n    stateful=True,                 # Marks as stateful operation\n    auto_session_management=True   # Automatic session lifecycle\n)\ndef increment_counter(session_id: str, increment: int = 1):\n    # Automatically routed to same pod for this session\n</code></pre> <p>Session Features:</p> <ul> <li>Redis-Backed Storage: Distributed session affinity across pods</li> <li>Automatic Routing: Requests with same session_id go to same pod</li> <li>Graceful Fallback: In-memory storage when Redis unavailable</li> <li>TTL Management: Automatic session cleanup</li> </ul> <p>Implementation: See <code>src/runtime/python/_mcp_mesh/engine/http_wrapper.py</code></p>"},{"location":"architecture-and-design/#5-fast-heartbeat-architecture","title":"5. Fast Heartbeat Architecture","text":"<p>Optimized health monitoring with dual-heartbeat system:</p> <pre><code>HEAD /heartbeat    # Lightweight timestamp update (5s intervals)\nPOST /heartbeat    # Full registration when triggered by HEAD response\n</code></pre> <p>Benefits:</p> <ul> <li>Fast Failure Detection: Sub-20s failure detection</li> <li>Network Efficiency: Minimal bandwidth usage</li> <li>On-Demand Registration: Full updates only when needed</li> </ul> <p>Implementation: See <code>cmd/registry/</code> for heartbeat handling</p>"},{"location":"architecture-and-design/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"architecture-and-design/#two-pipeline-design","title":"Two-Pipeline Design","text":"<p>MCP Mesh uses a sophisticated two-pipeline architecture that separates initialization from runtime operations:</p>"},{"location":"architecture-and-design/#startup-pipeline-one-time-execution","title":"Startup Pipeline (One-time Execution)","text":"<pre><code>DecoratorCollectionStep \u2192 ConfigurationStep \u2192 HeartbeatPreparationStep \u2192\nFastMCPServerDiscoveryStep \u2192 HeartbeatLoopStep \u2192 FastAPIServerSetupStep\n</code></pre> <p>Purpose: Initialize agent, collect decorators, prepare for mesh integration Trigger: Agent startup, decorator debounce completion Outcome: Agent ready with capabilities registered and dependency injection configured</p> <p>Implementation: See <code>src/runtime/python/_mcp_mesh/pipeline/startup/</code></p>"},{"location":"architecture-and-design/#heartbeat-pipeline-continuous-loop","title":"Heartbeat Pipeline (Continuous Loop)","text":"<pre><code>RegistryConnectionStep \u2192 HeartbeatSendStep \u2192 DependencyResolutionStep\n</code></pre> <p>Purpose: Maintain mesh connectivity, update dependency topology Trigger: Periodic execution (30s intervals) Outcome: Updated dependency proxies, health status maintained</p> <p>Implementation: See <code>src/runtime/python/_mcp_mesh/pipeline/heartbeat/</code></p>"},{"location":"architecture-and-design/#decorator-processing-and-debounce-coordination","title":"Decorator Processing and Debounce Coordination","text":"<p>Challenge: Decorators are processed as Python imports the module, but we need to wait for all decorators before starting mesh processing.</p> <p>Solution: Debounce coordinator with configurable delay</p> <pre><code>@mesh.tool()  # Triggers debounce timer\ndef tool1(): pass\n\n@mesh.tool()  # Resets debounce timer\ndef tool2(): pass\n\n# After MCP_MESH_DEBOUNCE_DELAY (default 1.0s) with no new decorators:\n# \u2192 Startup pipeline begins\n</code></pre> <p>Design Benefits:</p> <ul> <li>Handles dynamic decorator registration during import</li> <li>Prevents race conditions in multi-decorator modules</li> <li>Configurable timing via <code>MCP_MESH_DEBOUNCE_DELAY</code></li> </ul> <p>Implementation: See <code>src/runtime/python/_mcp_mesh/engine/debounce_coordinator.py</code></p>"},{"location":"architecture-and-design/#dependency-resolution-and-proxy-architecture","title":"Dependency Resolution and Proxy Architecture","text":""},{"location":"architecture-and-design/#function-caching-strategy","title":"Function Caching Strategy","text":"<p>Key Insight: Mesh decorators must process BEFORE FastMCP decorators to cache original functions.</p> <pre><code>@mesh.tool()  # \u2190 Processes first, caches original function\n@app.tool()   # \u2190 FastMCP processes wrapped function\ndef hello(): pass\n</code></pre> <p>Implementation:</p> <ol> <li>Mesh decorator caches <code>func._mesh_original_func = func</code></li> <li>Creates dependency injection wrapper</li> <li>FastMCP receives wrapper (not original)</li> <li>Runtime calls cached original with injected dependencies</li> </ol>"},{"location":"architecture-and-design/#proxy-selection-logic","title":"Proxy Selection Logic","text":"<p>Registry-Driven: Heartbeat response determines proxy type based on dependency location and configuration.</p> <pre><code>if current_agent_id == target_agent_id:\n    # Same agent - direct local call\n    proxy = SelfDependencyProxy(original_func, function_name)\nelse:\n    # Different agent - MCP JSON-RPC call\n    if has_enhanced_config:\n        proxy = EnhancedMCPClientProxy(endpoint, func_name, kwargs_config)\n    else:\n        proxy = MCPClientProxy(endpoint, func_name)\n</code></pre> <p>Enhanced Proxy Auto-Selection:</p> <ul> <li><code>streaming=True</code> \u2192 <code>EnhancedFullMCPProxy</code></li> <li><code>session_required=True</code> \u2192 <code>EnhancedFullMCPProxy</code> with session management</li> <li>Custom timeout/retry \u2192 <code>EnhancedMCPClientProxy</code></li> <li>Simple tools \u2192 Standard <code>MCPClientProxy</code></li> </ul> <p>Implementation: See <code>src/runtime/python/_mcp_mesh/pipeline/heartbeat/dependency_resolution.py</code></p>"},{"location":"architecture-and-design/#hash-based-change-detection","title":"Hash-Based Change Detection","text":"<p>Performance Optimization: Only update dependency injection when topology actually changes.</p> <pre><code>def _hash_dependency_state(dependency_state):\n    state_str = json.dumps(dependency_state, sort_keys=True)\n    return hashlib.sha256(state_str.encode()).hexdigest()\n\n# In heartbeat pipeline:\ncurrent_hash = _hash_dependency_state(response.dependencies)\nif current_hash == _last_dependency_hash:\n    return  # Skip expensive dependency injection update\n</code></pre> <p>Benefits:</p> <ul> <li>Eliminates unnecessary proxy recreation</li> <li>Reduces CPU overhead in stable topologies</li> <li>Enables high-frequency heartbeats without performance penalty</li> </ul>"},{"location":"architecture-and-design/#registry-as-facilitator-pattern","title":"Registry as Facilitator Pattern","text":"<p>Design Philosophy: Registry coordinates but never controls agent execution.</p> <p>Registry Responsibilities:</p> <ul> <li>Accept agent registrations via heartbeat</li> <li>Store capability metadata in SQLite</li> <li>Resolve dependencies and return topology</li> <li>Monitor health and mark unhealthy agents</li> <li>Generate audit events</li> </ul> <p>What Registry NEVER Does:</p> <ul> <li>Make calls to agents (only agents call registry)</li> <li>Control agent lifecycle</li> <li>Proxy or intercept agent-to-agent communication</li> <li>Store business logic or state</li> </ul> <p>Agent Autonomy: Agents poll registry for updates but operate independently. Registry failure doesn't break existing agent-to-agent connections.</p> <p>Implementation: See <code>cmd/registry/</code> for Go registry service</p>"},{"location":"architecture-and-design/#usage-patterns","title":"Usage Patterns","text":""},{"location":"architecture-and-design/#basic-agent-development","title":"Basic Agent Development","text":"<p>1. Simple Tool Creation:</p> <pre><code>from fastmcp import FastMCP\nimport mesh\n\napp = FastMCP(\"My Service\")\n\n@app.tool()\n@mesh.tool(capability=\"greeting\")\ndef say_hello(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\n@mesh.agent(name=\"greeting-service\")\nclass GreetingAgent:\n    pass\n</code></pre> <p>2. With Dependencies:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"time_greeting\",\n    dependencies=[\"time_service\"]\n)\ndef time_greeting(name: str, time_service=None) -&gt; str:\n    current_time = time_service() if time_service else \"unknown time\"\n    return f\"Hello, {name}! Current time: {current_time}\"\n</code></pre>"},{"location":"architecture-and-design/#enhanced-configuration","title":"Enhanced Configuration","text":"<p>3. Production-Ready Tool:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"secure_data_processor\",\n    timeout=120,                           # 2 min timeout\n    retry_count=3,                         # Retry on failure\n    auth_required=True,                    # Require authentication\n    custom_headers={\"X-Service\": \"data\"},  # Custom headers\n    streaming=True                         # Enable streaming\n)\nasync def process_large_dataset(data_url: str):\n    # Auto-configured with enhanced proxy features\n</code></pre> <p>4. Stateful Operations:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"user_session\",\n    session_required=True,        # Enable session stickiness\n    stateful=True,               # Mark as stateful\n    timeout=30\n)\ndef update_user_state(session_id: str, updates: dict):\n    # Automatically routed to same pod for session consistency\n</code></pre>"},{"location":"architecture-and-design/#deployment-patterns","title":"Deployment Patterns","text":"<p>Local Development:</p> <pre><code># Terminal 1: Start registry\nmeshctl registry start\n\n# Terminal 2: Start your agent\npython my_agent.py\n</code></pre> <p>Docker Compose:</p> <pre><code>version: \"3.8\"\nservices:\n  registry:\n    image: mcpmesh/registry:latest\n    ports: [\"8000:8000\"]\n\n  my-service:\n    build: .\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n    depends_on: [registry]\n</code></pre> <p>Kubernetes:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n        - name: agent\n          image: my-service:latest\n          env:\n            - name: MCP_MESH_REGISTRY_URL\n              value: \"http://mcp-registry:8000\"\n            - name: REDIS_URL\n              value: \"redis://redis:6379\" # For session storage\n</code></pre>"},{"location":"architecture-and-design/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"architecture-and-design/#scalability-metrics","title":"Scalability Metrics","text":"<ul> <li>Registry: 1000+ agents, 10,000+ capabilities, 100+ heartbeats/sec</li> <li>Agent: 1000+ tool calls/sec, &lt;2s startup time</li> <li>Discovery: &lt;10ms lookup time, &lt;1s update propagation</li> </ul>"},{"location":"architecture-and-design/#network-overhead","title":"Network Overhead","text":"<ul> <li>HEAD Heartbeat: ~200B per agent every 5 seconds</li> <li>POST Heartbeat: ~2KB per agent when topology changes</li> <li>Tool Calls: Standard MCP JSON-RPC (varies by payload)</li> </ul> <p>See <code>docs/performance/</code> for detailed benchmarks</p>"},{"location":"architecture-and-design/#security-model","title":"Security Model","text":""},{"location":"architecture-and-design/#current-architecture","title":"Current Architecture","text":"<ul> <li>Trusted Network Model: Assumes secure network environment</li> <li>Service-to-Service: Direct HTTP communication between agents</li> <li>No Built-in Auth: Authentication via proxy configuration</li> </ul>"},{"location":"architecture-and-design/#production-recommendations","title":"Production Recommendations","text":"<ol> <li>Network Segmentation: Use private networks or VPNs</li> <li>Service Mesh: Deploy with Istio/Linkerd for mTLS</li> <li>API Gateway: Use gateway for external access control</li> <li>Enhanced Proxies: Use <code>auth_required=True</code> with bearer tokens</li> </ol> <p>See <code>docs/security/</code> for detailed security guidance</p>"},{"location":"architecture-and-design/#recent-enhancements-v03x","title":"Recent Enhancements (v0.3.x)","text":"<ol> <li>\u2705 Redis Session Storage: Distributed session affinity with Redis backend</li> <li>\u2705 Enhanced Proxy System: Kwargs-based auto-configuration for proxies</li> <li>\u2705 Automatic Session Management: Built-in session lifecycle management</li> <li>\u2705 HTTP Wrapper Improvements: Session routing middleware and port resolution</li> <li>\u2705 Streaming Auto-Selection: Automatic routing based on tool capabilities</li> <li>\u2705 Authentication Integration: Bearer token support for enhanced proxies</li> </ol>"},{"location":"architecture-and-design/#extension-points","title":"Extension Points","text":""},{"location":"architecture-and-design/#custom-dependency-resolvers","title":"Custom Dependency Resolvers","text":"<pre><code>class CustomDependencyResolver(DependencyResolver):\n    async def resolve_capability(self, capability_spec):\n        # Custom logic for finding capabilities\n        candidates = await super().find_candidates(capability_spec)\n        return self.apply_custom_selection(candidates)\n</code></pre>"},{"location":"architecture-and-design/#custom-health-checks","title":"Custom Health Checks","text":"<pre><code>@mesh.tool(health_check=custom_health_check)\ndef database_tool():\n    pass\n\nasync def custom_health_check():\n    return {\"status\": \"healthy\", \"connections\": db.pool.size}\n</code></pre> <p>See <code>src/runtime/python/_mcp_mesh/</code> for extension interfaces</p>"},{"location":"architecture-and-design/#future-roadmap","title":"Future Roadmap","text":""},{"location":"architecture-and-design/#planned-features","title":"Planned Features","text":"<ol> <li>Multi-Registry Federation: Cross-cluster service discovery</li> <li>Circuit Breakers: Automatic failure isolation</li> <li>Request Tracing: Distributed tracing integration</li> <li>Metrics Collection: Prometheus/OpenTelemetry integration</li> <li>Configuration Management: Dynamic configuration updates</li> </ol>"},{"location":"architecture-and-design/#performance-optimizations","title":"Performance Optimizations","text":"<ol> <li>gRPC Support: Binary protocol for high-throughput scenarios</li> <li>Connection Pooling: Efficient connection reuse between agents</li> <li>Edge Caching: CDN-like caching for static capabilities</li> </ol> <p>This architecture enables MCP Mesh to provide a seamless, scalable, and developer-friendly service orchestration platform that preserves the simplicity of FastMCP while adding powerful distributed system capabilities.</p> <p>For Implementation Details: See source code in <code>src/runtime/python/_mcp_mesh/</code> and <code>cmd/registry/</code> For Examples: See <code>examples/</code> directory for complete working examples For Performance: See <code>docs/performance/</code> for benchmarks and optimization guides</p>"},{"location":"enhanced-tag-matching-migration/","title":"Enhanced Tag Matching Migration Guide","text":"<p>Upgrading from exact tag matching to smart <code>+</code>/<code>-</code> operators</p> <p>This guide helps you migrate existing MCP Mesh applications to take advantage of enhanced tag matching with preference and exclusion operators introduced in v0.4+.</p>"},{"location":"enhanced-tag-matching-migration/#what-changed","title":"What Changed","text":""},{"location":"enhanced-tag-matching-migration/#before-v04-exact-matching-only","title":"Before v0.4 - Exact Matching Only","text":"<pre><code>@mesh.tool(\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\"claude\", \"opus\"]  # ALL tags must match exactly\n    }]\n)\n</code></pre> <p>Problem: Rigid matching - either exact match or total failure. No fallback options.</p>"},{"location":"enhanced-tag-matching-migration/#after-v04-smart-matching","title":"After v0.4 - Smart Matching","text":"<pre><code>@mesh.tool(\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\n            \"claude\",       # Required (same as before)\n            \"+opus\",        # Preferred (bonus if present)\n            \"-experimental\" # Excluded (must NOT be present)\n        ]\n    }]\n)\n</code></pre> <p>Benefits: Smart provider selection, graceful degradation, cost control, safety exclusions.</p>"},{"location":"enhanced-tag-matching-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>\u2705 100% Backward Compatible: All existing tag configurations continue to work unchanged.</p> <ul> <li>Tags without prefixes remain \"required\" tags</li> <li>Existing dependency resolution behavior preserved</li> <li>No breaking changes to APIs or data structures</li> <li>Zero migration required for basic use cases</li> </ul>"},{"location":"enhanced-tag-matching-migration/#migration-strategies","title":"Migration Strategies","text":""},{"location":"enhanced-tag-matching-migration/#strategy-1-gradual-enhancement-recommended","title":"Strategy 1: Gradual Enhancement (Recommended)","text":"<p>Start with your existing exact tags and gradually add preferences/exclusions:</p> <pre><code># Phase 1: Existing configuration (works unchanged)\n\"tags\": [\"claude\", \"production\"]\n\n# Phase 2: Add preferences for better provider selection\n\"tags\": [\"claude\", \"production\", \"+opus\"]\n\n# Phase 3: Add safety exclusions\n\"tags\": [\"claude\", \"production\", \"+opus\", \"-experimental\", \"-beta\"]\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#strategy-2-full-smart-matching","title":"Strategy 2: Full Smart Matching","text":"<p>Transform exact requirements into intelligent preferences:</p>"},{"location":"enhanced-tag-matching-migration/#before-rigid","title":"Before (Rigid)","text":"<pre><code>@mesh.tool(\n    capability=\"chat_service\",\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\"claude\", \"opus\"]  # Fails if no opus available\n    }]\n)\ndef premium_chat(llm_service: mesh.McpMeshAgent = None):\n    return llm_service() if llm_service else \"Service unavailable\"\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#after-smart","title":"After (Smart)","text":"<pre><code>@mesh.tool(\n    capability=\"chat_service\",\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\n            \"claude\",           # Still require Claude\n            \"+opus\",            # Prefer opus quality\n            \"+sonnet\",          # Fallback to sonnet\n            \"-experimental\"     # Never use experimental\n        ]\n    }]\n)\ndef adaptive_chat(llm_service: mesh.McpMeshAgent = None):\n    \"\"\"\n    Smart chat that adapts to available services:\n    - Prefers opus when available\n    - Falls back to sonnet if opus unavailable\n    - Never uses experimental/unstable services\n    \"\"\"\n    return llm_service() if llm_service else \"No suitable service available\"\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#common-migration-patterns","title":"Common Migration Patterns","text":""},{"location":"enhanced-tag-matching-migration/#pattern-1-cost-optimization","title":"Pattern 1: Cost Optimization","text":"<p>Transform expensive exact requirements into cost-conscious preferences:</p> <pre><code># Before: Always uses expensive premium service\n@mesh.tool(\n    dependencies=[{\"capability\": \"llm_service\", \"tags\": [\"claude\", \"opus\", \"premium\"]}]\n)\n\n# After: Prefers quality but allows cost-effective alternatives\n@mesh.tool(\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\n            \"claude\",       # Required model family\n            \"+opus\",        # Prefer best quality\n            \"+sonnet\",      # Accept good quality\n            \"-premium\"      # Exclude expensive tiers when cost matters\n        ]\n    }]\n)\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#pattern-2-environment-safety","title":"Pattern 2: Environment Safety","text":"<p>Add safety exclusions to prevent production issues:</p> <pre><code># Before: Could accidentally get experimental services\n@mesh.tool(\n    dependencies=[{\"capability\": \"database_service\", \"tags\": [\"postgres\"]}]\n)\n\n# After: Explicit safety guardrails\n@mesh.tool(\n    dependencies=[{\n        \"capability\": \"database_service\",\n        \"tags\": [\n            \"postgres\",         # Required database type\n            \"+primary\",         # Prefer primary instance\n            \"+ssd\",            # Prefer SSD performance\n            \"-experimental\",    # Safety: no experimental features\n            \"-beta\",           # Safety: no beta versions\n            \"-replica\"         # Safety: no read-only replicas for writes\n        ]\n    }]\n)\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#pattern-3-multi-region-preferences","title":"Pattern 3: Multi-Region Preferences","text":"<p>Transform region-specific exact matching into intelligent preferences:</p> <pre><code># Before: Hard-coded to specific region\n@mesh.tool(\n    dependencies=[{\n        \"capability\": \"storage_service\",\n        \"tags\": [\"aws\", \"us-east-1\", \"primary\"]\n    }]\n)\n\n# After: Regional preferences with fallbacks\n@mesh.tool(\n    dependencies=[{\n        \"capability\": \"storage_service\",\n        \"tags\": [\n            \"aws\",              # Required cloud provider\n            \"+us-east-1\",       # Prefer primary region\n            \"+us-west-2\",       # Acceptable fallback region\n            \"+primary\",         # Prefer primary storage\n            \"-experimental\"     # No experimental storage\n        ]\n    }]\n)\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#advanced-migration-examples","title":"Advanced Migration Examples","text":""},{"location":"enhanced-tag-matching-migration/#multi-service-architecture-migration","title":"Multi-Service Architecture Migration","text":""},{"location":"enhanced-tag-matching-migration/#before-brittle-exact-matching","title":"Before: Brittle Exact Matching","text":"<pre><code>@mesh.tool(\n    capability=\"data_pipeline\",\n    dependencies=[\n        {\"capability\": \"database\", \"tags\": [\"postgres\", \"v15\", \"primary\"]},\n        {\"capability\": \"cache\", \"tags\": [\"redis\", \"cluster\", \"v7\"]},\n        {\"capability\": \"queue\", \"tags\": [\"rabbitmq\", \"ha\", \"v3.10\"]}\n    ]\n)\ndef rigid_pipeline():\n    \"\"\"Brittle pipeline that fails if any exact version unavailable.\"\"\"\n    pass\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#after-resilient-smart-matching","title":"After: Resilient Smart Matching","text":"<pre><code>@mesh.tool(\n    capability=\"data_pipeline\",\n    dependencies=[\n        {\n            \"capability\": \"database\",\n            \"tags\": [\n                \"postgres\",         # Required database\n                \"+primary\",         # Prefer primary instance\n                \"+v15\",            # Prefer latest version\n                \"+ssd\",            # Prefer SSD performance\n                \"-experimental\",    # No experimental versions\n                \"-replica\"         # No read-only for this pipeline\n            ]\n        },\n        {\n            \"capability\": \"cache\",\n            \"tags\": [\n                \"redis\",           # Required cache type\n                \"+cluster\",        # Prefer clustered setup\n                \"+v7\",            # Prefer latest Redis 7.x\n                \"+memory-optimized\", # Prefer memory optimization\n                \"-single-node\"     # Avoid single points of failure\n            ]\n        },\n        {\n            \"capability\": \"queue\",\n            \"tags\": [\n                \"rabbitmq\",        # Required message queue\n                \"+ha\",            # Prefer high availability\n                \"+v3.10\",         # Prefer stable version\n                \"-beta\"           # No beta versions in production\n            ]\n        }\n    ]\n)\ndef resilient_pipeline():\n    \"\"\"\n    Resilient pipeline that:\n    - Prefers optimal configurations\n    - Gracefully degrades when needed\n    - Maintains safety guardrails\n    \"\"\"\n    pass\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#testing-your-migration","title":"Testing Your Migration","text":""},{"location":"enhanced-tag-matching-migration/#1-validate-enhanced-matching-works","title":"1. Validate Enhanced Matching Works","text":"<pre><code># Start multiple providers with different tags\npython provider_haiku.py   # Tags: [\"claude\", \"haiku\", \"fast\"]\npython provider_sonnet.py  # Tags: [\"claude\", \"sonnet\", \"balanced\"]\npython provider_opus.py    # Tags: [\"claude\", \"opus\", \"premium\"]\n\n# Test consumer with preferences\npython consumer.py         # Tags: [\"claude\", \"+opus\", \"-experimental\"]\n# Should select opus provider (preferred)\n\n# Stop opus provider\npkill -f provider_opus.py\n\n# Test fallback behavior\npython consumer.py         # Should fallback to sonnet provider\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#2-verify-exclusion-works","title":"2. Verify Exclusion Works","text":"<pre><code># Start experimental provider\npython experimental.py     # Tags: [\"claude\", \"experimental\"]\n\n# Test exclusion\npython consumer.py         # Tags: [\"claude\", \"-experimental\"]\n# Should find NO providers (experimental excluded)\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#3-monitor-provider-selection","title":"3. Monitor Provider Selection","text":"<pre><code># Check which providers are selected\ncurl -s http://localhost:8000/agents | \\\n  jq '.agents[] | select(.dependencies_resolved &gt; 0) |\n      {name: .name, resolved_dependencies: .resolved_dependencies}'\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#performance-considerations","title":"Performance Considerations","text":""},{"location":"enhanced-tag-matching-migration/#scoring-overhead","title":"Scoring Overhead","text":"<p>Enhanced matching adds minimal overhead:</p> <ul> <li>Simple string prefix checking: O(n) with number of tags</li> <li>Priority scoring: O(n) calculation per provider</li> <li>Provider ranking: O(n log n) sorting of candidates</li> </ul>"},{"location":"enhanced-tag-matching-migration/#network-efficiency","title":"Network Efficiency","text":"<p>Smart matching can improve network efficiency:</p> <ul> <li>Better provider selection reduces retry attempts</li> <li>Regional preferences minimize latency</li> <li>Cost exclusions prevent expensive provider usage</li> </ul>"},{"location":"enhanced-tag-matching-migration/#troubleshooting-migration","title":"Troubleshooting Migration","text":""},{"location":"enhanced-tag-matching-migration/#issue-no-providers-match","title":"Issue: No Providers Match","text":"<pre><code># Check what providers are available\ncurl -s http://localhost:8000/agents | jq '.agents[].capabilities'\n\n# Verify your tag requirements aren't too restrictive\n# Try removing some exclusions or changing requirements to preferences\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#issue-unexpected-provider-selected","title":"Issue: Unexpected Provider Selected","text":"<pre><code># Debug provider scoring\n# Add logging to see scoring decisions:\nexport MCP_MESH_LOG_LEVEL=DEBUG\npython your_consumer.py\n\n# Look for log messages like:\n# \"Provider score: agent_id=claude-opus score=15\"\n# \"Selected provider: claude-opus (highest score)\"\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#issue-legacy-behavior-changed","title":"Issue: Legacy Behavior Changed","text":"<p>If you need exactly the old behavior:</p> <pre><code># Ensure all tags are required (no + or -)\n\"tags\": [\"claude\", \"opus\"]  # Exact matching preserved\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#best-practices-after-migration","title":"Best Practices After Migration","text":""},{"location":"enhanced-tag-matching-migration/#1-use-descriptive-tag-hierarchies","title":"1. Use Descriptive Tag Hierarchies","text":"<pre><code># Good: Clear hierarchy and purpose\n\"tags\": [\n    \"llm\",                    # Service type\n    \"claude\",                 # Provider\n    \"+opus\",                  # Preferred model\n    \"+us-east-1\",            # Preferred region\n    \"-experimental\",          # Safety exclusion\n    \"-expensive\"             # Cost control\n]\n\n# Avoid: Cryptic or overly generic tags\n\"tags\": [\"svc\", \"v1\", \"+opt\", \"-bad\"]\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#2-balance-preferences-vs-requirements","title":"2. Balance Preferences vs Requirements","text":"<pre><code># Good: Some requirements, some preferences\n\"tags\": [\n    \"postgres\",              # Required: specific database\n    \"+primary\",              # Preferred: better performance\n    \"-experimental\"          # Safety: exclude risky versions\n]\n\n# Avoid: All preferences (too loose) or all requirements (too rigid)\n\"tags\": [\"+postgres\", \"+primary\", \"+ssd\"]  # Too loose\n\"tags\": [\"postgres\", \"v15.2\", \"us-east-1a\", \"i3.xlarge\"]  # Too rigid\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#3-document-your-tag-strategy","title":"3. Document Your Tag Strategy","text":"<pre><code>@mesh.tool(\n    capability=\"financial_processor\",\n    dependencies=[{\n        \"capability\": \"database_service\",\n        \"tags\": [\n            # Required for compliance\n            \"postgres\",          # SOX compliance requirement\n            \"encrypted\",         # PCI DSS requirement\n\n            # Performance preferences\n            \"+primary\",          # Prefer primary for consistency\n            \"+ssd\",             # Prefer SSD for speed\n\n            # Safety exclusions\n            \"-experimental\",     # Never use experimental in finance\n            \"-replica\"          # Never use read-only for transactions\n        ]\n    }],\n    description=\"Financial processor with strict compliance and performance requirements\"\n)\n</code></pre>"},{"location":"enhanced-tag-matching-migration/#summary","title":"Summary","text":"<p>Enhanced tag matching provides powerful capabilities while maintaining full backward compatibility:</p> <p>\u2705 Zero breaking changes - existing code works unchanged \u2705 Gradual migration - enhance at your own pace \u2705 Smart fallbacks - graceful degradation when preferred services unavailable \u2705 Cost control - exclude expensive services with <code>-premium</code> \u2705 Safety guardrails - exclude experimental/beta with <code>-experimental</code>, <code>-beta</code> \u2705 Regional preferences - prefer local services with <code>+us-east-1</code></p> <p>Start small with simple preferences, then gradually add more sophisticated matching logic as you see the benefits in your specific use cases.</p>"},{"location":"environment-variables/","title":"Environment Variables Reference","text":"<p>Configure MCP Mesh agents and services with environment variables</p>"},{"location":"environment-variables/#overview","title":"Overview","text":"<p>MCP Mesh can be configured using environment variables, allowing you to customize behavior without changing code. Environment variables override <code>@mesh.agent</code> decorator parameters and provide flexibility for different deployment environments.</p>"},{"location":"environment-variables/#essential-environment-variables","title":"Essential Environment Variables","text":""},{"location":"environment-variables/#logging-and-debug","title":"Logging and Debug","text":"<pre><code># Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\nexport MCP_MESH_LOG_LEVEL=DEBUG\n\n# Enable debug mode (forces DEBUG level)\nexport MCP_MESH_DEBUG_MODE=true\n</code></pre>"},{"location":"environment-variables/#registry-configuration","title":"Registry Configuration","text":"<pre><code># Complete registry URL\nexport MCP_MESH_REGISTRY_URL=http://localhost:8000\n\n# Or set host and port separately\nexport MCP_MESH_REGISTRY_HOST=localhost\nexport MCP_MESH_REGISTRY_PORT=8000\n</code></pre>"},{"location":"environment-variables/#agent-configuration","title":"Agent Configuration","text":"<pre><code># Override agent name\nexport MCP_MESH_AGENT_NAME=my-custom-agent\n\n# Set agent namespace\nexport MCP_MESH_NAMESPACE=development\n\n# Enable/disable auto-run\nexport MCP_MESH_AUTO_RUN=true\n\n# Auto-run heartbeat interval (seconds)\nexport MCP_MESH_AUTO_RUN_INTERVAL=30\n</code></pre>"},{"location":"environment-variables/#http-server-settings","title":"HTTP Server Settings","text":"<pre><code># Server binding address (what interface to bind to)\nexport HOST=0.0.0.0\n\n# Agent HTTP port\nexport MCP_MESH_HTTP_PORT=8080\n\n# Enable/disable HTTP transport\nexport MCP_MESH_HTTP_ENABLED=true\n\n# External hostname announced to registry\nexport MCP_MESH_HTTP_HOST=my-agent\n</code></pre>"},{"location":"environment-variables/#health-and-monitoring","title":"Health and Monitoring","text":"<pre><code># Health check interval (seconds)\nexport MCP_MESH_HEALTH_INTERVAL=30\n\n# Enable global mesh functionality\nexport MCP_MESH_ENABLED=true\n</code></pre>"},{"location":"environment-variables/#registry-server-configuration","title":"Registry Server Configuration","text":"<p>These variables configure the Go registry server (<code>mcp-mesh-registry</code>)</p>"},{"location":"environment-variables/#core-server-settings","title":"Core Server Settings","text":"<pre><code># Server binding host\nexport HOST=localhost\n\n# Server port\nexport PORT=8000\n\n# Database connection URL\nexport DATABASE_URL=mcp_mesh_registry.db\n\n# Registry service name\nexport REGISTRY_NAME=mcp-mesh-registry\n</code></pre>"},{"location":"environment-variables/#fast-heartbeat-health-monitoring","title":"Fast Heartbeat &amp; Health Monitoring","text":"<pre><code># Agent heartbeat timeout - when to mark agents as unhealthy (seconds)\n# Optimized for 5-second HEAD heartbeats: 4 missed beats = 20s\nexport DEFAULT_TIMEOUT_THRESHOLD=20\n\n# Health monitor scan interval - how often to check for unhealthy agents (seconds)\nexport HEALTH_CHECK_INTERVAL=10\n\n# Agent eviction threshold - when to remove stale agents (seconds)\nexport DEFAULT_EVICTION_THRESHOLD=60\n</code></pre>"},{"location":"environment-variables/#cache-and-performance","title":"Cache and Performance","text":"<pre><code># Response cache TTL (seconds)\nexport CACHE_TTL=30\n\n# Enable response caching\nexport ENABLE_RESPONSE_CACHE=true\n</code></pre>"},{"location":"environment-variables/#logging-and-debug_1","title":"Logging and Debug","text":"<pre><code># Registry log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\nexport MCP_MESH_LOG_LEVEL=INFO\n\n# Enable debug mode (true/false)\nexport MCP_MESH_DEBUG_MODE=false\n</code></pre>"},{"location":"environment-variables/#cors-configuration","title":"CORS Configuration","text":"<pre><code># Enable CORS support\nexport ENABLE_CORS=true\n\n# Allowed origins (comma-separated)\nexport ALLOWED_ORIGINS=\"*\"\n\n# Allowed HTTP methods\nexport ALLOWED_METHODS=\"GET,POST,PUT,DELETE,OPTIONS\"\n\n# Allowed headers\nexport ALLOWED_HEADERS=\"*\"\n</code></pre>"},{"location":"environment-variables/#feature-flags","title":"Feature Flags","text":"<pre><code># Enable metrics collection\nexport ENABLE_METRICS=true\n\n# Enable Prometheus metrics\nexport ENABLE_PROMETHEUS=true\n\n# Enable event system\nexport ENABLE_EVENTS=true\n</code></pre>"},{"location":"environment-variables/#configuration-patterns","title":"Configuration Patterns","text":""},{"location":"environment-variables/#registry-server-configurations","title":"Registry Server Configurations","text":""},{"location":"environment-variables/#development-registry","title":"Development Registry","text":"<pre><code># .env.registry.development\nMCP_MESH_LOG_LEVEL=DEBUG\nMCP_MESH_DEBUG_MODE=true\nHOST=localhost\nPORT=8000\nDEFAULT_TIMEOUT_THRESHOLD=10  # Fast detection for development\nHEALTH_CHECK_INTERVAL=5       # Quick scans for development\nENABLE_RESPONSE_CACHE=false   # Disable cache for testing\n</code></pre>"},{"location":"environment-variables/#production-registry","title":"Production Registry","text":"<pre><code># .env.registry.production\nMCP_MESH_LOG_LEVEL=INFO\nMCP_MESH_DEBUG_MODE=false\nHOST=0.0.0.0\nPORT=8000\nDEFAULT_TIMEOUT_THRESHOLD=20  # Balanced for production\nHEALTH_CHECK_INTERVAL=10      # Regular monitoring\nENABLE_RESPONSE_CACHE=true\nCACHE_TTL=30\nDATABASE_URL=postgresql://user:pass@db:5432/mcp_mesh\n</code></pre>"},{"location":"environment-variables/#high-performance-registry","title":"High-Performance Registry","text":"<pre><code># .env.registry.high-perf\nMCP_MESH_LOG_LEVEL=WARNING\nDEFAULT_TIMEOUT_THRESHOLD=5   # Ultra-fast detection\nHEALTH_CHECK_INTERVAL=2       # Very frequent monitoring\nCACHE_TTL=60                  # Longer cache for performance\nENABLE_RESPONSE_CACHE=true\n</code></pre>"},{"location":"environment-variables/#agent-development-environment","title":"Agent Development Environment","text":"<pre><code># .env.development\nMCP_MESH_LOG_LEVEL=DEBUG\nMCP_MESH_DEBUG_MODE=true\nMCP_MESH_REGISTRY_URL=http://localhost:8000\nMCP_MESH_NAMESPACE=development\nMCP_MESH_AUTO_RUN_INTERVAL=10\nMCP_MESH_HEALTH_INTERVAL=15\n</code></pre>"},{"location":"environment-variables/#production-environment","title":"Production Environment","text":"<pre><code># .env.production\nMCP_MESH_LOG_LEVEL=INFO\nMCP_MESH_DEBUG_MODE=false\nMCP_MESH_REGISTRY_URL=http://registry.company.com:8000\nMCP_MESH_NAMESPACE=production\nMCP_MESH_AUTO_RUN_INTERVAL=30\nMCP_MESH_HEALTH_INTERVAL=30\nHOST=0.0.0.0\nMCP_MESH_HTTP_HOST=api-service.company.com\n</code></pre>"},{"location":"environment-variables/#testing-environment","title":"Testing Environment","text":"<pre><code># .env.testing\nMCP_MESH_LOG_LEVEL=WARNING\nMCP_MESH_DEBUG_MODE=false\nMCP_MESH_AUTO_RUN=false\nMCP_MESH_REGISTRY_URL=http://test-registry:8000\nMCP_MESH_NAMESPACE=testing\n</code></pre>"},{"location":"environment-variables/#using-environment-variables","title":"Using Environment Variables","text":""},{"location":"environment-variables/#with-registry-server","title":"With Registry Server","text":"<pre><code># Start registry with environment file\nmcp-mesh-registry --host 0.0.0.0 --port 8000\n\n# Or with environment variables\nDEFAULT_TIMEOUT_THRESHOLD=10 HEALTH_CHECK_INTERVAL=5 mcp-mesh-registry\n\n# Load environment file manually\nsource .env.registry.development\nmcp-mesh-registry\n\n# Check registry configuration\nmcp-mesh-registry --help\n</code></pre>"},{"location":"environment-variables/#with-meshctl","title":"With meshctl","text":"<pre><code># Load environment file\nmeshctl start my_agent.py --env-file .env.development\n\n# Pass individual variables\nmeshctl start my_agent.py --env MCP_MESH_LOG_LEVEL=DEBUG --env MCP_MESH_DEBUG_MODE=true\n\n# Use system environment\nexport MCP_MESH_LOG_LEVEL=DEBUG\nmeshctl start my_agent.py\n</code></pre>"},{"location":"environment-variables/#with-python","title":"With Python","text":"<pre><code># Load environment file manually\nsource .env.development\npython my_agent.py\n\n# Or use python-dotenv in your agent\npip install python-dotenv\n</code></pre> <pre><code>import os\nfrom dotenv import load_dotenv\n\n# Load environment file\nload_dotenv('.env.development')\n\n# Your agent code here\n</code></pre>"},{"location":"environment-variables/#override-agent-configuration","title":"Override Agent Configuration","text":"<p>Environment variables override <code>@mesh.agent</code> decorator parameters:</p> <pre><code>@mesh.agent(\n    name=\"default-service\",\n    http_port=8080,\n    auto_run=True,\n    namespace=\"default\"\n)\nclass MyAgent:\n    pass\n</code></pre> <pre><code># Override decorator settings\nexport MCP_MESH_AGENT_NAME=overridden-service\nexport MCP_MESH_HTTP_PORT=9090\nexport MCP_MESH_AUTO_RUN=false\nexport MCP_MESH_NAMESPACE=custom\n\n# Runs with overridden values\npython my_agent.py\n</code></pre>"},{"location":"environment-variables/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"environment-variables/#kubernetes-environment","title":"Kubernetes Environment","text":"<pre><code># Service discovery variables (auto-detected in K8s)\nexport SERVICE_NAME=my-service\nexport NAMESPACE=production\nexport POD_NAME=my-service-abc123\nexport POD_IP=10.244.1.5\nexport NODE_NAME=worker-node-1\n</code></pre>"},{"location":"environment-variables/#docker-compose-environment","title":"Docker Compose Environment","text":"<pre><code># docker-compose.yml\nservices:\n  my-agent:\n    environment:\n      - HOST=0.0.0.0 # Bind to all interfaces\n      - MCP_MESH_HTTP_HOST=my-agent # Service name for inter-container communication\n      - MCP_MESH_HTTP_PORT=8080\n      - MCP_MESH_REGISTRY_URL=http://registry:8000\n      - MCP_MESH_LOG_LEVEL=INFO\n      - MCP_MESH_NAMESPACE=docker\n</code></pre>"},{"location":"environment-variables/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Python runtime optimization\nexport PYTHONUNBUFFERED=1\nexport PYTHONPATH=/app/lib:/app/agents\n\n# Uvicorn server settings (for FastMCP)\nexport UVICORN_WORKERS=1\nexport UVICORN_LOOP=auto\nexport UVICORN_LIFESPAN=on\n</code></pre>"},{"location":"environment-variables/#fast-heartbeat-optimization","title":"Fast Heartbeat Optimization","text":"<p>New in v0.3+: Ultra-fast topology change detection</p> <pre><code># Ultra-aggressive (sub-5 second detection)\nexport DEFAULT_TIMEOUT_THRESHOLD=5   # Mark unhealthy after 5s\nexport HEALTH_CHECK_INTERVAL=2       # Scan every 2 seconds\n\n# Balanced (default - sub-20 second detection)\nexport DEFAULT_TIMEOUT_THRESHOLD=20  # Mark unhealthy after 20s (4 missed 5s heartbeats)\nexport HEALTH_CHECK_INTERVAL=10      # Scan every 10 seconds\n\n# Conservative (legacy behavior)\nexport DEFAULT_TIMEOUT_THRESHOLD=60  # Mark unhealthy after 60s\nexport HEALTH_CHECK_INTERVAL=30      # Scan every 30 seconds\n\n# Production recommended\nexport DEFAULT_TIMEOUT_THRESHOLD=20\nexport HEALTH_CHECK_INTERVAL=10\n</code></pre> <p>How it works:</p> <ul> <li>Agents send lightweight HEAD requests every ~5 seconds</li> <li>Registry responds with topology change status (200/202/410)</li> <li>Background monitor detects unhealthy agents and creates events</li> <li>Other agents get notified via 202 responses on their HEAD checks</li> </ul>"},{"location":"environment-variables/#dynamic-updates","title":"Dynamic Updates","text":"<pre><code># Enable dynamic capability updates\nexport MCP_MESH_DYNAMIC_UPDATES=true\n\n# Update strategy (immediate, graceful)\nexport MCP_MESH_UPDATE_STRATEGY=graceful\n\n# Grace period for updates (seconds)\nexport MCP_MESH_UPDATE_GRACE_PERIOD=30\n</code></pre>"},{"location":"environment-variables/#real-world-examples","title":"Real-World Examples","text":""},{"location":"environment-variables/#multi-service-development","title":"Multi-Service Development","text":"<pre><code># Terminal 1: Start registry with fast heartbeats\nexport MCP_MESH_LOG_LEVEL=DEBUG\nexport DEFAULT_TIMEOUT_THRESHOLD=10\nexport HEALTH_CHECK_INTERVAL=5\nmcp-mesh-registry --host localhost --port 8000\n\n# Terminal 2: Start auth service\nexport MCP_MESH_AGENT_NAME=auth-service\nexport MCP_MESH_HTTP_PORT=8081\nexport MCP_MESH_NAMESPACE=dev\nexport MCP_MESH_LOG_LEVEL=DEBUG\npython services/auth.py\n\n# Terminal 3: Start API service\nexport MCP_MESH_AGENT_NAME=api-service\nexport MCP_MESH_HTTP_PORT=8082\nexport MCP_MESH_NAMESPACE=dev\nexport MCP_MESH_LOG_LEVEL=DEBUG\npython services/api.py\n</code></pre>"},{"location":"environment-variables/#registry-high-availability","title":"Registry High Availability","text":"<pre><code># Primary registry (port 8000)\nexport HOST=0.0.0.0\nexport PORT=8000\nexport DATABASE_URL=postgresql://user:pass@primary-db:5432/mcp_mesh\nexport DEFAULT_TIMEOUT_THRESHOLD=20\nexport HEALTH_CHECK_INTERVAL=10\nmcp-mesh-registry &amp;\n\n# Backup registry (port 8001) - read-only mode for failover\nexport HOST=0.0.0.0\nexport PORT=8001\nexport DATABASE_URL=postgresql://user:pass@replica-db:5432/mcp_mesh\nexport DEFAULT_TIMEOUT_THRESHOLD=30\nexport HEALTH_CHECK_INTERVAL=15\nmcp-mesh-registry &amp;\n</code></pre>"},{"location":"environment-variables/#remote-registry-connection","title":"Remote Registry Connection","text":"<pre><code># Connect to shared development registry\nexport MCP_MESH_REGISTRY_URL=http://dev-registry.team.local:8000\nexport MCP_MESH_NAMESPACE=shared-dev\nexport MCP_MESH_AGENT_NAME=my-feature-branch\n\npython my_agent.py\n</code></pre>"},{"location":"environment-variables/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># Test environment variables\nexport MCP_MESH_AUTO_RUN=false          # Don't auto-start in tests\nexport MCP_MESH_LOG_LEVEL=ERROR         # Minimal logging\nexport MCP_MESH_REGISTRY_URL=http://test-registry:8000\nexport MCP_MESH_NAMESPACE=ci-${BUILD_ID}\n\n# Run tests\npython -m pytest tests/\n</code></pre>"},{"location":"environment-variables/#load-testing-setup","title":"Load Testing Setup","text":"<pre><code># Start multiple instances with unique names\nfor i in {1..5}; do\n  export MCP_MESH_AGENT_NAME=load-test-agent-$i\n  export MCP_MESH_HTTP_PORT=$((8080 + i))\n  python my_agent.py &amp;\ndone\n\n# Monitor all instances\nmeshctl list --filter load-test\n</code></pre>"},{"location":"environment-variables/#environment-variable-hierarchy","title":"Environment Variable Hierarchy","text":"<p>Environment variables are applied in this order (last wins):</p> <ol> <li>System environment variables</li> <li>Environment files (<code>.env</code>)</li> <li>meshctl <code>--env</code> flags</li> <li><code>@mesh.agent</code> decorator parameters</li> </ol> <pre><code># Example: Final port will be 9999\nexport MCP_MESH_HTTP_PORT=8080              # System (1)\n# .env file has: MCP_MESH_HTTP_PORT=8081    # File (2)\nmeshctl start my_agent.py --env MCP_MESH_HTTP_PORT=9999  # Flag (3)\n</code></pre>"},{"location":"environment-variables/#debugging-environment-issues","title":"Debugging Environment Issues","text":""},{"location":"environment-variables/#check-current-environment","title":"Check Current Environment","text":"<pre><code># Show all MCP Mesh environment variables\nenv | grep MCP_MESH\n\n# Test specific variable\necho $MCP_MESH_LOG_LEVEL\n\n# Verify environment file loading\nmeshctl start my_agent.py --env-file .env.development --debug\n</code></pre>"},{"location":"environment-variables/#common-issues","title":"Common Issues","text":""},{"location":"environment-variables/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Check what's using a port\nlsof -i :8080\n\n# Use different port\nexport MCP_MESH_HTTP_PORT=8081\n</code></pre>"},{"location":"environment-variables/#2-registry-connection-failed","title":"2. Registry Connection Failed","text":"<pre><code># Test registry connectivity\ncurl -s http://localhost:8000/health\n\n# Use different registry\nexport MCP_MESH_REGISTRY_URL=http://backup-registry:8000\n</code></pre>"},{"location":"environment-variables/#3-agent-name-conflicts","title":"3. Agent Name Conflicts","text":"<pre><code># Use unique agent name\nexport MCP_MESH_AGENT_NAME=my-unique-agent-$(date +%s)\n\n# Check existing agents\nmeshctl list\n</code></pre>"},{"location":"environment-variables/#4-environment-file-not-loaded","title":"4. Environment File Not Loaded","text":"<pre><code># Verify file exists and is readable\ncat .env.development\n\n# Use absolute path\nmeshctl start my_agent.py --env-file /full/path/to/.env.development\n</code></pre>"},{"location":"environment-variables/#environment-templates","title":"Environment Templates","text":""},{"location":"environment-variables/#development-template","title":"Development Template","text":"<pre><code># .env.development\nMCP_MESH_LOG_LEVEL=DEBUG\nMCP_MESH_DEBUG_MODE=true\nMCP_MESH_REGISTRY_URL=http://localhost:8000\nMCP_MESH_NAMESPACE=development\nMCP_MESH_AUTO_RUN_INTERVAL=10\nMCP_MESH_HEALTH_INTERVAL=15\nHOST=0.0.0.0\n</code></pre>"},{"location":"environment-variables/#production-template","title":"Production Template","text":"<pre><code># .env.production\nMCP_MESH_LOG_LEVEL=INFO\nMCP_MESH_DEBUG_MODE=false\nMCP_MESH_REGISTRY_URL=https://registry.company.com\nMCP_MESH_NAMESPACE=production\nMCP_MESH_AUTO_RUN_INTERVAL=30\nMCP_MESH_HEALTH_INTERVAL=30\nMCP_MESH_UPDATE_STRATEGY=graceful\nMCP_MESH_UPDATE_GRACE_PERIOD=60\nHOST=0.0.0.0\n</code></pre>"},{"location":"environment-variables/#docker-template","title":"Docker Template","text":"<pre><code># .env.docker\nHOST=0.0.0.0\nMCP_MESH_HTTP_HOST=my-service\nMCP_MESH_REGISTRY_URL=http://registry:8000\nMCP_MESH_NAMESPACE=docker\nMCP_MESH_LOG_LEVEL=INFO\nPYTHONUNBUFFERED=1\n</code></pre>"},{"location":"environment-variables/#security-considerations","title":"Security Considerations","text":""},{"location":"environment-variables/#sensitive-information","title":"Sensitive Information","text":"<pre><code># \u274c Don't put secrets in environment files committed to git\nMCP_MESH_API_KEY=secret123\n\n# \u2705 Use secure secret management\nexport MCP_MESH_API_KEY=$(kubectl get secret mesh-api-key -o jsonpath='{.data.key}' | base64 -d)\n\n# \u2705 Or use external secret providers\nexport MCP_MESH_REGISTRY_URL=$(vault kv get -field=url secret/mesh/registry)\n</code></pre>"},{"location":"environment-variables/#network-security","title":"Network Security","text":"<pre><code># Use secure URLs in production\nexport MCP_MESH_REGISTRY_URL=https://registry.company.com  # \u2705 HTTPS\n\n# Bind to specific interfaces when needed\nexport HOST=127.0.0.1  # \u2705 Localhost only\nexport HOST=0.0.0.0    # \u26a0\ufe0f All interfaces (use carefully)\n</code></pre>"},{"location":"environment-variables/#next-steps","title":"Next Steps","text":"<p>Now that you understand environment configuration:</p> <ol> <li>Advanced Patterns - Complex multi-service architectures</li> <li>Local Development - Professional development workflows</li> <li>Production Deployment - Container orchestration</li> </ol>"},{"location":"environment-variables/#summary","title":"Summary","text":""},{"location":"environment-variables/#agent-configuration-python","title":"Agent Configuration (Python)","text":"<p>Focus on <code>MCP_MESH_*</code> variables for agent behavior, heartbeat intervals, and service discovery.</p>"},{"location":"environment-variables/#registry-configuration-go","title":"Registry Configuration (Go)","text":"<p>Focus on <code>DEFAULT_TIMEOUT_THRESHOLD</code> and <code>HEALTH_CHECK_INTERVAL</code> for fast topology detection.</p> <p>\ud83d\udca1 Pro Tip: Use environment files for different deployment stages - keeps configuration organized and secure.</p> <p>\ud83d\udd27 Development Tip: Set <code>MCP_MESH_DEBUG_MODE=true</code> during development for detailed logging and faster feedback.</p> <p>\ud83d\ude80 Production Tip: Use <code>DEFAULT_TIMEOUT_THRESHOLD=20</code> and <code>HEALTH_CHECK_INTERVAL=10</code> for optimal fast heartbeat performance.</p> <p>\u26a1 Performance Tip: For ultra-fast systems, try <code>DEFAULT_TIMEOUT_THRESHOLD=5</code> and <code>HEALTH_CHECK_INTERVAL=2</code> for sub-5 second topology detection.</p> <p>\ud83d\udee1\ufe0f Registry Tip: Use <code>DATABASE_URL</code> with PostgreSQL in production for better performance and reliability.</p>"},{"location":"mesh-decorators/","title":"MCP Mesh Decorators Reference","text":"<p>Complete guide to @mesh.tool and @mesh.agent decorators - order matters!</p>"},{"location":"mesh-decorators/#critical-decorator-order","title":"Critical: Decorator Order","text":"<p>\u26a0\ufe0f IMPORTANT: Mesh decorators must come AFTER MCP decorators:</p> <pre><code># \u2705 CORRECT ORDER\n@app.tool()        # \u2190 FastMCP decorator FIRST\n@mesh.tool(        # \u2190 Mesh decorator SECOND\n    capability=\"greeting\"\n)\ndef hello_world():\n    return \"Hello!\"\n\n# \u274c WRONG ORDER - This will not work!\n@mesh.tool(capability=\"greeting\")  # \u2190 Wrong: mesh first\n@app.tool()                        # \u2190 Wrong: FastMCP second\ndef broken_function():\n    return \"This won't work\"\n</code></pre> <p>Why order matters: Mesh decorators need to wrap and enhance MCP decorators to provide dependency injection and orchestration.</p>"},{"location":"mesh-decorators/#meshtool-function-level-capabilities","title":"@mesh.tool - Function-Level Capabilities","text":"<p>The <code>@mesh.tool</code> decorator registers individual functions as mesh capabilities with dependency injection.</p>"},{"location":"mesh-decorators/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>capability</code> <code>str \\| None</code> <code>None</code> Capability name others can depend on <code>tags</code> <code>list[str] \\| None</code> <code>[]</code> Tags for smart service discovery <code>version</code> <code>str</code> <code>\"1.0.0\"</code> Semantic version for this capability <code>dependencies</code> <code>list[str \\| dict] \\| None</code> <code>None</code> Required capabilities (simple or complex) <code>description</code> <code>str \\| None</code> Function docstring Human-readable description <code>**kwargs</code> <code>Any</code> - Additional metadata"},{"location":"mesh-decorators/#simple-example","title":"Simple Example","text":"<pre><code>import mesh\nfrom fastmcp import FastMCP\n\napp = FastMCP(\"My Service\")\n\n@app.tool()  # FastMCP decorator first\n@mesh.tool(  # Mesh decorator second\n    capability=\"greeting\",\n    tags=[\"social\", \"basic\"],\n    version=\"1.0.0\",\n    description=\"Simple greeting function\"\n)\ndef say_hello(name: str = \"World\") -&gt; str:\n    \"\"\"Say hello to someone.\"\"\"\n    return f\"Hello, {name}!\"\n</code></pre>"},{"location":"mesh-decorators/#dependencies-simple-vs-complex","title":"Dependencies: Simple vs Complex","text":""},{"location":"mesh-decorators/#simple-string-dependencies","title":"Simple String Dependencies","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"weather_report\",\n    dependencies=[\"date_service\", \"location_service\"]  # Simple string array\n)\ndef get_weather(\n    date_service: mesh.McpMeshAgent = None,\n    location_service: mesh.McpMeshAgent = None\n) -&gt; str:\n    date = date_service() if date_service else \"unknown\"\n    location = location_service() if location_service else \"unknown\"\n    return f\"Weather for {location} on {date}: Sunny\"\n</code></pre>"},{"location":"mesh-decorators/#complex-object-dependencies","title":"Complex Object Dependencies","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"advanced_weather\",\n    dependencies=[\n        \"date_service\",  # Simple dependency\n        {\n            \"capability\": \"location_service\",\n            \"tags\": [\"geo\", \"precise\"],           # Smart tag matching\n            \"version\": \"&gt;=2.0.0\",               # Version constraint\n            \"namespace\": \"production\"            # Specific namespace\n        },\n        {\n            \"capability\": \"info\",\n            \"tags\": [\"system\", \"weather\"]        # Gets weather-specific info\n        }\n    ],\n    tags=[\"weather\", \"advanced\"],\n    version=\"2.1.0\"\n)\ndef get_advanced_weather(\n    date_service: mesh.McpMeshAgent = None,\n    location_service: mesh.McpMeshAgent = None,\n    info: mesh.McpMeshAgent = None\n) -&gt; dict:\n    \"\"\"Advanced weather with multiple tagged dependencies.\"\"\"\n    return {\n        \"date\": date_service() if date_service else \"unknown\",\n        \"location\": location_service() if location_service else \"unknown\",\n        \"system_info\": info() if info else {}\n    }\n</code></pre>"},{"location":"mesh-decorators/#dependency-object-structure","title":"Dependency Object Structure","text":"<p>For complex dependencies, use this structure:</p> <pre><code>{\n    \"capability\": \"required_capability_name\",  # Required: capability to find\n    \"tags\": [\"tag1\", \"tag2\"],                 # Optional: tags for smart matching\n    \"version\": \"&gt;=1.5.0,&lt;2.0.0\",             # Optional: semantic version constraint\n    \"namespace\": \"production\"                  # Optional: specific namespace\n}\n</code></pre>"},{"location":"mesh-decorators/#version-constraints","title":"Version Constraints","text":"<p>Full semantic versioning support:</p> <pre><code>@mesh.tool(\n    capability=\"data_processor\",\n    version=\"2.1.3\",  # This tool's version\n    dependencies=[\n        {\n            \"capability\": \"database\",\n            \"version\": \"&gt;=3.0.0\"      # Minimum version\n        },\n        {\n            \"capability\": \"cache\",\n            \"version\": \"~2.1.0\"       # Compatible with 2.1.x\n        },\n        {\n            \"capability\": \"api\",\n            \"version\": \"&gt;=1.0.0,&lt;2.0.0\"  # Range constraint\n        }\n    ]\n)\ndef process_data():\n    # Implementation\n    pass\n</code></pre>"},{"location":"mesh-decorators/#enhanced-tag-matching-with-operators","title":"Enhanced Tag Matching with \u00b1 Operators","text":"<p>New in v0.4+: Smart tag matching with preference and exclusion operators</p> <p>MCP Mesh supports enhanced tag matching with <code>+</code> (preferred) and <code>-</code> (excluded) operators for intelligent service selection:</p>"},{"location":"mesh-decorators/#tag-operators","title":"Tag Operators","text":"<ul> <li>No prefix: Required tag (must be present) - <code>\"claude\"</code></li> <li><code>+</code> prefix: Preferred tag (bonus if present, no penalty if missing) - <code>\"+opus\"</code></li> <li><code>-</code> prefix: Excluded tag (must NOT be present, hard failure if found) - <code>\"-experimental\"</code></li> </ul>"},{"location":"mesh-decorators/#smart-llm-provider-selection","title":"Smart LLM Provider Selection","text":"<pre><code># Register multiple LLM providers with different capabilities\n@app.tool()\n@mesh.tool(capability=\"llm_service\", tags=[\"claude\", \"haiku\", \"fast\"])\ndef claude_haiku(): return \"Fast Claude Haiku response\"\n\n@app.tool()\n@mesh.tool(capability=\"llm_service\", tags=[\"claude\", \"sonnet\", \"balanced\"])\ndef claude_sonnet(): return \"Balanced Claude Sonnet response\"\n\n@app.tool()\n@mesh.tool(capability=\"llm_service\", tags=[\"claude\", \"opus\", \"premium\"])\ndef claude_opus(): return \"Premium Claude Opus response\"\n\n@app.tool()\n@mesh.tool(capability=\"llm_service\", tags=[\"claude\", \"experimental\", \"beta\"])\ndef claude_experimental(): return \"Experimental Claude features\"\n\n# Smart consumer with preferences and exclusions\n@app.tool()\n@mesh.tool(\n    capability=\"smart_chat\",\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\n            \"claude\",           # Required: must have claude\n            \"+opus\",            # Preferred: prefer opus if available\n            \"-experimental\"     # Excluded: never use experimental services\n        ]\n    }]\n)\ndef intelligent_chat(llm_service: mesh.McpMeshAgent = None) -&gt; str:\n    \"\"\"\n    Smart chat that:\n    - Requires Claude models\n    - Prefers Opus quality when available\n    - Never uses experimental/unstable services\n    - Gracefully falls back to Sonnet if Opus unavailable\n    \"\"\"\n    if not llm_service:\n        return \"No suitable LLM service available\"\n\n    return f\"Response from: {llm_service()}\"\n</code></pre>"},{"location":"mesh-decorators/#enhanced-matching-behavior","title":"Enhanced Matching Behavior","text":"<pre><code># Available providers:\n# - claude-haiku: [\"claude\", \"haiku\", \"fast\"]\n# - claude-sonnet: [\"claude\", \"sonnet\", \"balanced\"]\n# - claude-opus: [\"claude\", \"opus\", \"premium\"]\n# - claude-experimental: [\"claude\", \"experimental\", \"beta\"]\n\n# Consumer preferences and results:\n\"tags\": [\"claude\", \"+opus\"]                    # \u2192 Selects opus (preferred)\n\"tags\": [\"claude\", \"+balanced\"]                # \u2192 Selects sonnet (balanced)\n\"tags\": [\"claude\", \"+fast\", \"+haiku\"]          # \u2192 Selects haiku (both preferred)\n\"tags\": [\"claude\", \"-experimental\"]            # \u2192 Excludes experimental, selects any other\n\"tags\": [\"claude\", \"+opus\", \"-experimental\"]   # \u2192 Prefers opus, excludes experimental\n</code></pre>"},{"location":"mesh-decorators/#cost-control-and-safety","title":"Cost Control and Safety","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"budget_analysis\",\n    dependencies=[{\n        \"capability\": \"llm_service\",\n        \"tags\": [\n            \"claude\",\n            \"+balanced\",     # Prefer cost-effective options\n            \"-premium\",      # Exclude expensive premium services\n            \"-experimental\"  # Exclude potentially unstable services\n        ]\n    }]\n)\ndef cost_conscious_analysis(llm_service: mesh.McpMeshAgent = None):\n    \"\"\"Cost-conscious analysis that avoids premium pricing.\"\"\"\n    return llm_service() if llm_service else \"Budget service unavailable\"\n\n@app.tool()\n@mesh.tool(\n    capability=\"production_service\",\n    dependencies=[{\n        \"capability\": \"database_service\",\n        \"tags\": [\n            \"postgres\",\n            \"+primary\",      # Prefer primary database\n            \"+ssd\",          # Prefer SSD storage\n            \"-beta\",         # Never use beta versions\n            \"-experimental\"  # Never use experimental features\n        ]\n    }]\n)\ndef production_workflow(database_service: mesh.McpMeshAgent = None):\n    \"\"\"Production workflow with strict service requirements.\"\"\"\n    return database_service({\"query\": \"SELECT * FROM users\"}) if database_service else None\n</code></pre>"},{"location":"mesh-decorators/#priority-scoring-system","title":"Priority Scoring System","text":"<p>Enhanced tag matching uses priority scoring for automatic provider ranking:</p> <ul> <li>Required tags: 5 points each (must be present)</li> <li>Preferred tags: 10 bonus points each (bonus if present)</li> <li>Excluded tags: Immediate failure (provider eliminated)</li> <li>Highest scoring provider selected automatically</li> </ul> <pre><code># Example scoring:\n# Provider A: [\"claude\", \"opus\", \"premium\"]\n# Consumer needs: [\"claude\", \"+opus\", \"-experimental\"]\n# Score: claude(5) + opus(10) = 15 points \u2192 HIGH PRIORITY\n\n# Provider B: [\"claude\", \"sonnet\", \"balanced\"]\n# Consumer needs: [\"claude\", \"+opus\", \"-experimental\"]\n# Score: claude(5) = 5 points \u2192 LOWER PRIORITY\n\n# Provider C: [\"claude\", \"experimental\"]\n# Consumer needs: [\"claude\", \"+opus\", \"-experimental\"]\n# Score: ELIMINATED (experimental is excluded)\n\n# Result: Provider A selected (highest score)\n</code></pre>"},{"location":"mesh-decorators/#multi-tag-matching-legacy","title":"Multi-Tag Matching (Legacy)","text":"<p>Traditional exact tag matching is still supported:</p> <pre><code># Service provider offers multiple info types\n@app.tool()\n@mesh.tool(\n    capability=\"info\",\n    tags=[\"system\", \"general\", \"health\"]\n)\ndef get_system_health():\n    return {\"status\": \"healthy\", \"uptime\": \"5 days\"}\n\n@app.tool()\n@mesh.tool(\n    capability=\"info\",\n    tags=[\"system\", \"disk\", \"storage\"]\n)\ndef get_disk_info():\n    return {\"usage\": \"75%\", \"free\": \"250GB\"}\n\n# Consumer uses exact tags for specific info\n@app.tool()\n@mesh.tool(\n    capability=\"reporter\",\n    dependencies=[\n        {\n            \"capability\": \"info\",\n            \"tags\": [\"system\", \"general\"]  # Exact match: gets health info\n        },\n        {\n            \"capability\": \"info\",\n            \"tags\": [\"system\", \"disk\"]     # Exact match: gets disk info\n        }\n    ]\n)\ndef create_report(\n    health_info: mesh.McpMeshAgent = None,\n    disk_info: mesh.McpMeshAgent = None\n):\n    return {\n        \"health\": health_info() if health_info else {},\n        \"storage\": disk_info() if disk_info else {}\n    }\n</code></pre>"},{"location":"mesh-decorators/#advanced-meshtool-configuration-v03","title":"Advanced @mesh.tool Configuration (v0.3+)","text":"<p>New in v0.3+: Enhanced proxy auto-configuration through decorator kwargs</p> <p>The <code>@mesh.tool</code> decorator now supports advanced configuration kwargs that automatically configure enhanced MCP proxies with timeouts, retries, authentication, streaming, and session management.</p>"},{"location":"mesh-decorators/#enhanced-proxy-kwargs","title":"Enhanced Proxy Kwargs","text":"Parameter Type Default Description <code>timeout</code> <code>int</code> <code>30</code> Request timeout in seconds <code>retry_count</code> <code>int</code> <code>1</code> Number of retry attempts <code>custom_headers</code> <code>dict</code> <code>{}</code> Custom HTTP headers to inject <code>streaming</code> <code>bool</code> <code>False</code> Enable streaming capabilities <code>auth_required</code> <code>bool</code> <code>False</code> Require authentication <code>session_required</code> <code>bool</code> <code>False</code> Enable session affinity <code>stateful</code> <code>bool</code> <code>False</code> Mark as stateful capability <code>auto_session_management</code> <code>bool</code> <code>False</code> Enable automatic session handling"},{"location":"mesh-decorators/#timeout-configuration","title":"Timeout Configuration","text":"<p>Configure different timeouts for different types of operations:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"quick_lookup\",\n    timeout=5,  # Fast operations: 5 seconds\n    retry_count=2\n)\ndef quick_data_lookup(query: str) -&gt; dict:\n    \"\"\"Fast lookup with 5s timeout, 2 retries.\"\"\"\n    return {\"result\": f\"Quick result for {query}\"}\n\n@app.tool()\n@mesh.tool(\n    capability=\"heavy_computation\",\n    timeout=300,  # Heavy operations: 5 minutes\n    retry_count=1\n)\ndef complex_calculation(data: list) -&gt; dict:\n    \"\"\"Heavy computation with 5-minute timeout.\"\"\"\n    return {\"processed\": len(data), \"result\": \"computed\"}\n</code></pre>"},{"location":"mesh-decorators/#custom-headers-for-service-identification","title":"Custom Headers for Service Identification","text":"<p>Add custom headers for debugging, routing, or service identification:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"database_service\",\n    timeout=60,\n    custom_headers={\n        \"X-Service-Type\": \"database\",\n        \"X-Priority\": \"high\",\n        \"X-Cache-Control\": \"no-cache\"\n    }\n)\ndef query_database(sql: str) -&gt; dict:\n    \"\"\"Database query with custom headers for routing and debugging.\"\"\"\n    return {\"rows\": 42, \"query\": sql}\n\n@app.tool()\n@mesh.tool(\n    capability=\"external_api\",\n    timeout=30,\n    retry_count=3,\n    custom_headers={\n        \"X-External-Service\": \"weather-api\",\n        \"X-Rate-Limit\": \"100/hour\"\n    }\n)\ndef fetch_weather_data(location: str) -&gt; dict:\n    \"\"\"External API call with rate limiting headers.\"\"\"\n    return {\"location\": location, \"temperature\": \"22\u00b0C\"}\n</code></pre>"},{"location":"mesh-decorators/#streaming-capabilities","title":"Streaming Capabilities","text":"<p>Enable streaming for real-time data processing:</p> <pre><code>from typing import AsyncGenerator\n\n@app.tool()\n@mesh.tool(\n    capability=\"data_stream\",\n    streaming=True,          # Enables streaming proxy\n    timeout=600,             # Longer timeout for streams\n    custom_headers={\n        \"X-Stream-Type\": \"data\",\n        \"X-Content-Type\": \"application/json\"\n    }\n)\nasync def stream_processing_results(\n    batch_size: int = 100\n) -&gt; AsyncGenerator[dict, None]:\n    \"\"\"Stream processing results with enhanced proxy configuration.\"\"\"\n    for i in range(0, 1000, batch_size):\n        yield {\n            \"batch\": i // batch_size,\n            \"processed_items\": batch_size,\n            \"timestamp\": \"2025-01-01T00:00:00Z\"\n        }\n        await asyncio.sleep(0.1)  # Simulate processing time\n</code></pre>"},{"location":"mesh-decorators/#authentication-requirements","title":"Authentication Requirements","text":"<p>Mark capabilities that require authentication:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"secure_data\",\n    auth_required=True,      # Requires authentication\n    timeout=60,\n    custom_headers={\n        \"X-Security-Level\": \"high\",\n        \"X-Auth-Required\": \"bearer\"\n    }\n)\ndef get_sensitive_data(data_type: str) -&gt; dict:\n    \"\"\"Access sensitive data - requires authentication.\"\"\"\n    return {\n        \"data_type\": data_type,\n        \"classified\": True,\n        \"access_level\": \"authorized\"\n    }\n</code></pre>"},{"location":"mesh-decorators/#session-management-stickiness","title":"Session Management &amp; Stickiness","text":"<p>Enable session affinity for stateful operations:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"user_session\",\n    session_required=True,           # Enable session affinity\n    stateful=True,                   # Mark as stateful\n    auto_session_management=True,    # Automatic session handling\n    timeout=30,\n    custom_headers={\n        \"X-Session-Enabled\": \"true\",\n        \"X-Stateful\": \"true\"\n    }\n)\ndef manage_user_session(\n    session_id: str,\n    action: str,\n    user_data: dict = None\n) -&gt; dict:\n    \"\"\"Session-aware operation with automatic session stickiness.\"\"\"\n    # Session data automatically routed to same pod\n    if not hasattr(manage_user_session, '_sessions'):\n        manage_user_session._sessions = {}\n\n    if action == \"create\":\n        manage_user_session._sessions[session_id] = user_data or {}\n    elif action == \"get\":\n        return manage_user_session._sessions.get(session_id, {})\n    elif action == \"update\":\n        if session_id in manage_user_session._sessions:\n            manage_user_session._sessions[session_id].update(user_data or {})\n\n    return {\n        \"session_id\": session_id,\n        \"action\": action,\n        \"data\": manage_user_session._sessions.get(session_id, {})\n    }\n</code></pre>"},{"location":"mesh-decorators/#complete-enhanced-example","title":"Complete Enhanced Example","text":"<p>Here's a comprehensive example showing all advanced features:</p> <pre><code>import asyncio\nfrom datetime import datetime\nfrom typing import AsyncGenerator\nimport mesh\nfrom fastmcp import FastMCP\n\napp = FastMCP(\"Enhanced Service\")\n\n@app.tool()\n@mesh.tool(\n    capability=\"enhanced_processor\",\n    dependencies=[\"auth_service\", \"session_manager\"],\n    tags=[\"processing\", \"enhanced\", \"production\"],\n    version=\"2.0.0\",\n    # Enhanced proxy configuration\n    timeout=120,                     # 2-minute timeout\n    retry_count=3,                   # 3 retry attempts\n    streaming=True,                  # Enable streaming\n    auth_required=True,              # Require authentication\n    session_required=True,           # Enable session affinity\n    stateful=True,                   # Mark as stateful\n    auto_session_management=True,    # Automatic session handling\n    custom_headers={\n        \"X-Service-Type\": \"enhanced-processor\",\n        \"X-Processing-Level\": \"advanced\",\n        \"X-Stream-Enabled\": \"true\",\n        \"X-Auth-Required\": \"bearer\",\n        \"X-Session-Managed\": \"auto\"\n    }\n)\nasync def enhanced_data_processor(\n    session_id: str,\n    data_batch: list,\n    processing_type: str = \"standard\",\n    # Injected dependencies\n    auth_service: mesh.McpMeshAgent = None,\n    session_manager: mesh.McpMeshAgent = None\n) -&gt; AsyncGenerator[dict, None]:\n    \"\"\"\n    Enhanced data processor with full advanced configuration.\n\n    Features:\n    - 120s timeout with 3 retries\n    - Authentication verification\n    - Session affinity for stateful processing\n    - Streaming results with custom headers\n    - Dependency injection for auth and session services\n    \"\"\"\n\n    # Verify authentication\n    if auth_service:\n        auth_result = auth_service({\"session_id\": session_id})\n        if not auth_result.get(\"authenticated\"):\n            yield {\"error\": \"Authentication failed\"}\n            return\n\n    # Initialize session data\n    if session_manager:\n        session_manager({\n            \"action\": \"initialize\",\n            \"session_id\": session_id,\n            \"processing_type\": processing_type\n        })\n\n    # Stream processing results\n    total_items = len(data_batch)\n    for i, item in enumerate(data_batch):\n        # Simulate processing time\n        await asyncio.sleep(0.1)\n\n        yield {\n            \"session_id\": session_id,\n            \"item_index\": i,\n            \"item_data\": item,\n            \"processing_type\": processing_type,\n            \"progress\": (i + 1) / total_items,\n            \"timestamp\": datetime.now().isoformat(),\n            \"enhanced\": True,\n            \"authenticated\": True,\n            \"session_managed\": True\n        }\n\n    # Final result\n    yield {\n        \"session_id\": session_id,\n        \"status\": \"completed\",\n        \"total_processed\": total_items,\n        \"processing_type\": processing_type,\n        \"timestamp\": datetime.now().isoformat()\n    }\n</code></pre>"},{"location":"mesh-decorators/#automatic-proxy-selection","title":"Automatic Proxy Selection","text":"<p>Smart Proxy Selection: MCP Mesh automatically selects the appropriate proxy based on kwargs:</p> <ul> <li>Basic kwargs (<code>timeout</code>, <code>retry_count</code>) \u2192 <code>EnhancedMCPClientProxy</code></li> <li>Streaming enabled (<code>streaming=True</code>) \u2192 <code>EnhancedFullMCPProxy</code></li> <li>No special kwargs \u2192 Standard <code>MCPClientProxy</code> (backward compatible)</li> </ul> <pre><code># Gets EnhancedMCPClientProxy\n@mesh.tool(capability=\"basic\", timeout=60)\ndef basic_operation(): pass\n\n# Gets EnhancedFullMCPProxy\n@mesh.tool(capability=\"streaming\", streaming=True)\nasync def streaming_operation(): pass\n\n# Gets standard MCPClientProxy\n@mesh.tool(capability=\"simple\")\ndef simple_operation(): pass\n</code></pre>"},{"location":"mesh-decorators/#meshagent-agent-level-configuration","title":"@mesh.agent - Agent-Level Configuration","text":"<p>The <code>@mesh.agent</code> decorator configures the entire agent with server settings and lifecycle management.</p>"},{"location":"mesh-decorators/#parameters_1","title":"Parameters","text":"Parameter Type Default Description <code>name</code> <code>str</code> Required Agent name (mandatory!) <code>version</code> <code>str</code> <code>\"1.0.0\"</code> Agent version <code>description</code> <code>str \\| None</code> <code>None</code> Agent description <code>http_host</code> <code>str \\| None</code> <code>None</code> HTTP server host (auto-resolved) <code>http_port</code> <code>int</code> <code>0</code> HTTP server port (0 = auto-assign) <code>enable_http</code> <code>bool</code> <code>True</code> Enable HTTP endpoints <code>namespace</code> <code>str</code> <code>\"default\"</code> Agent namespace <code>health_interval</code> <code>int</code> <code>30</code> Health check interval (seconds) <code>auto_run</code> <code>bool</code> <code>True</code> Auto-start and keep alive <code>auto_run_interval</code> <code>int</code> <code>10</code> Keep-alive heartbeat (seconds) <code>**kwargs</code> <code>Any</code> - Additional agent metadata"},{"location":"mesh-decorators/#complete-agent-example","title":"Complete Agent Example","text":"<pre><code>import mesh\nfrom fastmcp import FastMCP\n\napp = FastMCP(\"Weather Service\")\n\n# Tools with mesh decorators\n@app.tool()\n@mesh.tool(\n    capability=\"current_weather\",\n    tags=[\"weather\", \"current\"],\n    version=\"1.2.0\",\n    dependencies=[\"location_service\"]\n)\ndef get_current_weather(location_service: mesh.McpMeshAgent = None):\n    location = location_service() if location_service else \"Unknown\"\n    return f\"Current weather in {location}: 22\u00b0C, Sunny\"\n\n@app.prompt()\n@mesh.tool(\n    capability=\"weather_prompt\",\n    tags=[\"weather\", \"ai\"],\n    dependencies=[\"current_weather\"]\n)\ndef weather_analysis_prompt(current_weather: mesh.McpMeshAgent = None):\n    weather = current_weather() if current_weather else \"No data\"\n    return f\"Analyze this weather: {weather}\"\n\n@app.resource(\"weather://config/{city}\")\n@mesh.tool(\n    capability=\"weather_config\",\n    tags=[\"weather\", \"config\"]\n)\nasync def weather_config(city: str):\n    return f\"Weather config for {city}: API enabled\"\n\n# Agent configuration\n@mesh.agent(\n    name=\"weather-service\",              # Required!\n    version=\"2.0.0\",\n    description=\"Advanced weather service with mesh integration\",\n    http_host=\"0.0.0.0\",                # Listen on all interfaces\n    http_port=9091,                     # Specific port\n    enable_http=True,\n    namespace=\"production\",\n    health_interval=60,                 # Health check every minute\n    auto_run=True,                      # Zero boilerplate!\n    auto_run_interval=15                # Heartbeat every 15 seconds\n)\nclass WeatherServiceAgent:\n    \"\"\"\n    Weather service agent demonstrating all mesh features.\n\n    Mesh automatically:\n    - Discovers the 'app' FastMCP instance\n    - Registers all @mesh.tool capabilities\n    - Starts HTTP server on configured port\n    - Manages health checks and keep-alive\n    - Handles dependency injection\n    \"\"\"\n    pass\n\n# No main method needed! Mesh handles everything.\n</code></pre>"},{"location":"mesh-decorators/#environment-variable-overrides","title":"Environment Variable Overrides","text":"<p>All agent parameters can be overridden with environment variables:</p> <pre><code># Override agent configuration\nexport MCP_MESH_HTTP_HOST=\"127.0.0.1\"\nexport MCP_MESH_HTTP_PORT=\"8080\"\nexport MCP_MESH_HTTP_ENABLED=\"true\"\nexport MCP_MESH_NAMESPACE=\"development\"\nexport MCP_MESH_HEALTH_INTERVAL=\"30\"\nexport MCP_MESH_AUTO_RUN=\"true\"\nexport MCP_MESH_AUTO_RUN_INTERVAL=\"10\"\nexport MCP_MESH_AGENT_NAME=\"custom-agent-name\"\n\n# Start agent (uses environment overrides)\npython my_agent.py\n</code></pre>"},{"location":"mesh-decorators/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"mesh-decorators/#self-dependencies","title":"Self-Dependencies","text":"<p>Agents can depend on their own capabilities:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"timestamp\",\n    tags=[\"time\", \"internal\"]\n)\ndef get_timestamp():\n    return datetime.now().isoformat()\n\n@app.tool()\n@mesh.tool(\n    capability=\"logged_greeting\",\n    dependencies=[\"timestamp\"],  # Self-dependency!\n    tags=[\"greeting\", \"logged\"]\n)\ndef hello_with_log(\n    name: str,\n    timestamp: mesh.McpMeshAgent = None\n) -&gt; str:\n    time = timestamp() if timestamp else \"unknown\"\n    greeting = f\"Hello {name}!\"\n    print(f\"[{time}] Generated greeting: {greeting}\")\n    return greeting\n</code></pre>"},{"location":"mesh-decorators/#namespace-isolation","title":"Namespace Isolation","text":"<p>Use namespaces to isolate environments:</p> <pre><code>@mesh.agent(\n    name=\"api-service\",\n    namespace=\"development\",  # Development namespace\n    http_port=8080\n)\nclass DevApiService:\n    pass\n\n@mesh.agent(\n    name=\"api-service\",\n    namespace=\"production\",   # Production namespace\n    http_port=9080\n)\nclass ProdApiService:\n    pass\n</code></pre>"},{"location":"mesh-decorators/#complex-dependency-chains","title":"Complex Dependency Chains","text":"<pre><code># Base service\n@app.tool()\n@mesh.tool(capability=\"database\", tags=[\"storage\", \"primary\"])\ndef connect_database():\n    return \"database_connection\"\n\n# Middle layer\n@app.tool()\n@mesh.tool(\n    capability=\"data_access\",\n    dependencies=[\"database\"],\n    tags=[\"data\", \"layer\"]\n)\ndef access_data(database: mesh.McpMeshAgent = None):\n    db = database() if database else None\n    return f\"data_from_{db}\"\n\n# Top layer\n@app.tool()\n@mesh.tool(\n    capability=\"business_logic\",\n    dependencies=[\n        \"data_access\",\n        {\n            \"capability\": \"cache\",\n            \"tags\": [\"performance\", \"redis\"]\n        }\n    ],\n    tags=[\"business\", \"api\"]\n)\ndef process_business_logic(\n    data_access: mesh.McpMeshAgent = None,\n    cache: mesh.McpMeshAgent = None\n):\n    data = data_access() if data_access else \"no_data\"\n    cached = cache() if cache else \"no_cache\"\n    return f\"processed_{data}_with_{cached}\"\n</code></pre>"},{"location":"mesh-decorators/#dependency-injection-types","title":"Dependency Injection Types","text":"<p>MCP Mesh provides two different proxy types for dependency injection, each designed for specific use cases:</p>"},{"location":"mesh-decorators/#mcpmeshagent-simple-tool-calls","title":"McpMeshAgent - Simple Tool Calls","text":"<p>Use <code>mesh.McpMeshAgent</code> when you need simple tool execution - calling remote functions with arguments:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"processor\",\n    dependencies=[\"service1\", \"service2\"]\n)\ndef process_data(\n    service1: mesh.McpMeshAgent = None,  # For simple tool calls\n    service2: mesh.McpMeshAgent = None   # Type-safe, IDE support\n):\n    # Direct function call - proxy knows which remote function to invoke\n    result1 = service1() if service1 else {}\n\n    # With arguments\n    result2 = service1({\"format\": \"JSON\"}) if service1 else {}\n\n    # Explicit invoke (same as call)\n    result3 = service2.invoke({\"param\": \"value\"}) if service2 else {}\n\n    return {\"result1\": result1, \"result2\": result2, \"result3\": result3}\n</code></pre> <p>Key Features of McpMeshAgent:</p> <ul> <li>\u2705 Function-to-function binding (no need to specify function names)</li> <li>\u2705 Simple <code>()</code> and <code>.invoke()</code> methods</li> <li>\u2705 Optimized for basic tool execution</li> <li>\u2705 Lightweight proxy with minimal overhead</li> </ul>"},{"location":"mesh-decorators/#mcpagent-full-mcp-protocol-access","title":"McpAgent - Full MCP Protocol Access","text":"<p>Use <code>mesh.McpAgent</code> when you need advanced MCP capabilities like listing tools, managing resources, prompts, streaming, or session management:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"advanced_processor\",\n    dependencies=[\"file_service\", \"api_service\"]\n)\nasync def advanced_processing(\n    file_service: mesh.McpAgent = None,     # Full MCP protocol access\n    api_service: mesh.McpAgent = None       # Advanced capabilities\n) -&gt; dict:\n    \"\"\"Advanced processing with full MCP protocol support.\"\"\"\n\n    if not file_service or not api_service:\n        return {\"error\": \"Services unavailable\"}\n\n    # === VANILLA MCP PROTOCOL METHODS (100% compatible) ===\n\n    # Discovery - List available capabilities\n    tools = await file_service.list_tools()\n    resources = await file_service.list_resources()\n    prompts = await file_service.list_prompts()\n\n    # Resource Management\n    config = await file_service.read_resource(\"file://config.json\")\n\n    # Prompt Templates\n    analysis_prompt = await file_service.get_prompt(\n        \"data_analysis\",\n        {\"dataset\": \"sales\", \"period\": \"Q4\"}\n    )\n\n    # === BACKWARD COMPATIBILITY ===\n\n    # Simple calls (McpMeshAgent compatibility)\n    basic_result = file_service({\"action\": \"scan\"})\n    api_result = api_service.invoke({\"method\": \"GET\", \"endpoint\": \"/status\"})\n\n    # === STREAMING CAPABILITIES (BREAKTHROUGH FEATURE) ===\n\n    # Stream large file processing\n    processed_chunks = []\n    async for chunk in file_service.call_tool_streaming(\n        \"process_large_file\",\n        {\"file\": \"massive_dataset.csv\", \"batch_size\": 1000}\n    ):\n        processed_chunks.append(chunk)\n        # Real-time processing progress\n        if chunk.get(\"type\") == \"progress\":\n            print(f\"Progress: {chunk['percent']}%\")\n\n    # === EXPLICIT SESSION MANAGEMENT (Phase 6) ===\n\n    # Create persistent session for stateful operations\n    session_id = await api_service.create_session()\n\n    # All calls with same session_id route to same agent instance\n    login_result = await api_service.call_with_session(\n        session_id,\n        tool=\"authenticate\",\n        credentials={\"user\": \"admin\"}\n    )\n\n    user_data = await api_service.call_with_session(\n        session_id,\n        tool=\"get_user_profile\"\n        # Session maintains authentication state\n    )\n\n    # Cleanup session when done\n    await api_service.close_session(session_id)\n\n    return {\n        \"discovered\": {\n            \"tools\": len(tools),\n            \"resources\": len(resources),\n            \"prompts\": len(prompts)\n        },\n        \"config\": config,\n        \"basic_results\": [basic_result, api_result],\n        \"streaming_chunks\": len(processed_chunks),\n        \"session_results\": [login_result, user_data],\n        \"analysis_template\": analysis_prompt\n    }\n</code></pre> <p>Key Features of McpAgent:</p> <ul> <li>\u2705 Complete MCP Protocol: <code>list_tools()</code>, <code>list_resources()</code>, <code>read_resource()</code>, <code>list_prompts()</code>, <code>get_prompt()</code></li> <li>\u2705 Streaming Support: <code>call_tool_streaming()</code> for real-time data processing</li> <li>\u2705 Session Management: <code>create_session()</code>, <code>call_with_session()</code>, <code>close_session()</code></li> <li>\u2705 Backward Compatibility: Supports <code>()</code> and <code>.invoke()</code> from McpMeshAgent</li> <li>\u2705 Discovery: Dynamic capability exploration at runtime</li> </ul>"},{"location":"mesh-decorators/#when-to-use-which-type","title":"When to Use Which Type?","text":"Use Case Recommended Type Reason Simple tool calls <code>McpMeshAgent</code> Lightweight, optimized for function-to-function calls Resource management <code>McpAgent</code> Need <code>read_resource()</code>, <code>list_resources()</code> Dynamic discovery <code>McpAgent</code> Need <code>list_tools()</code>, <code>list_prompts()</code> Streaming operations <code>McpAgent</code> Need <code>call_tool_streaming()</code> Session-based workflows <code>McpAgent</code> Need session management methods Multi-step protocols <code>McpAgent</code> Need full MCP protocol access Performance-critical <code>McpMeshAgent</code> Minimal overhead for simple calls"},{"location":"mesh-decorators/#proxy-selection-example","title":"Proxy Selection Example","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"hybrid_processor\",\n    dependencies=[\n        \"simple_math\",      # For basic calculations\n        \"file_manager\",     # For advanced file operations\n        \"stream_processor\"  # For streaming data\n    ]\n)\nasync def hybrid_processing(\n    # Simple tool calls - use McpMeshAgent\n    simple_math: mesh.McpMeshAgent = None,\n\n    # Advanced capabilities - use McpAgent\n    file_manager: mesh.McpAgent = None,\n    stream_processor: mesh.McpAgent = None\n) -&gt; dict:\n    # Simple calculation\n    result = simple_math({\"a\": 10, \"b\": 20, \"op\": \"add\"}) if simple_math else 0\n\n    # Advanced file operations\n    if file_manager:\n        files = await file_manager.list_resources()\n        config = await file_manager.read_resource(\"file://settings.json\")\n\n    # Streaming processing\n    chunks = []\n    if stream_processor:\n        async for chunk in stream_processor.call_tool_streaming(\"process\", {\"data\": result}):\n            chunks.append(chunk)\n\n    return {\n        \"calculation\": result,\n        \"files_found\": len(files) if file_manager else 0,\n        \"stream_chunks\": len(chunks)\n    }\n</code></pre>"},{"location":"mesh-decorators/#mixed-type-dependencies","title":"Mixed Type Dependencies","text":"<p>You can mix both types in the same function based on your specific needs:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"data_pipeline\",\n    dependencies=[\n        \"validator\",        # Simple validation calls\n        \"transformer\",      # Simple data transformation\n        \"storage_service\",  # Advanced resource management\n        \"notification_api\"  # Advanced streaming notifications\n    ]\n)\nasync def process_data_pipeline(\n    data: dict,\n    # Simple operations\n    validator: mesh.McpMeshAgent = None,\n    transformer: mesh.McpMeshAgent = None,\n\n    # Advanced operations\n    storage_service: mesh.McpAgent = None,\n    notification_api: mesh.McpAgent = None\n) -&gt; dict:\n    # Step 1: Simple validation\n    is_valid = validator({\"data\": data}) if validator else True\n    if not is_valid:\n        return {\"error\": \"Validation failed\"}\n\n    # Step 2: Simple transformation\n    transformed = transformer({\"data\": data, \"format\": \"normalized\"}) if transformer else data\n\n    # Step 3: Advanced storage with resource discovery\n    if storage_service:\n        # Discover available storage options\n        resources = await storage_service.list_resources()\n\n        # Use appropriate storage method\n        if \"database://primary\" in [r[\"uri\"] for r in resources]:\n            storage_result = await storage_service.call_with_session(\n                session_id=\"pipeline-session\",\n                tool=\"store_data\",\n                data=transformed\n            )\n\n    # Step 4: Stream real-time notifications\n    if notification_api:\n        async for notification in notification_api.call_tool_streaming(\n            \"send_progress\",\n            {\"pipeline_id\": \"data-pipeline\", \"status\": \"completed\"}\n        ):\n            print(f\"Notification: {notification}\")\n\n    return {\"status\": \"completed\", \"records_processed\": len(transformed)}\n</code></pre>"},{"location":"mesh-decorators/#testing-your-decorators","title":"Testing Your Decorators","text":""},{"location":"mesh-decorators/#check-service-registration","title":"Check Service Registration","text":"<pre><code># Verify capabilities are registered\ncurl -s http://localhost:8000/agents | \\\n  jq '.agents[] | {name: .name, capabilities: (.capabilities | keys)}'\n</code></pre>"},{"location":"mesh-decorators/#test-individual-capabilities","title":"Test Individual Capabilities","text":"<pre><code># Test a specific tool\ncurl -s -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"get_current_weather\",\n      \"arguments\": {}\n    }\n  }' | jq '.result'\n</code></pre>"},{"location":"mesh-decorators/#verify-dependency-injection","title":"Verify Dependency Injection","text":"<pre><code># Check if dependencies are resolved\ncurl -s http://localhost:8000/agents | \\\n  jq '.agents[] | select(.name==\"weather-service\") | .capabilities'\n</code></pre>"},{"location":"mesh-decorators/#common-patterns-and-best-practices","title":"Common Patterns and Best Practices","text":""},{"location":"mesh-decorators/#1-always-check-dependencies","title":"1. Always Check Dependencies","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"safe_processor\",\n    dependencies=[\"external_service\"]\n)\ndef process_safely(external_service: mesh.McpMeshAgent = None):\n    if external_service is None:\n        return {\"status\": \"degraded\", \"reason\": \"external_service_unavailable\"}\n\n    try:\n        result = external_service()\n        return {\"status\": \"success\", \"data\": result}\n    except Exception as e:\n        return {\"status\": \"error\", \"error\": str(e)}\n</code></pre>"},{"location":"mesh-decorators/#2-use-descriptive-tags","title":"2. Use Descriptive Tags","text":"<pre><code>@mesh.tool(\n    capability=\"user_service\",\n    tags=[\"users\", \"authentication\", \"api\", \"v2\"],  # Descriptive tags\n    version=\"2.1.0\"\n)\n</code></pre>"},{"location":"mesh-decorators/#3-version-your-capabilities","title":"3. Version Your Capabilities","text":"<pre><code>@mesh.tool(\n    capability=\"data_processor\",\n    version=\"3.2.1\",  # Semantic versioning\n    dependencies=[\n        {\n            \"capability\": \"database\",\n            \"version\": \"&gt;=4.0.0\"  # Ensure compatibility\n        }\n    ]\n)\n</code></pre>"},{"location":"mesh-decorators/#4-organize-by-namespace","title":"4. Organize by Namespace","text":"<pre><code># Different environments\n@mesh.agent(name=\"service\", namespace=\"development\")\n@mesh.agent(name=\"service\", namespace=\"staging\")\n@mesh.agent(name=\"service\", namespace=\"production\")\n</code></pre>"},{"location":"mesh-decorators/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mesh-decorators/#decorator-order-issues","title":"Decorator Order Issues","text":"<pre><code># Error: Mesh decorator applied before MCP decorator\nTypeError: mesh.tool() can only be applied to functions already decorated with MCP decorators\n</code></pre> <p>Solution: Always put <code>@mesh.tool</code> after <code>@app.tool</code>.</p>"},{"location":"mesh-decorators/#dependency-not-found","title":"Dependency Not Found","text":"<pre><code># Check what capabilities are available\ncurl -s http://localhost:8000/agents | jq '.agents[].capabilities | keys'\n\n# Check specific capability tags\ncurl -s http://localhost:8000/agents | jq '.agents[] | select(.capabilities.your_capability)'\n</code></pre>"},{"location":"mesh-decorators/#version-constraint-errors","title":"Version Constraint Errors","text":"<p>Make sure version strings are valid semantic versions:</p> <ul> <li>\u2705 <code>\"1.0.0\"</code>, <code>\"&gt;=2.1.0\"</code>, <code>\"~1.5.0\"</code></li> <li>\u274c <code>\"v1.0\"</code>, <code>\"latest\"</code>, <code>\"1\"</code></li> </ul>"},{"location":"mesh-decorators/#agent-name-required","title":"Agent Name Required","text":"<pre><code># \u274c This will fail\n@mesh.agent()  # Missing required 'name' parameter\n\n# \u2705 This works\n@mesh.agent(name=\"my-service\")\n</code></pre>"},{"location":"mesh-decorators/#next-steps","title":"Next Steps","text":"<p>Now that you understand mesh decorators, you can:</p> <ol> <li>Build Complex Agents - Multi-service architectures</li> <li>Local Development - Professional development setup</li> <li>Production Deployment - Containerized deployments</li> </ol> <p>\ud83d\udca1 Key Insight: The decorator order requirement ensures mesh can properly wrap and enhance MCP functionality with dependency injection.</p> <p>\ud83c\udff7\ufe0f Pro Tip: Use specific tag combinations to enable precise service selection in complex environments.</p> <p>\ud83c\udfaf Best Practice: Always version your capabilities and use semantic version constraints for dependencies.</p>"},{"location":"meshctl-cli/","title":"meshctl CLI Reference","text":"<p>Essential commands for managing MCP Mesh agents with the meshctl CLI tool</p>"},{"location":"meshctl-cli/#overview","title":"Overview","text":"<p><code>meshctl</code> is the command-line interface for MCP Mesh that helps you start, monitor, and manage your agents. It automatically handles the registry, provides beautiful monitoring displays, and simplifies development workflows.</p>"},{"location":"meshctl-cli/#quick-start","title":"Quick Start","text":"<pre><code># Start registry + agent in one command\nmeshctl start examples/hello_world.py\n\n# List running agents with beautiful table\nmeshctl list\n\n# Check detailed status\nmeshctl status --verbose\n</code></pre>"},{"location":"meshctl-cli/#essential-commands","title":"Essential Commands","text":""},{"location":"meshctl-cli/#1-starting-services","title":"1. Starting Services","text":""},{"location":"meshctl-cli/#start-registry-only","title":"Start Registry Only","text":"<pre><code># Start just the registry (useful for development)\nmeshctl start --registry-only\n\n# Start registry on custom port\nmeshctl start --registry-only --registry-port 9000\n</code></pre>"},{"location":"meshctl-cli/#start-single-agent","title":"Start Single Agent","text":"<pre><code># Start agent (registry starts automatically if needed)\nmeshctl start my_agent.py\n\n# Start with custom configuration\nmeshctl start my_agent.py --debug --verbose\n</code></pre>"},{"location":"meshctl-cli/#start-multiple-agents","title":"Start Multiple Agents","text":"<pre><code># Start multiple agents at once\nmeshctl start agent1.py agent2.py agent3.py\n\n# Start with environment variables\nmeshctl start my_agent.py --env KEY=value --env DEBUG=true\n</code></pre>"},{"location":"meshctl-cli/#2-monitoring-and-status","title":"2. Monitoring and Status","text":""},{"location":"meshctl-cli/#list-all-agents","title":"List All Agents","text":"<pre><code># Beautiful table view (recommended)\nmeshctl list\n\n# Wide view with endpoints and tool counts\nmeshctl list --wide\n\n# Filter by name pattern\nmeshctl list --filter weather\n\n# Show only healthy agents\nmeshctl list --healthy-only\n</code></pre> <p>Example output:</p> <pre><code>AGENT NAME       STATUS    UPTIME     CAPABILITIES           DEPENDENCIES    ENDPOINT\nweather-service  healthy   2m 30s     weather_data,forecast  date_service   http://localhost:9091\nhello-world      healthy   1m 45s     greeting               date_service   http://localhost:9090\nsystem-agent     healthy   3m 12s     date_service,info      -              http://localhost:8080\n</code></pre>"},{"location":"meshctl-cli/#detailed-status","title":"Detailed Status","text":"<pre><code># Show overall mesh status\nmeshctl status\n\n# Verbose status with detailed information\nmeshctl status --verbose\n\n# JSON output for automation\nmeshctl status --json\n</code></pre>"},{"location":"meshctl-cli/#3-configuration-management","title":"3. Configuration Management","text":""},{"location":"meshctl-cli/#view-configuration","title":"View Configuration","text":"<pre><code># Show current configuration\nmeshctl config show\n\n# Show config file location\nmeshctl config path\n</code></pre>"},{"location":"meshctl-cli/#update-configuration","title":"Update Configuration","text":"<pre><code># Set registry port\nmeshctl config set registry_port 9090\n\n# Set log level\nmeshctl config set log_level DEBUG\n\n# Reset to defaults\nmeshctl config reset\n</code></pre>"},{"location":"meshctl-cli/#useful-development-flags","title":"Useful Development Flags","text":""},{"location":"meshctl-cli/#auto-restart-and-file-watching","title":"Auto-Restart and File Watching","text":"<pre><code># Auto-restart on file changes (default: enabled)\nmeshctl start my_agent.py --auto-restart\n\n# Custom file watch pattern\nmeshctl start my_agent.py --watch-pattern \"*.py,*.json\"\n\n# Disable file watching\nmeshctl start my_agent.py --watch-files=false\n</code></pre>"},{"location":"meshctl-cli/#debugging-and-logging","title":"Debugging and Logging","text":"<pre><code># Enable debug mode\nmeshctl start my_agent.py --debug\n\n# Set custom log level\nmeshctl start my_agent.py --log-level DEBUG\n\n# Verbose output\nmeshctl start my_agent.py --verbose\n\n# Quiet mode (errors only)\nmeshctl start my_agent.py --quiet\n</code></pre>"},{"location":"meshctl-cli/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Custom database path\nmeshctl start --registry-only --db-path ./my_registry.db\n\n# Custom working directory\nmeshctl start my_agent.py --working-dir /path/to/project\n\n# Load environment file\nmeshctl start my_agent.py --env-file .env.development\n</code></pre>"},{"location":"meshctl-cli/#remote-registry-operations","title":"Remote Registry Operations","text":""},{"location":"meshctl-cli/#connect-to-remote-registry","title":"Connect to Remote Registry","text":"<pre><code># Connect to remote registry\nmeshctl list --registry-url http://production-registry:8000\n\n# Connect with custom host/port\nmeshctl list --registry-host prod.example.com --registry-port 9000\n\n# List agents from remote registry\nmeshctl list --registry-url https://secure-registry.example.com\n</code></pre>"},{"location":"meshctl-cli/#agent-registration","title":"Agent Registration","text":"<pre><code># Connect agent to external registry\nmeshctl start my_agent.py --registry-url http://remote-registry:8000 --connect-only\n</code></pre>"},{"location":"meshctl-cli/#process-management","title":"Process Management","text":""},{"location":"meshctl-cli/#detached-mode","title":"Detached Mode","text":"<pre><code># Run in background (detached)\nmeshctl start my_agent.py --detach\n\n# Custom PID file\nmeshctl start my_agent.py --detach --pid-file ./my_agent.pid\n\n# Check status of detached services\nmeshctl status\n</code></pre>"},{"location":"meshctl-cli/#graceful-shutdown","title":"Graceful Shutdown","text":"<pre><code># Custom shutdown timeout\nmeshctl start my_agent.py --shutdown-timeout 60\n\n# Custom startup timeout\nmeshctl start my_agent.py --startup-timeout 45\n</code></pre>"},{"location":"meshctl-cli/#advanced-usage-examples","title":"Advanced Usage Examples","text":""},{"location":"meshctl-cli/#development-workflow","title":"Development Workflow","text":"<pre><code># Terminal 1: Start registry for development\nmeshctl start --registry-only --debug\n\n# Terminal 2: Start your agent with hot reload\nmeshctl start my_agent.py --debug --verbose --auto-restart\n\n# Terminal 3: Monitor all services\nwatch 'meshctl list --wide'\n</code></pre>"},{"location":"meshctl-cli/#production-like-testing","title":"Production-like Testing","text":"<pre><code># Start multiple services\nmeshctl start \\\n  services/auth.py \\\n  services/database.py \\\n  services/api.py \\\n  --detach \\\n  --log-level INFO\n\n# Monitor the services\nmeshctl list --healthy-only\nmeshctl status --verbose\n</code></pre>"},{"location":"meshctl-cli/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code># Development environment\nmeshctl start my_agent.py \\\n  --env-file .env.development \\\n  --registry-port 8000 \\\n  --debug\n\n# Staging environment\nmeshctl start my_agent.py \\\n  --env-file .env.staging \\\n  --registry-port 8001 \\\n  --log-level WARN\n\n# Connect to production registry\nmeshctl list --registry-url https://prod-registry.company.com\n</code></pre>"},{"location":"meshctl-cli/#configuration-file","title":"Configuration File","text":"<p>meshctl stores configuration in <code>~/.mcp_mesh/cli_config.json</code>:</p> <pre><code>{\n  \"registry_host\": \"localhost\",\n  \"registry_port\": 8000,\n  \"log_level\": \"INFO\",\n  \"auto_restart\": true,\n  \"watch_files\": true,\n  \"debug\": false,\n  \"startup_timeout\": 30,\n  \"shutdown_timeout\": 30\n}\n</code></pre>"},{"location":"meshctl-cli/#common-configuration","title":"Common Configuration","text":"<pre><code># Set development defaults\nmeshctl config set debug true\nmeshctl config set log_level DEBUG\nmeshctl config set registry_port 8080\n\n# Set production defaults\nmeshctl config set debug false\nmeshctl config set log_level WARN\nmeshctl config set auto_restart false\n</code></pre>"},{"location":"meshctl-cli/#monitoring-and-troubleshooting","title":"Monitoring and Troubleshooting","text":""},{"location":"meshctl-cli/#health-checks","title":"Health Checks","text":"<pre><code># Check overall system health\nmeshctl status\n\n# Monitor specific agent\nmeshctl list --id agent-id-abc123\n\n# Show agents active in last hour\nmeshctl list --since 1h\n</code></pre>"},{"location":"meshctl-cli/#debugging-connection-issues","title":"Debugging Connection Issues","text":"<pre><code># Test registry connectivity\nmeshctl list --registry-url http://localhost:8000 --timeout 5\n\n# Verbose status for debugging\nmeshctl status --verbose --json\n\n# Check specific agent details\nmeshctl list --filter my-agent --verbose\n</code></pre>"},{"location":"meshctl-cli/#log-analysis","title":"Log Analysis","text":"<pre><code># Start with debug logging\nmeshctl start my_agent.py --debug --log-level DEBUG\n\n# Check status with verbose output\nmeshctl status --verbose\n</code></pre>"},{"location":"meshctl-cli/#integration-with-development-tools","title":"Integration with Development Tools","text":""},{"location":"meshctl-cli/#with-docker","title":"With Docker","text":"<pre><code># Start local registry\nmeshctl start --registry-only --registry-host 0.0.0.0\n\n# Connect agents to containerized registry\nmeshctl start my_agent.py --registry-url http://docker-registry:8000\n</code></pre>"},{"location":"meshctl-cli/#with-cicd","title":"With CI/CD","text":"<pre><code># Test agent startup in CI\nmeshctl start my_agent.py --startup-timeout 10 --quiet\n\n# Validate agent health\nmeshctl status --json | jq '.agents[] | select(.status != \"healthy\")'\n\n# Stop services after tests\npkill -f meshctl\n</code></pre>"},{"location":"meshctl-cli/#with-scripts","title":"With Scripts","text":"<pre><code>#!/bin/bash\n# development.sh - Start development environment\n\necho \"Starting MCP Mesh development environment...\"\n\n# Start registry\nmeshctl start --registry-only --detach --pid-file registry.pid\n\n# Wait for registry\nsleep 2\n\n# Start services\nmeshctl start services/*.py --detach --env-file .env.dev\n\n# Show status\nmeshctl list --wide\n\necho \"Development environment ready!\"\necho \"Run 'meshctl list' to monitor services\"\n</code></pre>"},{"location":"meshctl-cli/#common-use-cases","title":"Common Use Cases","text":""},{"location":"meshctl-cli/#1-local-development","title":"1. Local Development","text":"<pre><code># Start everything you need for development\nmeshctl start --registry-only --debug &amp;\nmeshctl start my_agent.py --debug --auto-restart\n</code></pre>"},{"location":"meshctl-cli/#2-testing-dependencies","title":"2. Testing Dependencies","text":"<pre><code># Start provider service\nmeshctl start provider_service.py --detach\n\n# Start consumer service\nmeshctl start consumer_service.py\n\n# Verify dependency resolution\nmeshctl list --wide\n</code></pre>"},{"location":"meshctl-cli/#3-multi-service-demo","title":"3. Multi-Service Demo","text":"<pre><code># Start complete demo environment\nmeshctl start \\\n  examples/system_agent.py \\\n  examples/hello_world.py \\\n  examples/weather_agent.py \\\n  --verbose\n\n# Monitor all services\nmeshctl list --wide\n</code></pre>"},{"location":"meshctl-cli/#4-remote-development","title":"4. Remote Development","text":"<pre><code># Connect to shared development registry\nmeshctl start my_agent.py --registry-url http://dev-registry.team.local:8000\n\n# List all team's agents\nmeshctl list --registry-url http://dev-registry.team.local:8000\n</code></pre>"},{"location":"meshctl-cli/#performance-and-scaling","title":"Performance and Scaling","text":""},{"location":"meshctl-cli/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># Monitor agent resource usage\nmeshctl list --wide --verbose\n\n# Check registry performance\nmeshctl status --json | jq '.registry.performance'\n</code></pre>"},{"location":"meshctl-cli/#load-testing-support","title":"Load Testing Support","text":"<pre><code># Start multiple instances\nfor i in {1..5}; do\n  meshctl start my_agent.py --agent-name \"agent-$i\" --detach\ndone\n\n# Monitor all instances\nmeshctl list --filter agent-\n</code></pre>"},{"location":"meshctl-cli/#next-steps","title":"Next Steps","text":"<p>Now that you know meshctl basics:</p> <ol> <li>Advanced Patterns - Complex multi-service architectures</li> <li>Local Development - Professional development workflows</li> <li>Production Deployment - Container orchestration</li> </ol> <p>\ud83d\udca1 Pro Tip: Use <code>meshctl list --wide</code> as your primary monitoring command - it shows everything you need at a glance.</p> <p>\ud83d\udd27 Development Tip: Keep a terminal with <code>watch 'meshctl list'</code> running to monitor your services in real-time.</p> <p>\ud83d\udcca Monitoring Tip: Use <code>meshctl status --json</code> for automated health checks and monitoring integrations.</p>"},{"location":"01-getting-started/01-prerequisites/","title":"Prerequisites","text":"<p>Quick checklist before installing MCP Mesh 0.3.x with dual decorator pattern</p>"},{"location":"01-getting-started/01-prerequisites/#essential-requirements-for-mcp-mesh-03x","title":"Essential Requirements for MCP Mesh 0.3.x","text":"<p>You need Python 3.9+ and understanding of the new dual decorator pattern:</p>"},{"location":"01-getting-started/01-prerequisites/#1-python-39","title":"1. Python 3.9+","text":"<pre><code># Check your Python version\npython --version\n\n# Should show: Python 3.9.x or higher\n</code></pre> <p>Don't have Python 3.9+?</p> <ul> <li>macOS: <code>brew install python@3.11</code></li> <li>Ubuntu/Debian: <code>sudo apt install python3.11</code></li> <li>Windows: Download from python.org</li> </ul>"},{"location":"01-getting-started/01-prerequisites/#2-pip-python-package-manager","title":"2. pip (Python Package Manager)","text":"<pre><code># Check pip is installed\npip --version\n\n# If not installed, get it with:\npython -m ensurepip --upgrade\n</code></pre>"},{"location":"01-getting-started/01-prerequisites/#3-understanding-the-dual-decorator-pattern","title":"3. Understanding the Dual Decorator Pattern","text":"<p>MCP Mesh 0.3.x introduces the dual decorator pattern combining:</p> <ul> <li>FastMCP decorators (<code>@app.tool</code>, <code>@app.prompt</code>, <code>@app.resource</code>) - Familiar MCP development</li> <li>Mesh decorators (<code>@mesh.tool</code>, <code>@mesh.agent</code>) - Orchestration and dependency injection</li> </ul> <pre><code>import mesh\nfrom fastmcp import FastMCP\n\napp = FastMCP(\"My Service\")\n\n@app.tool()      # \u2190 FastMCP decorator\n@mesh.tool(      # \u2190 Mesh decorator\n    capability=\"greeting\",\n    dependencies=[\"time_service\"]\n)\ndef hello(time_service: mesh.McpMeshAgent = None):\n    return f\"Hello! Time: {time_service()}\"\n</code></pre> <p>That's it! You're ready to install MCP Mesh 0.3.x.</p>"},{"location":"01-getting-started/01-prerequisites/#recommended-setup","title":"Recommended Setup","text":"<p>For the best experience, we recommend:</p>"},{"location":"01-getting-started/01-prerequisites/#use-a-virtual-environment","title":"Use a Virtual Environment","text":"<pre><code># Create a virtual environment\npython -m venv mcp-env\n\n# Activate it\nsource mcp-env/bin/activate  # Linux/macOS\n# or\nmcp-env\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"01-getting-started/01-prerequisites/#have-curl-or-wget","title":"Have curl or wget","text":"<pre><code># For testing your agents\ncurl --version\n</code></pre>"},{"location":"01-getting-started/01-prerequisites/#system-support","title":"System Support","text":"<ul> <li>\u2705 Linux: All distributions with Python 3.9+</li> <li>\u2705 macOS: 10.15 (Catalina) or later</li> <li>\u2705 Windows: Windows 10/11 (WSL2 recommended for best experience)</li> </ul>"},{"location":"01-getting-started/01-prerequisites/#quick-check-script","title":"Quick Check Script","text":"<pre><code># Run this to check everything at once\npython3 -c \"\nimport sys\nprint('Python:', sys.version)\nprint('\u2705 Ready!' if sys.version_info &gt;= (3, 9) else '\u274c Need Python 3.9+')\n\"\n</code></pre>"},{"location":"01-getting-started/01-prerequisites/#optional-but-helpful","title":"Optional but Helpful","text":""},{"location":"01-getting-started/01-prerequisites/#network-ports","title":"Network Ports","text":"<p>MCP Mesh will use these ports (configurable):</p> <ul> <li>8000: Registry (starts automatically)</li> <li>8080-8090: Your agents (you choose)</li> </ul>"},{"location":"01-getting-started/01-prerequisites/#storage","title":"Storage","text":"<ul> <li>500MB: For MCP Mesh and dependencies</li> <li>100MB: For logs and data</li> </ul>"},{"location":"01-getting-started/01-prerequisites/#next-steps","title":"Next Steps","text":"<p>Once all prerequisites are met, proceed to Installation \u2192</p> <p>\ud83d\udca1 Tip: If you encounter issues, our Troubleshooting Guide covers common problems and solutions.</p> <p>\ud83d\udcda Note: For containerized deployments (Docker/Kubernetes), different prerequisites apply. See Docker Deployment or Kubernetes Basics.</p>"},{"location":"01-getting-started/01-prerequisites/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"01-getting-started/01-prerequisites/#common-issues","title":"Common Issues","text":"<ol> <li>Python version mismatch - Use <code>pyenv</code> or <code>conda</code> to manage multiple Python versions</li> <li>Permission denied on ports - Either use higher ports (&gt;1024) or run with appropriate permissions</li> <li>Git not found - Install via package manager (<code>apt</code>, <code>brew</code>, <code>choco</code>)</li> <li>Virtual environment issues - Ensure you're using the Python 3 venv module, not virtualenv</li> </ol> <p>For detailed solutions, see our Troubleshooting Guide.</p>"},{"location":"01-getting-started/01-prerequisites/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Python 3.8 and below: Not supported due to typing features used</li> <li>32-bit systems: Limited support, 64-bit recommended</li> <li>Network proxies: May require additional configuration</li> <li>Corporate firewalls: May block agent communication on custom ports</li> </ul>"},{"location":"01-getting-started/01-prerequisites/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add automated prerequisite installer script</li> <li> Support for Python 3.13 when released</li> <li> Add Podman as Docker alternative</li> <li> Create offline installation package</li> <li> Add ARM64 native support verification</li> </ul>"},{"location":"01-getting-started/02-installation/","title":"Installation","text":"<p>Get MCP Mesh running in under 2 minutes</p>"},{"location":"01-getting-started/02-installation/#quick-install-recommended","title":"Quick Install (Recommended)","text":""},{"location":"01-getting-started/02-installation/#macos-with-homebrew","title":"macOS with Homebrew","text":"<pre><code># Install CLI tools (includes meshctl and mcp-mesh-registry)\nbrew tap dhyansraj/mcp-mesh\nbrew install mcp-mesh\n\n# Install Python package with semantic versioning\npip install \"mcp-mesh&gt;=0.5,&lt;0.6\"\n\n# Verify installation\nmeshctl --version\nmcp-mesh-registry --version\n</code></pre>"},{"location":"01-getting-started/02-installation/#linuxmacos-with-install-script","title":"Linux/macOS with Install Script","text":"<pre><code># Install MCP Mesh from PyPI with semantic versioning (allows patch updates)\npip install \"mcp-mesh&gt;=0.5,&lt;0.6\"\n\n# Download the CLI tools\ncurl -sSL https://raw.githubusercontent.com/dhyansraj/mcp-mesh/main/install.sh | bash\n\n# Verify installation\nmeshctl --version\nmcp-mesh-registry --version\n</code></pre> <p>What this installs:</p> <ul> <li>\ud83d\udce6 Python package: MCP Mesh runtime for building agents</li> <li>\ud83d\udd27 meshctl: CLI tool for managing the mesh</li> <li>\ud83c\udfd7\ufe0f mcp-mesh-registry: Service discovery and coordination server</li> </ul>"},{"location":"01-getting-started/02-installation/#alternative-build-from-source","title":"Alternative: Build from Source","text":"<p>For contributors or advanced users who want to build from source:</p>"},{"location":"01-getting-started/02-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Go 1.23 or higher</li> <li>Make (build tool)</li> </ul>"},{"location":"01-getting-started/02-installation/#quick-install-recommended_1","title":"Quick Install (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/mcp-mesh/mcp-mesh.git\ncd mcp-mesh\n\n# Install everything with one command\nmake install\n\n# Activate the virtual environment that was created\nsource .venv/bin/activate\n\n# Verify installation\nmeshctl --version\n</code></pre> <p>That's it! The <code>make install</code> command:</p> <ul> <li>Builds the Go binaries</li> <li>Creates a Python virtual environment in <code>.venv</code> (if needed)</li> <li>Installs the Python package with all dependencies</li> <li>Installs binaries to <code>/usr/local/bin</code> (may prompt for sudo)</li> </ul> <p>Note: MCP Mesh always uses <code>.venv</code> in the project root for consistency</p>"},{"location":"01-getting-started/02-installation/#manual-installation","title":"Manual Installation","text":"<p>If you prefer to control each step:</p> <pre><code># Build Go binaries\nmake build\n\n# Create and activate virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install Python package\npip install src/runtime/python/\n\n# Install binaries (optional, requires sudo)\nsudo make install\n\n# Or add to PATH instead\nexport PATH=$PATH:$(pwd)/bin\n</code></pre>"},{"location":"01-getting-started/02-installation/#what-gets-installed","title":"What Gets Installed?","text":"<p>When you install MCP Mesh, you get:</p> <ol> <li>Python Package (<code>mcp_mesh</code>): The decorators and runtime for your agents</li> <li>CLI Tool (<code>meshctl</code>): Go-based command-line tool for running agents</li> <li>Registry Binary (<code>mcp-mesh-registry</code>): Go-based service registry</li> </ol>"},{"location":"01-getting-started/02-installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.9 or higher</li> <li>OS: Linux, macOS, or Windows (WSL2 recommended)</li> <li>Memory: 1GB free RAM</li> <li>Disk: 500MB free space</li> </ul>"},{"location":"01-getting-started/02-installation/#for-developers","title":"For Developers","text":"<p>If you're contributing to MCP Mesh:</p> <pre><code># Development installation\nmake install-dev\n\n# This creates symlinks instead of copying binaries\n# and installs the Python package in editable mode\n</code></pre> <p>See our Contributing Guide for more details.</p>"},{"location":"01-getting-started/02-installation/#verify-installation","title":"Verify Installation","text":"<p>Run a quick test to ensure everything is working:</p> <pre><code># Make sure you're in the virtual environment\nsource .venv/bin/activate\n\n# Test the CLI\nmeshctl --version\n\n# Test Python import\npython -c \"from mcp_mesh import mesh_agent; print('\u2705 MCP Mesh is installed!')\"\n\n# Start the registry (in one terminal)\nmeshctl start --registry-only\n\n# Run an example agent (in another terminal)\nmeshctl start examples/hello_world.py\n</code></pre>"},{"location":"01-getting-started/02-installation/#your-first-agent-in-30-seconds","title":"Your First Agent in 30 Seconds","text":"<p>Create <code>hello.py</code>:</p> <pre><code>import mesh\nfrom fastmcp import FastMCP\n\n# Single FastMCP server instance\napp = FastMCP(\"Hello Service\")\n\n@app.tool()  # FastMCP decorator for MCP protocol\n@mesh.tool(capability=\"greeting\")  # Mesh decorator for orchestration\ndef say_hello(name: str = \"World\") -&gt; str:\n    return f\"Hello, {name}!\"\n\n# Agent configuration - mesh handles server startup\n@mesh.agent(\n    name=\"hello-service\",\n    http_port=8000,\n    auto_run=True  # No main method needed!\n)\nclass HelloService:\n    pass\n\n# Mesh discovers 'app' and handles everything automatically!\n</code></pre> <p>Run it:</p> <pre><code># Start your agent (registry starts automatically)\npython hello.py\n\n# Test it (MCP JSON-RPC format)\ncurl -X POST http://localhost:8000/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"say_hello\",\n      \"arguments\": {\"name\": \"MCP Mesh\"}\n    }\n  }'\n</code></pre> <p>That's it! You've just created and deployed your first MCP Mesh agent.</p>"},{"location":"01-getting-started/02-installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"01-getting-started/02-installation/#1-command-meshctl-not-found","title":"1. Command 'meshctl' not found","text":"<p>Solution: Either add <code>/usr/local/bin</code> to your PATH or use the local binary:</p> <pre><code># Option 1: Use full path\n/usr/local/bin/meshctl --version\n\n# Option 2: Add to PATH\nexport PATH=$PATH:/usr/local/bin\n\n# Option 3: Use local binary\n./bin/meshctl --version\n</code></pre>"},{"location":"01-getting-started/02-installation/#2-importerror-no-module-named-mcp_mesh","title":"2. ImportError: No module named 'mcp_mesh'","text":"<p>Solution: Activate the virtual environment:</p> <pre><code>source .venv/bin/activate  # or your custom venv\npython -c \"import mcp_mesh\"\n</code></pre>"},{"location":"01-getting-started/02-installation/#3-permission-denied-when-installing-to-usrlocalbin","title":"3. Permission denied when installing to /usr/local/bin","text":"<p>Solution: The installer will prompt for sudo. Alternatively, use local binaries:</p> <pre><code># Just build without installing\nmake build\n\n# Add to PATH\nexport PATH=$PATH:$(pwd)/bin\n</code></pre>"},{"location":"01-getting-started/02-installation/#4-port-8080-already-in-use","title":"4. Port 8080 already in use","text":"<p>Solution: Another service is using port 8080:</p> <pre><code># Find what's using port 8080\nlsof -i :8080\n\n# Kill the process (replace PID with actual process ID)\nkill &lt;PID&gt;\n\n# Or use a different port\nmeshctl start --registry-port 8081\n</code></pre>"},{"location":"01-getting-started/02-installation/#next-steps","title":"Next Steps","text":"<p>Now that MCP Mesh is installed, let's run your first example:</p> <p>Running Hello World Example \u2192</p>"},{"location":"01-getting-started/02-installation/#reference-guides","title":"Reference Guides","text":"<ul> <li>meshctl CLI - Command-line tool reference</li> <li>Environment Variables - Configuration options</li> </ul> <p>\ud83d\udca1 Tip: Keep the registry running in a separate terminal while working with agents.</p> <p>\ud83d\udcda Note: For production deployments, consider using Docker or Kubernetes for easier management. See our deployment guides for more options.</p>"},{"location":"01-getting-started/02-installation/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"01-getting-started/02-installation/#installation-issues","title":"Installation Issues","text":"<ol> <li>pip SSL errors - Update certificates or use <code>--trusted-host pypi.org</code></li> <li>Compilation errors - Install build tools (<code>build-essential</code> on Linux, Xcode on macOS)</li> <li>Permission errors - Never use <code>sudo pip</code>; use virtual environments</li> <li>Dependency conflicts - Create a fresh virtual environment</li> </ol> <p>For comprehensive solutions, see our Troubleshooting Guide.</p>"},{"location":"01-getting-started/02-installation/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>PyPI package: May lag behind latest GitHub commits</li> <li>Windows: Some features require WSL2 for full compatibility</li> <li>Go registry: Requires Go 1.23+ and CGO for SQLite support</li> <li>Air-gapped environments: Requires manual dependency download</li> </ul>"},{"location":"01-getting-started/02-installation/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Create one-line installer script</li> <li> Add Homebrew formula for macOS</li> <li> Create snap package for Linux</li> <li> Add Windows installer (.exe)</li> <li> Support poetry and pipenv</li> <li> Create Docker image for development</li> </ul>"},{"location":"01-getting-started/03-hello-world/","title":"Running Hello World Example","text":"<p>The simplest way to see MCP Mesh in action - dual decorators make it effortless!</p>"},{"location":"01-getting-started/03-hello-world/#overview","title":"Overview","text":"<p>MCP Mesh 0.3.x introduces the dual decorator pattern that combines the familiar FastMCP development experience with powerful mesh orchestration. No main methods, no manual server setup - just add decorators and go!</p>"},{"location":"01-getting-started/03-hello-world/#quick-start-2-commands","title":"Quick Start (2 Commands!)","text":"<pre><code># 1. Start the system agent (provides date services) - registry starts automatically\nmeshctl start examples/simple/system_agent.py\n\n# 2. Start the hello world agent (uses date services)\nmeshctl start examples/simple/hello_world.py\n\n# 3. Test it with MCP JSON-RPC!\ncurl -s -X POST http://localhost:9090/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"hello_mesh_simple\",\n      \"arguments\": {}\n    }\n  }' | grep \"^data:\" | sed 's/^data: //' | jq '.result'\n</code></pre> <p>That's it! <code>meshctl</code> automatically starts the registry when needed, making it truly 2 commands for a distributed MCP system. \ud83c\udf89</p>"},{"location":"01-getting-started/03-hello-world/#what-just-happened","title":"What Just Happened?","text":"<p>The Hello World example demonstrates the dual decorator pattern:</p> <ol> <li>FastMCP decorators (<code>@app.tool</code>) handle the MCP protocol</li> <li>Mesh decorators (<code>@mesh.tool</code>) add dependency injection and orchestration</li> <li>Automatic discovery - Mesh finds your FastMCP <code>app</code> instance and handles everything</li> <li>Zero boilerplate - No main methods or manual server management needed</li> </ol>"},{"location":"01-getting-started/03-hello-world/#understanding-the-new-architecture","title":"Understanding the New Architecture","text":""},{"location":"01-getting-started/03-hello-world/#the-dual-decorator-pattern","title":"The Dual Decorator Pattern","text":"<p>Here's the key part of <code>hello_world.py</code> using the new 0.2.x pattern:</p> <pre><code>from typing import Any\n\nimport mesh\nfrom fastmcp import FastMCP\n\n# Single FastMCP server instance\napp = FastMCP(\"Hello World Service\")\n\n@app.tool()  # \u2190 FastMCP decorator (familiar MCP development)\n@mesh.tool(\n    capability=\"greeting\",\n    dependencies=[\"date_service\"]  # \u2190 Mesh decorator (orchestration)\n)\ndef hello_mesh_simple(date_service: Any = None) -&gt; str:\n    \"\"\"MCP Mesh greeting with dependency injection.\"\"\"\n    if date_service is None:\n        return \"\ud83d\udc4b Hello from MCP Mesh! (Date service not available yet)\"\n\n    current_date = date_service()  # Call injected function\n    return f\"\ud83d\udc4b Hello from MCP Mesh! Today is {current_date}\"\n\n# Agent configuration - tells mesh how to run FastMCP\n@mesh.agent(\n    name=\"hello-world\",\n    http_port=9090,\n    auto_run=True  # Mesh handles startup automatically\n)\nclass HelloWorldAgent:\n    pass\n\n# No main method needed! Mesh discovers 'app' and handles everything.\n</code></pre>"},{"location":"01-getting-started/03-hello-world/#system-agent-architecture","title":"System Agent Architecture","text":"<p>And here's how <code>system_agent.py</code> provides the date service:</p> <pre><code>import mesh\nfrom fastmcp import FastMCP\nfrom datetime import datetime\n\napp = FastMCP(\"System Agent Service\")\n\n@app.tool()  # \u2190 FastMCP handles MCP protocol\n@mesh.tool(capability=\"date_service\")  # \u2190 What others can depend on\ndef get_current_time() -&gt; str:\n    \"\"\"Get current system date and time.\"\"\"\n    return datetime.now().strftime(\"%B %d, %Y at %I:%M %p\")\n\n@mesh.agent(\n    name=\"system-agent\",\n    http_port=8080,\n    auto_run=True\n)\nclass SystemAgent:\n    pass\n</code></pre>"},{"location":"01-getting-started/03-hello-world/#key-benefits-of-the-new-pattern","title":"Key Benefits of the New Pattern","text":""},{"location":"01-getting-started/03-hello-world/#1-familiar-fastmcp-development","title":"1. Familiar FastMCP Development","text":"<ul> <li>Keep using <code>@app.tool()</code>, <code>@app.prompt()</code>, <code>@app.resource()</code></li> <li>Same function signatures and return types</li> <li>Full MCP protocol compatibility</li> </ul>"},{"location":"01-getting-started/03-hello-world/#2-enhanced-with-mesh-orchestration","title":"2. Enhanced with Mesh Orchestration","text":"<ul> <li>Add <code>@mesh.tool()</code> for dependency injection</li> <li>Automatic service discovery and registration</li> <li>Smart capability resolution with tags</li> </ul>"},{"location":"01-getting-started/03-hello-world/#3-zero-boilerplate","title":"3. Zero Boilerplate","text":"<ul> <li>No main methods needed</li> <li>No manual server startup</li> <li>Mesh discovers your <code>app</code> instance automatically</li> </ul>"},{"location":"01-getting-started/03-hello-world/#4-automatic-service-discovery","title":"4. Automatic Service Discovery","text":"<ul> <li>No configuration files or service URLs needed</li> <li>Services find each other automatically through the registry</li> </ul>"},{"location":"01-getting-started/03-hello-world/#testing-your-setup","title":"Testing Your Setup","text":""},{"location":"01-getting-started/03-hello-world/#list-available-tools","title":"List Available Tools","text":"<pre><code># Check what tools are available on hello world agent\ncurl -s -X POST http://localhost:9090/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/list\",\n    \"params\": {}\n  }' | grep \"^data:\" | sed 's/^data: //' | jq '.result.tools[] | {name: .name, description: .description}'\n</code></pre>"},{"location":"01-getting-started/03-hello-world/#test-different-functions","title":"Test Different Functions","text":"<pre><code># Test simple greeting\ncurl -s -X POST http://localhost:9090/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\"name\": \"hello_mesh_simple\", \"arguments\": {}}\n  }' | jq '.result'\n\n# Test smart tag-based greeting\ncurl -s -X POST http://localhost:9090/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\"name\": \"hello_mesh_typed\", \"arguments\": {}}\n  }' | jq '.result'\n</code></pre>"},{"location":"01-getting-started/03-hello-world/#whats-different-from-01x","title":"What's Different from 0.1.x?","text":"Feature 0.1.x 0.2.x Decorators Only <code>@mesh.tool</code>, <code>@mesh.agent</code> Dual: <code>@app.tool</code> + <code>@mesh.tool</code> MCP Support Limited mesh-only protocol Full FastMCP compatibility Server Setup Manual configuration Automatic discovery Types Basic typing Enhanced with <code>mesh.McpMeshAgent</code> Tags Not supported Smart tag-based resolution Main Method Required for some cases Never needed"},{"location":"01-getting-started/03-hello-world/#troubleshooting","title":"Troubleshooting","text":""},{"location":"01-getting-started/03-hello-world/#service-not-starting","title":"Service Not Starting","text":"<pre><code># Check if ports are available\nlsof -i :9090  # Hello world agent port\nlsof -i :8080  # System agent port\n</code></pre>"},{"location":"01-getting-started/03-hello-world/#dependency-not-injected","title":"Dependency Not Injected","text":"<pre><code># Check registry for available services\ncurl -s http://localhost:8000/agents | jq '.agents[] | {name: .name, capabilities: .capabilities}'\n</code></pre>"},{"location":"01-getting-started/03-hello-world/#function-not-found","title":"Function Not Found","text":"<ul> <li>Make sure you're using the correct function name (not capability name) in MCP calls</li> <li>Function name: <code>hello_mesh_simple</code></li> <li>Capability name: <code>greeting</code></li> </ul>"},{"location":"01-getting-started/03-hello-world/#next-steps","title":"Next Steps","text":"<p>Now that you understand the dual decorator pattern, let's explore:</p> <ol> <li>Dependency Injection - Deep dive into smart dependency resolution</li> <li>Creating Your First Agent - Build a complete agent from scratch</li> </ol> <p>\ud83d\udca1 Tip: The dual decorator pattern gives you the best of both worlds - familiar FastMCP development with powerful mesh orchestration!</p> <p>\ud83d\udcda Note: All examples use the new 0.2.x pattern - no more manual server management needed.</p>"},{"location":"01-getting-started/04-dependency-injection/","title":"Understanding Dependency Injection in MCP Mesh","text":"<p>How the dual decorator pattern enables smart service discovery and dependency injection</p>"},{"location":"01-getting-started/04-dependency-injection/#what-is-dependency-injection-in-02x","title":"What is Dependency Injection in 0.2.x?","text":"<p>MCP Mesh 0.3.x revolutionizes dependency injection with the dual decorator pattern:</p> <ul> <li>\ud83d\udd17 Smart capability matching using tags and metadata</li> <li>\ud83c\udfaf Type-safe injection with <code>mesh.McpMeshAgent</code> or flexible <code>Any</code> types</li> <li>\ud83c\udff7\ufe0f Tag-based resolution for intelligent service selection</li> <li>\ud83d\udcde Seamless function calls - remote functions work like local ones</li> <li>\ud83d\udd04 Automatic discovery - no configuration files or service URLs needed</li> <li>\ud83d\ude80 Zero boilerplate - Mesh handles all the complexity</li> </ul>"},{"location":"01-getting-started/04-dependency-injection/#core-concepts","title":"Core Concepts","text":""},{"location":"01-getting-started/04-dependency-injection/#1-capabilities-vs-function-names","title":"1. Capabilities vs Function Names","text":"<p>In 0.2.x, there's an important distinction:</p> <ul> <li>Function names: What you call via MCP (<code>hello_mesh_simple</code>)</li> <li>Capability names: What other agents depend on (<code>greeting</code>)</li> </ul> <pre><code>import mesh\nfrom fastmcp import FastMCP\n\napp = FastMCP(\"Demo Service\")\n\n@app.tool()  # MCP calls use function name: \"get_current_time\"\n@mesh.tool(\n    capability=\"date_service\",  # Others depend on: \"date_service\"\n    tags=[\"system\", \"time\"]\n)\ndef get_current_time() -&gt; str:  # Function name can be anything!\n    return datetime.now().strftime(\"%B %d, %Y\")\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#2-simple-dependency-declaration","title":"2. Simple Dependency Declaration","text":"<p>Declare what capabilities you need:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"weather_advisor\",\n    dependencies=[\"date_service\"]  # \u2190 Simple capability name\n)\ndef get_weather_advice(date_service: mesh.McpMeshAgent = None) -&gt; str:\n    if date_service:\n        current_date = date_service()  # Call remote function\n        return f\"Weather advice for {current_date}\"\n    return \"Weather advice (date not available)\"\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#3-smart-tag-based-dependencies","title":"3. Smart Tag-Based Dependencies","text":"<p>Use tags for intelligent service selection:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"system_reporter\",\n    dependencies=[\n        \"date_service\",  # Simple dependency\n        {\n            \"capability\": \"info\",\n            \"tags\": [\"system\", \"general\"]  # \u2190 Smart tag matching!\n        }\n    ]\n)\ndef create_system_report(\n    date_service: mesh.McpMeshAgent = None,\n    info: mesh.McpMeshAgent = None  # Gets general system info\n) -&gt; dict:\n    report = {\"generated_at\": \"unknown\", \"system_info\": \"unavailable\"}\n\n    if date_service:\n        report[\"generated_at\"] = date_service()\n\n    if info:\n        system_data = info()  # Smart matching gets general info\n        report[\"system_info\"] = system_data\n\n    return report\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#smart-tag-matching-in-action","title":"Smart Tag Matching in Action","text":""},{"location":"01-getting-started/04-dependency-injection/#multiple-services-same-capability","title":"Multiple Services, Same Capability","text":"<p>Consider a system agent providing two different <code>info</code> services:</p> <pre><code># System agent provides TWO info services with different tags\napp = FastMCP(\"System Agent\")\n\n@app.tool()\n@mesh.tool(\n    capability=\"info\",  # Same capability name\n    tags=[\"system\", \"general\"]  # General system info\n)\ndef fetch_system_overview() -&gt; dict:\n    return {\n        \"server_name\": \"system-agent\",\n        \"uptime\": \"120 seconds\",\n        \"version\": \"1.0.0\"\n    }\n\n@app.tool()\n@mesh.tool(\n    capability=\"info\",  # Same capability name\n    tags=[\"system\", \"disk\"]  # Disk-specific info\n)\ndef analyze_storage_and_os() -&gt; dict:\n    return {\n        \"disk_usage\": \"75%\",\n        \"filesystem\": \"ext4\",\n        \"mount_points\": [\"/\", \"/home\"]\n    }\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#smart-resolution-based-on-tags","title":"Smart Resolution Based on Tags","text":"<p>Now other agents can request specific info types:</p> <pre><code># Gets GENERAL system info (not disk info)\n@mesh.tool(\n    dependencies=[{\n        \"capability\": \"info\",\n        \"tags\": [\"system\", \"general\"]  # Matches first service\n    }]\n)\ndef get_general_status(info: mesh.McpMeshAgent = None):\n    return info()  # Returns server_name, uptime, version\n\n# Gets DISK info (not general info)\n@mesh.tool(\n    dependencies=[{\n        \"capability\": \"info\",\n        \"tags\": [\"system\", \"disk\"]  # Matches second service\n    }]\n)\ndef get_storage_status(info: mesh.McpMeshAgent = None):\n    return info()  # Returns disk_usage, filesystem, mount_points\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#type-safety-options","title":"Type Safety Options","text":""},{"location":"01-getting-started/04-dependency-injection/#option-1-type-safe-with-meshmcpmeshagent","title":"Option 1: Type-Safe with <code>mesh.McpMeshAgent</code>","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"analytics\",\n    dependencies=[\"time_service\", \"data_service\"]\n)\ndef analyze_data(\n    data: list,\n    time_service: mesh.McpMeshAgent = None,  # Type-safe\n    data_service: mesh.McpMeshAgent = None   # IDE support\n) -&gt; dict:\n    timestamp = time_service() if time_service else \"unknown\"\n    processed = data_service(data) if data_service else data\n\n    return {\n        \"analysis\": \"completed\",\n        \"timestamp\": timestamp,\n        \"processed_data\": processed\n    }\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#option-2-flexible-with-any","title":"Option 2: Flexible with <code>Any</code>","text":"<pre><code>from typing import Any\n\n@app.tool()\n@mesh.tool(\n    capability=\"flexible_processor\",\n    dependencies=[\"time_service\"]\n)\ndef process_flexibly(data: Any, time_service: Any = None) -&gt; dict:\n    # Maximum flexibility - works with any proxy implementation\n    result = {\"data\": data}\n    if time_service:\n        result[\"timestamp\"] = time_service()\n    return result\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#advanced-dependency-patterns","title":"Advanced Dependency Patterns","text":""},{"location":"01-getting-started/04-dependency-injection/#self-dependencies","title":"Self-Dependencies","text":"<p>Agents can depend on their own capabilities:</p> <pre><code>@app.tool()\n@mesh.tool(\n    capability=\"health_check\",\n    dependencies=[\"date_service\"]  # Uses own date_service\n)\ndef perform_health_check(date_service: mesh.McpMeshAgent = None) -&gt; dict:\n    status = {\"status\": \"healthy\", \"memory\": \"normal\"}\n\n    if date_service:\n        status[\"timestamp\"] = date_service()  # Self-dependency!\n\n    return status\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#complex-tag-combinations","title":"Complex Tag Combinations","text":"<pre><code>@app.tool()\n@mesh.tool(\n    capability=\"comprehensive_report\",\n    dependencies=[\n        \"date_service\",  # Simple dependency\n        {\n            \"capability\": \"info\",\n            \"tags\": [\"system\", \"general\"]  # General system info\n        },\n        {\n            \"capability\": \"info\",\n            \"tags\": [\"system\", \"disk\"]     # Disk info\n        }\n    ]\n)\ndef create_full_report(\n    date_service: mesh.McpMeshAgent = None,\n    info: mesh.McpMeshAgent = None,      # Gets general info\n    disk_info: mesh.McpMeshAgent = None  # Gets disk info\n) -&gt; dict:\n    # This function gets THREE injected services!\n    return {\n        \"timestamp\": date_service() if date_service else \"unknown\",\n        \"system\": info() if info else {},\n        \"storage\": disk_info() if disk_info else {}\n    }\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#how-it-works-behind-the-scenes","title":"How It Works Behind the Scenes","text":""},{"location":"01-getting-started/04-dependency-injection/#1-service-registration","title":"1. Service Registration","text":"<p>When agents start, mesh automatically:</p> <pre><code># System agent registers:\n{\n    \"agent_id\": \"system-agent-abc123\",\n    \"capabilities\": {\n        \"date_service\": {\n            \"function\": \"get_current_time\",\n            \"tags\": [\"system\", \"time\"],\n            \"endpoint\": \"http://system-agent:8080/mcp\"\n        },\n        \"info\": [\n            {\n                \"function\": \"fetch_system_overview\",\n                \"tags\": [\"system\", \"general\"],\n                \"endpoint\": \"http://system-agent:8080/mcp\"\n            },\n            {\n                \"function\": \"analyze_storage_and_os\",\n                \"tags\": [\"system\", \"disk\"],\n                \"endpoint\": \"http://system-agent:8080/mcp\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#2-dependency-resolution","title":"2. Dependency Resolution","text":"<p>When hello world agent starts:</p> <pre><code># Mesh resolves dependencies:\ndependencies = [\n    \"date_service\",  # Finds: system-agent.get_current_time\n    {\n        \"capability\": \"info\",\n        \"tags\": [\"system\", \"general\"]  # Finds: system-agent.fetch_system_overview\n    }\n]\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#3-proxy-creation","title":"3. Proxy Creation","text":"<p>Mesh creates callable proxies:</p> <pre><code># Injected date_service becomes:\ndef date_service_proxy():\n    response = http_post(\"http://system-agent:8080/mcp\", {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"tools/call\",\n        \"params\": {\n            \"name\": \"get_current_time\",  # Function name!\n            \"arguments\": {}\n        }\n    })\n    return response.result\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#testing-dependency-injection","title":"Testing Dependency Injection","text":""},{"location":"01-getting-started/04-dependency-injection/#check-service-registration","title":"Check Service Registration","text":"<pre><code># See what services are registered\ncurl -s http://localhost:8000/agents | \\\n  jq '.agents[] | {name: .name, capabilities: (.capabilities | keys)}'\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#test-individual-services","title":"Test Individual Services","text":"<pre><code># Test date service directly\ncurl -s -X POST http://localhost:8080/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\"name\": \"get_current_time\", \"arguments\": {}}\n  }' | jq '.result'\n\n# Test dependency injection\ncurl -s -X POST http://localhost:9090/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\"name\": \"hello_mesh_simple\", \"arguments\": {}}\n  }' | jq '.result'\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#benefits-of-the-new-pattern","title":"Benefits of the New Pattern","text":""},{"location":"01-getting-started/04-dependency-injection/#for-developers","title":"For Developers","text":"<ul> <li>Familiar FastMCP - Keep using <code>@app.tool()</code> decorators</li> <li>Enhanced capabilities - Add <code>@mesh.tool()</code> for orchestration</li> <li>Type safety - Choose between <code>mesh.McpMeshAgent</code> and <code>Any</code></li> <li>Smart resolution - Tag-based service selection</li> </ul>"},{"location":"01-getting-started/04-dependency-injection/#for-operations","title":"For Operations","text":"<ul> <li>Zero configuration - No service URLs or config files</li> <li>Automatic discovery - Services find each other automatically</li> <li>Graceful degradation - Functions work without dependencies</li> <li>Real-time updates - Dependencies resolve dynamically</li> </ul>"},{"location":"01-getting-started/04-dependency-injection/#troubleshooting","title":"Troubleshooting","text":""},{"location":"01-getting-started/04-dependency-injection/#dependency-not-injected","title":"Dependency Not Injected","text":"<pre><code># Check if provider is registered\ncurl -s http://localhost:8000/agents | \\\n  jq '.agents[] | select(.capabilities | has(\"date_service\"))'\n\n# Check function names vs capabilities\ncurl -s -X POST http://localhost:8080/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' | \\\n  jq '.result.tools[] | {name: .name, description: .description}'\n</code></pre>"},{"location":"01-getting-started/04-dependency-injection/#wrong-service-selected","title":"Wrong Service Selected","text":"<ul> <li>Check your tags - they determine which service is selected</li> <li>Use specific tag combinations for precise matching</li> <li>Remember: <code>\"general\"</code> vs <code>\"disk\"</code> tags select different services</li> </ul>"},{"location":"01-getting-started/04-dependency-injection/#type-errors","title":"Type Errors","text":"<ul> <li>Use <code>mesh.McpMeshAgent</code> for better IDE support</li> <li>Use <code>Any</code> for maximum flexibility</li> <li>Always check if dependency is <code>None</code> before calling</li> </ul>"},{"location":"01-getting-started/04-dependency-injection/#next-steps","title":"Next Steps","text":"<p>Now that you understand dependency injection, let's create a complete agent:</p> <p>Creating Your First Agent \u2192</p>"},{"location":"01-getting-started/04-dependency-injection/#reference-guides","title":"Reference Guides","text":"<ul> <li>Mesh Decorators - Complete decorator parameters and patterns</li> </ul> <p>\ud83d\udca1 Key Insight: The dual decorator pattern gives you familiar FastMCP development with powerful mesh orchestration - the best of both worlds!</p> <p>\ud83c\udff7\ufe0f Pro Tip: Use tags strategically to enable smart service selection - same capability name, different behaviors based on tags.</p>"},{"location":"01-getting-started/05-first-agent/","title":"Creating Your First Agent","text":"<p>Build a complete weather service agent using the new dual decorator pattern</p>"},{"location":"01-getting-started/05-first-agent/#overview","title":"Overview","text":"<p>In this guide, you'll create a sophisticated weather service agent using MCP Mesh 0.5.x that demonstrates:</p> <ul> <li>\ud83c\udf24\ufe0f Multiple MCP decorators - <code>@app.tool</code>, <code>@app.prompt</code>, <code>@app.resource</code></li> <li>\ud83d\udd17 Smart dependency injection - Type-safe dependencies with tag-based resolution</li> <li>\ud83d\udcca Advanced patterns - Self-dependencies and complex service integration</li> <li>\ud83c\udfaf Zero boilerplate - No main methods or manual server setup</li> <li>\ud83c\udff7\ufe0f Tag-based resolution - Intelligent service selection</li> </ul>"},{"location":"01-getting-started/05-first-agent/#project-structure","title":"Project Structure","text":"<p>Create a new directory for your agent:</p> <pre><code>mkdir weather-agent\ncd weather-agent\n\n# Create the structure\ntouch weather_agent.py\ntouch requirements.txt\ntouch README.md\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#step-1-basic-weather-agent-with-dual-decorators","title":"Step 1: Basic Weather Agent with Dual Decorators","text":"<p>Create <code>weather_agent.py</code>:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nAdvanced Weather Service Agent - MCP Mesh 0.5.x Pattern\n\nDemonstrates:\n- Dual decorator pattern (@app + @mesh)\n- All MCP decorators (tool, prompt, resource)\n- Smart dependency injection with type safety\n- Tag-based service resolution\n- Self-dependencies\n\"\"\"\n\nimport json\nimport random\nfrom datetime import datetime\nfrom typing import Any\n\nimport mesh\nfrom fastmcp import FastMCP\n\n# Single FastMCP server instance\napp = FastMCP(\"Weather Service\")\n\n# Simulated weather data\nWEATHER_CONDITIONS = [\"sunny\", \"cloudy\", \"rainy\", \"snowy\", \"foggy\", \"windy\"]\nCITIES_DATA = {\n    \"new york\": {\"lat\": 40.7128, \"lon\": -74.0060, \"timezone\": \"EST\"},\n    \"london\": {\"lat\": 51.5074, \"lon\": -0.1278, \"timezone\": \"GMT\"},\n    \"tokyo\": {\"lat\": 35.6762, \"lon\": 139.6503, \"timezone\": \"JST\"},\n    \"sydney\": {\"lat\": -33.8688, \"lon\": 151.2093, \"timezone\": \"AEST\"},\n    \"paris\": {\"lat\": 48.8566, \"lon\": 2.3522, \"timezone\": \"CET\"},\n}\n\n# ===== TOOLS with Smart Dependencies =====\n\n@app.tool()\n@mesh.tool(\n    capability=\"time_service\",\n    tags=[\"weather\", \"time\"],\n    description=\"Get current time for weather timestamp\"\n)\ndef get_weather_time() -&gt; str:\n    \"\"\"Get current time in weather service format.\"\"\"\n    return datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")\n\n@app.tool()\n@mesh.tool(\n    capability=\"weather_data\",\n    dependencies=[\"time_service\"],  # Self-dependency!\n    tags=[\"weather\", \"core\"],\n    description=\"Get weather data for a city\"\n)\ndef get_weather(\n    city: str,\n    time_service: mesh.McpMeshAgent = None\n) -&gt; dict[str, Any]:\n    \"\"\"\n    Get weather information for a specified city.\n\n    Demonstrates self-dependency: uses own time_service capability.\n    \"\"\"\n    city_lower = city.lower()\n\n    if city_lower not in CITIES_DATA:\n        return {\n            \"error\": f\"City '{city}' not found\",\n            \"available_cities\": list(CITIES_DATA.keys()),\n            \"timestamp\": time_service() if time_service else \"unknown\"\n        }\n\n    # Simulate weather data\n    temp_celsius = random.randint(-10, 40)\n    condition = random.choice(WEATHER_CONDITIONS)\n    humidity = random.randint(20, 95)\n    wind_speed = random.randint(0, 60)\n\n    weather_data = {\n        \"city\": city.title(),\n        \"coordinates\": CITIES_DATA[city_lower],\n        \"temperature\": {\n            \"celsius\": temp_celsius,\n            \"fahrenheit\": round((temp_celsius * 9/5) + 32, 1)\n        },\n        \"condition\": condition,\n        \"humidity\": f\"{humidity}%\",\n        \"wind_speed\": f\"{wind_speed} km/h\",\n        \"visibility\": \"10 km\" if condition != \"foggy\" else \"2 km\",\n        \"timestamp\": time_service() if time_service else \"unknown\"\n    }\n\n    return weather_data\n\n@app.tool()\n@mesh.tool(\n    capability=\"weather_forecast\",\n    dependencies=[\n        \"time_service\",  # Self-dependency\n        {\n            \"capability\": \"info\",  # External dependency\n            \"tags\": [\"system\", \"general\"]  # Smart tag matching\n        }\n    ],\n    tags=[\"weather\", \"forecast\"],\n    description=\"Get weather forecast with system info\"\n)\ndef get_forecast(\n    city: str,\n    days: int = 3,\n    time_service: mesh.McpMeshAgent = None,\n    info: mesh.McpMeshAgent = None\n) -&gt; dict[str, Any]:\n    \"\"\"\n    Get weather forecast for multiple days.\n\n    Demonstrates:\n    - Self-dependency (time_service)\n    - External dependency (system info)\n    - Smart tag-based resolution\n    \"\"\"\n    if days &lt; 1 or days &gt; 7:\n        days = 3\n\n    forecast = {\n        \"city\": city.title(),\n        \"forecast_days\": days,\n        \"generated_at\": time_service() if time_service else \"unknown\",\n        \"days\": []\n    }\n\n    # Add system info if available\n    if info:\n        try:\n            system_data = info()\n            forecast[\"system_info\"] = {\n                \"server\": system_data.get(\"server_name\", \"unknown\"),\n                \"uptime\": system_data.get(\"uptime_formatted\", \"unknown\")\n            }\n        except Exception as e:\n            forecast[\"system_info\"] = f\"Error: {e}\"\n\n    # Generate forecast days\n    for day in range(days):\n        temp = random.randint(-5, 35)\n        forecast[\"days\"].append({\n            \"day\": day + 1,\n            \"date\": f\"2024-01-{day + 1:02d}\",\n            \"temperature\": {\n                \"high\": temp + random.randint(0, 10),\n                \"low\": temp - random.randint(0, 8)\n            },\n            \"condition\": random.choice(WEATHER_CONDITIONS),\n            \"precipitation\": f\"{random.randint(0, 100)}%\"\n        })\n\n    return forecast\n\n# ===== PROMPTS with Dependencies =====\n\n@app.prompt()\n@mesh.tool(\n    capability=\"weather_prompt\",\n    dependencies=[\"weather_data\"],\n    tags=[\"weather\", \"ai\"],\n    description=\"Generate weather analysis prompt\"\n)\ndef weather_analysis_prompt(\n    city: str,\n    analysis_type: str = \"detailed\",\n    weather_data: mesh.McpMeshAgent = None\n) -&gt; str:\n    \"\"\"Generate weather analysis prompt with real data.\"\"\"\n\n    # Get current weather\n    weather = {}\n    if weather_data:\n        try:\n            weather = weather_data(city)\n        except Exception as e:\n            weather = {\"error\": str(e)}\n\n    prompt = f\"\"\"Analyze the weather conditions for {city.title()}:\n\nCurrent Weather Data:\n{json.dumps(weather, indent=2)}\n\nAnalysis Type: {analysis_type}\n\nPlease provide:\n1. Current conditions summary\n2. Comfort level assessment\n3. Activity recommendations\n4. What to wear suggestions\n5. Weather pattern insights\n\nFocus on practical advice for residents and visitors.\"\"\"\n\n    return prompt\n\n# ===== RESOURCES with Complex Dependencies =====\n\n@app.resource(\"weather://config/{city}\")\n@mesh.tool(\n    capability=\"weather_config\",\n    dependencies=[\"time_service\"],\n    tags=[\"weather\", \"config\"],\n    description=\"Weather service configuration\"\n)\nasync def weather_config(city: str, time_service: mesh.McpMeshAgent = None) -&gt; str:\n    \"\"\"Weather service configuration for specific city.\"\"\"\n\n    config = {\n        \"service_name\": \"Weather Service\",\n        \"version\": \"1.0.0\",\n        \"city\": city.title(),\n        \"capabilities\": [\n            \"weather_data\",\n            \"weather_forecast\",\n            \"weather_prompt\",\n            \"weather_config\",\n            \"time_service\"\n        ],\n        \"features\": {\n            \"real_time_data\": False,\n            \"forecast_days\": 7,\n            \"multiple_cities\": True,\n            \"ai_analysis\": True\n        },\n        \"dependencies\": {\n            \"internal\": [\"time_service\"],\n            \"external\": [\"info (system.general)\"]\n        },\n        \"last_updated\": time_service() if time_service else \"unknown\"\n    }\n\n    return json.dumps(config, indent=2)\n\n@app.resource(\"weather://stats/{metric}\")\n@mesh.tool(\n    capability=\"weather_stats\",\n    dependencies=[\"weather_data\", \"time_service\"],\n    tags=[\"weather\", \"metrics\"],\n    description=\"Weather service statistics\"\n)\nasync def weather_stats(\n    metric: str,\n    weather_data: mesh.McpMeshAgent = None,\n    time_service: mesh.McpMeshAgent = None\n) -&gt; str:\n    \"\"\"Get weather service statistics.\"\"\"\n\n    stats = {\n        \"metric_type\": metric,\n        \"service_status\": \"operational\",\n        \"cities_supported\": len(CITIES_DATA),\n        \"features_count\": 5,\n        \"dependencies_resolved\": {\n            \"weather_data\": weather_data is not None,\n            \"time_service\": time_service is not None\n        },\n        \"generated_at\": time_service() if time_service else \"unknown\"\n    }\n\n    if metric == \"performance\":\n        stats.update({\n            \"avg_response_time\": \"150ms\",\n            \"uptime\": \"99.9%\",\n            \"requests_per_second\": 42\n        })\n    elif metric == \"usage\":\n        stats.update({\n            \"daily_requests\": 1250,\n            \"popular_cities\": [\"new york\", \"london\", \"tokyo\"],\n            \"forecast_vs_current\": \"60/40\"\n        })\n\n    return json.dumps(stats, indent=2)\n\n# ===== AGENT CONFIGURATION =====\n\n@mesh.agent(\n    name=\"weather-service\",\n    version=\"1.0.0\",\n    description=\"Advanced weather service with FastMCP and mesh integration\",\n    http_port=9091,\n    enable_http=True,\n    auto_run=True  # Zero boilerplate!\n)\nclass WeatherService:\n    \"\"\"\n    Weather Service Agent using dual decorator pattern.\n\n    Features:\n    - All MCP decorators: tools, prompts, resources\n    - Smart dependency injection with type safety\n    - Self-dependencies for internal coordination\n    - External dependencies with tag-based resolution\n    - Zero boilerplate - mesh handles everything\n    \"\"\"\n    pass\n\n# No main method needed!\n# Mesh processor automatically:\n# 1. Discovers the 'app' FastMCP instance\n# 2. Applies dependency injection to all decorated functions\n# 3. Starts HTTP server on configured port\n# 4. Registers all capabilities with mesh registry\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#step-2-dependencies-file","title":"Step 2: Dependencies File","text":"<p>Create <code>requirements.txt</code>:</p> <pre><code>mcp-mesh&gt;=0.5,&lt;0.6\nfastmcp&gt;=2.8.0\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#step-3-documentation","title":"Step 3: Documentation","text":"<p>Create <code>README.md</code>:</p> <pre><code># Weather Service Agent\n\nAdvanced weather service using MCP Mesh 0.5.x dual decorator pattern.\n\n## Features\n\n- **All MCP Decorators**: Tools, prompts, and resources\n- **Smart Dependencies**: Type-safe injection with tag-based resolution\n- **Self-Dependencies**: Internal service coordination\n- **Zero Boilerplate**: No main methods or manual setup\n\n## Usage\n\n```bash\n# Start the weather service\npython weather_agent.py\n\n# Start system agent (for external dependencies)\npython ../examples/simple/system_agent.py\n```\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#testing","title":"Testing","text":"<pre><code># Test weather data\ncurl -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"get_weather\", \"arguments\": {\"city\": \"tokyo\"}}}'\n\n# Test forecast with dependencies\ncurl -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"get_forecast\", \"arguments\": {\"city\": \"london\", \"days\": 5}}}'\n</code></pre> <pre><code>## Step 4: Testing Your Agent\n\n### Start the Services\n\n```bash\n# Terminal 1: Start system agent (provides external dependencies)\npython examples/simple/system_agent.py\n\n# Terminal 2: Start your weather agent\npython weather_agent.py\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#test-all-features","title":"Test All Features","text":"<pre><code># 1. Test basic weather data (self-dependency)\ncurl -s -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"get_weather\",\n      \"arguments\": {\"city\": \"tokyo\"}\n    }\n  }' | jq '.result'\n\n# 2. Test forecast (self + external dependencies)\ncurl -s -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"get_forecast\",\n      \"arguments\": {\"city\": \"london\", \"days\": 3}\n    }\n  }' | jq '.result'\n\n# 3. Test prompt generation\ncurl -s -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"prompts/get\",\n    \"params\": {\n      \"name\": \"weather_analysis_prompt\",\n      \"arguments\": {\"city\": \"paris\", \"analysis_type\": \"detailed\"}\n    }\n  }' | jq '.result'\n\n# 4. Test resource access\ncurl -s -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"resources/read\",\n    \"params\": {\n      \"uri\": \"weather://config/sydney\"\n    }\n  }' | jq '.result'\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#verify-service-integration","title":"Verify Service Integration","text":"<pre><code># Check what services are registered\ncurl -s http://localhost:8000/agents | \\\n  jq '.agents[] | {name: .name, capabilities: (.capabilities | keys)}'\n\n# List all available tools\ncurl -s -X POST http://localhost:9091/mcp/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' | \\\n  jq '.result.tools[] | {name: .name, description: .description}'\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#understanding-what-you-built","title":"Understanding What You Built","text":""},{"location":"01-getting-started/05-first-agent/#the-dual-decorator-pattern","title":"The Dual Decorator Pattern","text":"<p>Your agent demonstrates the power of MCP Mesh 0.5.x:</p> <pre><code>@app.tool()      # \u2190 FastMCP: Handles MCP protocol\n@mesh.tool(      # \u2190 Mesh: Adds orchestration\n    capability=\"weather_data\",\n    dependencies=[\"time_service\"]  # Smart dependency injection\n)\ndef get_weather(city: str, time_service: mesh.McpMeshAgent = None):\n    # Business logic here\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#key-innovations","title":"Key Innovations","text":"<ol> <li>All MCP Decorators: <code>@app.tool</code>, <code>@app.prompt</code>, <code>@app.resource</code></li> <li>Smart Dependencies: Tag-based resolution with type safety</li> <li>Self-Dependencies: Internal service coordination</li> <li>Zero Boilerplate: Mesh discovers <code>app</code> and handles everything</li> </ol>"},{"location":"01-getting-started/05-first-agent/#dependency-flow","title":"Dependency Flow","text":"<pre><code>Weather Agent Dependencies:\n\u251c\u2500\u2500 Internal (Self-dependencies)\n\u2502   \u2514\u2500\u2500 time_service \u2192 get_weather_time()\n\u251c\u2500\u2500 External (Cross-service)\n\u2502   \u2514\u2500\u2500 info (system.general) \u2192 system_agent.fetch_system_overview()\n\u2514\u2500\u2500 Automatic Resolution\n    \u251c\u2500\u2500 Mesh finds providers\n    \u251c\u2500\u2500 Creates type-safe proxies\n    \u2514\u2500\u2500 Injects into function parameters\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#advanced-patterns-demonstrated","title":"Advanced Patterns Demonstrated","text":""},{"location":"01-getting-started/05-first-agent/#1-self-dependencies","title":"1. Self-Dependencies","text":"<pre><code># Agent uses its own time service\n@mesh.tool(\n    capability=\"weather_data\",\n    dependencies=[\"time_service\"]  # Own capability!\n)\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#2-smart-tag-resolution","title":"2. Smart Tag Resolution","text":"<pre><code># Gets general system info (not disk info)\ndependencies=[{\n    \"capability\": \"info\",\n    \"tags\": [\"system\", \"general\"]  # Smart matching\n}]\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#3-type-safety","title":"3. Type Safety","text":"<pre><code># Type-safe injection\ndef get_forecast(\n    time_service: mesh.McpMeshAgent = None,  # IDE support\n    info: mesh.McpMeshAgent = None          # Type hints\n):\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#4-graceful-degradation","title":"4. Graceful Degradation","text":"<pre><code># Works with or without dependencies\ntimestamp = time_service() if time_service else \"unknown\"\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"01-getting-started/05-first-agent/#service-not-starting","title":"Service Not Starting","text":"<pre><code># Check port availability\nlsof -i :9091\n\n# Check for import errors\npython -c \"import mesh, fastmcp; print('Dependencies OK')\"\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#dependencies-not-injected","title":"Dependencies Not Injected","text":"<pre><code># Verify system agent is running\ncurl -s http://localhost:8080/health\n\n# Check service registration\ncurl -s http://localhost:8000/agents | jq '.agents[].name'\n</code></pre>"},{"location":"01-getting-started/05-first-agent/#function-not-found","title":"Function Not Found","text":"<ul> <li>MCP calls use function names: <code>get_weather</code></li> <li>Dependencies use capability names: <code>weather_data</code></li> <li>Make sure both are correct in your decorators</li> </ul>"},{"location":"01-getting-started/05-first-agent/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've built a sophisticated agent using MCP Mesh 0.5.x. You've learned:</p> <p>\u2705 Dual decorator pattern - FastMCP + Mesh orchestration \u2705 All MCP decorators - Tools, prompts, and resources \u2705 Smart dependencies - Type-safe injection with tags \u2705 Zero boilerplate - Automatic service discovery and startup</p>"},{"location":"01-getting-started/05-first-agent/#whats-next","title":"What's Next?","text":"<ol> <li>Local Development - Set up professional dev environment</li> <li>Docker Deployment - Containerize your agents</li> <li>Kubernetes - Scale to production</li> </ol>"},{"location":"01-getting-started/05-first-agent/#reference-guides","title":"Reference Guides","text":"<ul> <li>Mesh Decorators - Complete decorator reference with all parameters</li> <li>meshctl CLI - Command-line tool for managing agents</li> <li>Environment Variables - Configuration options and templates</li> </ul> <p>\ud83d\udca1 Key Insight: The dual decorator pattern gives you the familiar FastMCP experience enhanced with powerful mesh orchestration!</p> <p>\ud83c\udfaf Pro Tip: Use self-dependencies for internal coordination and tag-based dependencies for smart external service selection.</p> <p>\ud83d\ude80 Achievement Unlocked: You've mastered the MCP Mesh 0.5.x dual decorator pattern! Ready for production deployment?</p>"},{"location":"01-getting-started/troubleshooting/","title":"Troubleshooting Guide - Getting Started","text":"<p>Solutions to common issues when starting with MCP Mesh</p>"},{"location":"01-getting-started/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this diagnostic script to check common issues:</p> <pre><code>#!/bin/bash\n# save as diagnose.sh\n\necho \"MCP Mesh Diagnostic Tool\"\necho \"=======================\"\n\n# Check Python version\necho -n \"Python version: \"\npython3 --version || echo \"\u274c Python not found\"\n\n# Check if MCP Mesh is installed\necho -n \"MCP Mesh installed: \"\npython3 -c \"import mcp_mesh; print('\u2705 Yes')\" 2&gt;/dev/null || echo \"\u274c No\"\n\n# Check ports\nfor port in 8000 8080 8081; do\n    echo -n \"Port $port: \"\n    if lsof -i :$port &gt;/dev/null 2&gt;&amp;1; then\n        echo \"\u274c In use\"\n    else\n        echo \"\u2705 Available\"\n    fi\ndone\n\n# Check registry\necho -n \"Registry health: \"\ncurl -s http://localhost:8000/health &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"\u2705 Healthy\" || echo \"\u274c Not reachable\"\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"01-getting-started/troubleshooting/#1-python-import-errors","title":"1. Python Import Errors","text":""},{"location":"01-getting-started/troubleshooting/#problem","title":"Problem","text":"<pre><code>ImportError: No module named 'mcp_mesh'\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#solutions","title":"Solutions","text":"<p>Check virtual environment is activated:</p> <pre><code># Should show your venv path\nwhich python\n\n# If not, activate it\nsource venv/bin/activate  # or .venv/bin/activate\n</code></pre> <p>Reinstall MCP Mesh:</p> <pre><code>pip uninstall mcp-mesh\npip install mcp-mesh\n</code></pre> <p>Check installation:</p> <pre><code>pip list | grep mcp-mesh\npython -c \"import mcp_mesh; print(mcp_mesh.__version__)\"\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#2-registry-connection-failed","title":"2. Registry Connection Failed","text":""},{"location":"01-getting-started/troubleshooting/#problem_1","title":"Problem","text":"<pre><code>ERROR: Failed to connect to registry at http://localhost:8000\nConnection refused\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#solutions_1","title":"Solutions","text":"<p>Start the registry:</p> <pre><code># In a separate terminal\npython -m mcp_mesh.registry.server\n\n# Or with custom port\npython -m mcp_mesh.registry.server --port 8001\n</code></pre> <p>Check if registry is running:</p> <pre><code># Check process\nps aux | grep mcp_mesh.registry\n\n# Check port\nlsof -i :8000\n\n# Test health endpoint\ncurl http://localhost:8000/health\n</code></pre> <p>Use correct registry URL:</p> <pre><code># Set environment variable\nexport MCP_MESH_REGISTRY_URL=http://localhost:8000\n\n# Or pass directly to agent\npython my_agent.py --registry-url http://localhost:8000\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#3-port-already-in-use","title":"3. Port Already in Use","text":""},{"location":"01-getting-started/troubleshooting/#problem_2","title":"Problem","text":"<pre><code>OSError: [Errno 48] Address already in use\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#solutions_2","title":"Solutions","text":"<p>Find what's using the port:</p> <pre><code># On macOS/Linux\nlsof -i :8080\n\n# On Windows\nnetstat -ano | findstr :8080\n</code></pre> <p>Kill the process:</p> <pre><code># Get PID from lsof output\nkill -9 &lt;PID&gt;\n\n# Or kill by port (macOS/Linux)\nkill -9 $(lsof -t -i:8080)\n</code></pre> <p>Use a different port:</p> <pre><code># In your agent\n@mesh_agent(\n    capability=\"my_agent\",\n    enable_http=True,\n    http_port=8090  # Different port\n)\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#4-dependency-not-resolved","title":"4. Dependency Not Resolved","text":""},{"location":"01-getting-started/troubleshooting/#problem_3","title":"Problem","text":"<pre><code>ERROR: Failed to resolve dependency: SystemAgent_getDate\nNo agents found providing capability: SystemAgent\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#solutions_3","title":"Solutions","text":"<p>Ensure dependency agent is running:</p> <pre><code># Start the system agent\ncd examples\npython system_agent.py\n</code></pre> <p>Check agent registration:</p> <pre><code># List all agents\ncurl http://localhost:8000/agents\n\n# Check specific capability\ncurl http://localhost:8000/agents?capability=SystemAgent\n</code></pre> <p>Verify dependency name:</p> <pre><code># Dependency names must match exactly\ndependencies=[\"SystemAgent_getDate\"]  # Correct\ndependencies=[\"systemagent_getdate\"]  # Wrong - case sensitive\ndependencies=[\"SystemAgent.getDate\"]  # Wrong - use underscore\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#5-agent-registration-failed","title":"5. Agent Registration Failed","text":""},{"location":"01-getting-started/troubleshooting/#problem_4","title":"Problem","text":"<pre><code>ERROR: Agent registration failed: 400 Bad Request\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#solutions_4","title":"Solutions","text":"<p>Check agent configuration:</p> <pre><code>@mesh_agent(\n    capability=\"weather\",  # Must be non-empty\n    version=\"1.0.0\",      # Must be valid semver\n    enable_http=True,\n    http_port=8080        # Must be valid port\n)\n</code></pre> <p>Enable debug logging:</p> <pre><code>export MCP_MESH_LOG_LEVEL=DEBUG\npython my_agent.py\n</code></pre> <p>Verify network connectivity:</p> <pre><code># Can you reach the registry?\nping localhost\ncurl http://localhost:8000/health\n\n# Check firewall\nsudo iptables -L  # Linux\nsudo pfctl -s rules  # macOS\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#6-heartbeat-failures","title":"6. Heartbeat Failures","text":""},{"location":"01-getting-started/troubleshooting/#problem_5","title":"Problem","text":"<pre><code>WARNING: Heartbeat failed: Connection timeout\nAgent marked as unhealthy\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#solutions_5","title":"Solutions","text":"<p>Increase heartbeat interval:</p> <pre><code>@mesh_agent(\n    capability=\"slow_agent\",\n    heartbeat_interval=60,  # Increase from default 30s\n    heartbeat_timeout=10    # Increase timeout\n)\n</code></pre> <p>Check network stability:</p> <pre><code># Monitor network\nping -c 100 localhost\n\n# Check for packet loss\nmtr localhost\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#7-performance-issues","title":"7. Performance Issues","text":""},{"location":"01-getting-started/troubleshooting/#problem_6","title":"Problem","text":"<ul> <li>Slow agent startup</li> <li>High latency between agents</li> <li>Memory usage growing</li> </ul>"},{"location":"01-getting-started/troubleshooting/#solutions_6","title":"Solutions","text":"<p>Profile your code:</p> <pre><code>import cProfile\nimport pstats\n\nprofiler = cProfile.Profile()\nprofiler.enable()\n\n# Your agent code\n\nprofiler.disable()\nstats = pstats.Stats(profiler)\nstats.sort_stats('cumulative')\nstats.print_stats(10)\n</code></pre> <p>Enable connection pooling:</p> <pre><code># In your agent initialization\nimport aiohttp\n\nconnector = aiohttp.TCPConnector(\n    limit=100,\n    limit_per_host=30,\n    ttl_dns_cache=300\n)\n</code></pre> <p>Monitor memory:</p> <pre><code>import tracemalloc\ntracemalloc.start()\n\n# Your code\n\ncurrent, peak = tracemalloc.get_traced_memory()\nprint(f\"Current memory: {current / 10**6:.1f} MB\")\nprint(f\"Peak memory: {peak / 10**6:.1f} MB\")\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#8-dockercontainer-issues","title":"8. Docker/Container Issues","text":""},{"location":"01-getting-started/troubleshooting/#problem_7","title":"Problem","text":"<ul> <li>Container can't connect to registry</li> <li>Agents can't find each other in containers</li> </ul>"},{"location":"01-getting-started/troubleshooting/#solutions_7","title":"Solutions","text":"<p>Use correct network:</p> <pre><code># docker-compose.yml\nservices:\n  agent:\n    networks:\n      - mcp-mesh\n    environment:\n      - MCP_MESH_REGISTRY_URL=http://registry:8000\n\nnetworks:\n  mcp-mesh:\n    driver: bridge\n</code></pre> <p>Use container names:</p> <pre><code># Not localhost when in containers\nexport MCP_MESH_REGISTRY_URL=http://mcp-mesh-registry:8000\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#9-windows-specific-issues","title":"9. Windows-Specific Issues","text":""},{"location":"01-getting-started/troubleshooting/#problem_8","title":"Problem","text":"<ul> <li>Path separator issues</li> <li>Encoding problems</li> <li>Process management</li> </ul>"},{"location":"01-getting-started/troubleshooting/#solutions_8","title":"Solutions","text":"<p>Use pathlib for paths:</p> <pre><code>from pathlib import Path\n\nconfig_path = Path(\"configs\") / \"agent.yaml\"\n</code></pre> <p>Set encoding:</p> <pre><code># At top of file\n# -*- coding: utf-8 -*-\n\n# When opening files\nwith open(file, 'r', encoding='utf-8') as f:\n    content = f.read()\n</code></pre> <p>Use cross-platform commands:</p> <pre><code>import sys\nimport subprocess\n\nif sys.platform == \"win32\":\n    subprocess.run([\"cmd\", \"/c\", \"dir\"])\nelse:\n    subprocess.run([\"ls\", \"-la\"])\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#debug-techniques","title":"Debug Techniques","text":""},{"location":"01-getting-started/troubleshooting/#1-enable-verbose-logging","title":"1. Enable Verbose Logging","text":"<pre><code>import logging\nimport sys\n\n# Configure detailed logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.StreamHandler(sys.stdout),\n        logging.FileHandler('debug.log')\n    ]\n)\n\n# Enable HTTP request logging\nlogging.getLogger('aiohttp').setLevel(logging.DEBUG)\nlogging.getLogger('urllib3').setLevel(logging.DEBUG)\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#2-use-registry-api","title":"2. Use Registry API","text":"<pre><code># Get all agents\ncurl http://localhost:8000/agents | jq\n\n# Get agent details\ncurl http://localhost:8000/agents/&lt;agent-id&gt; | jq\n\n# Check dependencies\ncurl http://localhost:8000/dependencies | jq\n\n# View logs\ncurl http://localhost:8000/logs?level=error | jq\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#3-test-individual-components","title":"3. Test Individual Components","text":"<pre><code># test_components.py\nimport asyncio\nfrom mcp_mesh.registry import RegistryClient\n\nasync def test_registry():\n    client = RegistryClient(\"http://localhost:8000\")\n\n    # Test connection\n    health = await client.health_check()\n    print(f\"Registry health: {health}\")\n\n    # Test registration\n    agent_id = await client.register_agent({\n        \"name\": \"test-agent\",\n        \"capabilities\": [\"test\"],\n        \"endpoint\": \"http://localhost:9999\"\n    })\n    print(f\"Registered with ID: {agent_id}\")\n\n    # Test discovery\n    agents = await client.find_agents(\"test\")\n    print(f\"Found agents: {agents}\")\n\nasyncio.run(test_registry())\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"01-getting-started/troubleshooting/#1-gather-information","title":"1. Gather Information","text":"<p>Before asking for help, collect:</p> <pre><code># System info\npython --version\npip list | grep mcp\nuname -a  # or system info on Windows\n\n# Error logs\npython my_agent.py 2&gt;&amp;1 | tee error.log\n\n# Registry state\ncurl http://localhost:8000/agents &gt; agents.json\ncurl http://localhost:8000/health &gt; health.json\n</code></pre>"},{"location":"01-getting-started/troubleshooting/#2-check-resources","title":"2. Check Resources","text":"<ol> <li>FAQ</li> <li>GitHub Issues</li> <li>Discord Community</li> <li>Stack Overflow</li> </ol>"},{"location":"01-getting-started/troubleshooting/#3-report-issues","title":"3. Report Issues","text":"<p>Include in your report:</p> <ul> <li>MCP Mesh version</li> <li>Python version</li> <li>Operating system</li> <li>Full error message</li> <li>Minimal code to reproduce</li> <li>What you've already tried</li> </ul>"},{"location":"01-getting-started/troubleshooting/#prevention-tips","title":"Prevention Tips","text":"<ol> <li>Always use virtual environments</li> <li>Keep dependencies updated</li> <li>Use consistent Python versions</li> <li>Test in Docker before production</li> <li>Monitor logs continuously</li> <li>Set up health checks</li> <li>Use connection pooling</li> <li>Handle errors gracefully</li> </ol> <p>\ud83d\udca1 Quick Fix: Most issues are resolved by: 1) Checking the registry is running, 2) Verifying ports are available, 3) Ensuring virtual environment is activated.</p> <p>\ud83d\udcda Next Steps: If you're still having issues, check our Advanced Troubleshooting Guide or ask in the community Discord.</p>"},{"location":"02-local-development/01-environment-setup/","title":"Development Environment Setup","text":"<p>Configure your IDE, tools, and workspace for productive MCP Mesh development</p>"},{"location":"02-local-development/01-environment-setup/#overview","title":"Overview","text":"<p>A well-configured development environment is crucial for productive MCP Mesh development. This guide will help you set up your IDE with debugging capabilities, configure essential tools, and establish best practices that will accelerate your development workflow.</p> <p>We'll cover setup for popular IDEs (VS Code, PyCharm), essential development tools, and productivity enhancers that make working with distributed MCP agents a breeze.</p>"},{"location":"02-local-development/01-environment-setup/#key-concepts","title":"Key Concepts","text":"<ul> <li>IDE Integration: Debugging, IntelliSense, and code navigation for MCP Mesh</li> <li>Virtual Environments: Isolated Python environments for each project</li> <li>Development Tools: Linters, formatters, and type checkers</li> <li>Environment Variables: Managing configuration across development stages</li> <li>Git Workflow: Version control best practices for MCP projects</li> </ul>"},{"location":"02-local-development/01-environment-setup/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"02-local-development/01-environment-setup/#step-1-choose-and-configure-your-ide","title":"Step 1: Choose and Configure Your IDE","text":""},{"location":"02-local-development/01-environment-setup/#vs-code-setup","title":"VS Code Setup","text":"<pre><code># Install Python extension\ncode --install-extension ms-python.python\n\n# Install helpful extensions for MCP development\ncode --install-extension ms-python.vscode-pylance\ncode --install-extension ms-python.debugpy\ncode --install-extension redhat.vscode-yaml\n</code></pre> <p>Create <code>.vscode/settings.json</code> in your project:</p> <pre><code>{\n  \"python.linting.enabled\": true,\n  \"python.linting.pylintEnabled\": true,\n  \"python.formatting.provider\": \"black\",\n  \"python.testing.pytestEnabled\": true,\n  \"python.testing.unittestEnabled\": false,\n  \"editor.formatOnSave\": true,\n  \"python.envFile\": \"${workspaceFolder}/.env\",\n  \"[python]\": {\n    \"editor.rulers\": [88],\n    \"editor.codeActionsOnSave\": {\n      \"source.organizeImports\": true\n    }\n  }\n}\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#pycharm-setup","title":"PyCharm Setup","text":"<ol> <li>Open PyCharm \u2192 Preferences \u2192 Project \u2192 Python Interpreter</li> <li>Click gear icon \u2192 Add \u2192 Virtual Environment</li> <li>Select existing <code>.venv</code> or create new</li> <li>Enable: File \u2192 Settings \u2192 Tools \u2192 Python Integrated Tools \u2192 Docstring format: Google</li> </ol>"},{"location":"02-local-development/01-environment-setup/#step-2-create-a-robust-virtual-environment","title":"Step 2: Create a Robust Virtual Environment","text":"<pre><code># Create project-specific virtual environment\npython -m venv .venv\n\n# Activate it\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n\n# Upgrade pip and essential tools\npip install --upgrade pip setuptools wheel\n\n# Install MCP Mesh from source (not yet on PyPI)\ncd /path/to/mcp-mesh\nmake install-dev  # Installs all dependencies and builds binaries\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#step-3-configure-development-tools","title":"Step 3: Configure Development Tools","text":"<p>Create <code>pyproject.toml</code> for modern Python tooling:</p> <pre><code>[tool.black]\nline-length = 88\ntarget-version = ['py39']\n\n[tool.pylint.messages_control]\ndisable = \"C0330, C0326\"\n\n[tool.mypy]\npython_version = \"3.9\"\nwarn_return_any = true\nwarn_unused_configs = true\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = \"test_*.py\"\npython_functions = \"test_*\"\n</code></pre> <p>Install development tools:</p> <pre><code># Code quality tools\npip install black pylint mypy\n\n# Testing tools\npip install pytest pytest-cov pytest-asyncio\n\n# Development utilities\npip install ipython rich watchdog\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#step-4-set-up-environment-variables","title":"Step 4: Set Up Environment Variables","text":"<p>Create <code>.env</code> file for local development:</p> <pre><code># MCP Mesh Configuration\nMCP_MESH_REGISTRY_URL=http://localhost:8000\nMCP_MESH_LOG_LEVEL=DEBUG\nMCP_MESH_DEBUG_MODE=true\n\n# Agent Configuration\nMCP_MESH_HTTP_HOST=0.0.0.0\nMCP_MESH_HTTP_PORT=0  # Auto-assign port\nMCP_MESH_AUTO_RUN=true\n\n# Development Settings\nPYTHONPATH=.\nMCP_DEV_MODE=true\n</code></pre> <p>Create <code>.env.example</code> for team members:</p> <pre><code># Copy this to .env and configure for your environment\nMCP_MESH_REGISTRY_URL=http://localhost:8000\nMCP_MESH_LOG_LEVEL=INFO\nMCP_MESH_DEBUG_MODE=false\nMCP_MESH_AUTO_RUN=true\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>MCP_MESH_LOG_LEVEL</code> Logging verbosity INFO DEBUG, WARNING, ERROR <code>MCP_MESH_REGISTRY_URL</code> Registry endpoint http://localhost:8080 http://registry:8080 <code>MCP_MESH_DB_TYPE</code> Database backend sqlite postgresql, sqlite <code>MCP_MESH_ENABLE_HOT_RELOAD</code> Auto-reload on file changes false true <code>MCP_DEV_MODE</code> Enable development features false true"},{"location":"02-local-development/01-environment-setup/#examples","title":"Examples","text":""},{"location":"02-local-development/01-environment-setup/#example-1-basic-project-structure","title":"Example 1: Basic Project Structure","text":"<pre><code>my-mcp-project/\n\u251c\u2500\u2500 .venv/                 # Virtual environment\n\u251c\u2500\u2500 .env                   # Local environment variables\n\u251c\u2500\u2500 .env.example          # Template for team\n\u251c\u2500\u2500 .gitignore            # Git ignore rules\n\u251c\u2500\u2500 pyproject.toml        # Python project config\n\u251c\u2500\u2500 agents/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 weather_agent.py  # Your MCP agents\n\u2502   \u2514\u2500\u2500 database_agent.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_weather.py   # Agent tests\n\u2502   \u2514\u2500\u2500 test_database.py\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#example-2-vs-code-debug-configuration","title":"Example 2: VS Code Debug Configuration","text":"<p>Create <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.5.6\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Weather Agent\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"mcp_mesh.cli\",\n      \"args\": [\"start\", \"agents/weather_agent.py\"],\n      \"console\": \"integratedTerminal\",\n      \"env\": {\n        \"MCP_MESH_LOG_LEVEL\": \"DEBUG\"\n      }\n    },\n    {\n      \"name\": \"Debug All Agents\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"mcp_mesh.cli\",\n      \"args\": [\"start\", \"agents/\"],\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Always Use Virtual Environments: Keep dependencies isolated and reproducible</li> <li>Version Control Your Config: Track <code>.env.example</code> but never <code>.env</code></li> <li>Automate Code Quality: Use pre-commit hooks for black, pylint, mypy</li> <li>Document Dependencies: Keep <code>requirements.txt</code> or use <code>poetry</code>/<code>pipenv</code></li> <li>Use Type Hints: Enable better IDE support and catch errors early</li> </ol>"},{"location":"02-local-development/01-environment-setup/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"02-local-development/01-environment-setup/#pitfall-1-global-package-conflicts","title":"Pitfall 1: Global Package Conflicts","text":"<p>Problem: Installing MCP Mesh globally conflicts with other projects</p> <p>Solution: Always use virtual environments:</p> <pre><code># Never do this\npip install mcp-mesh  # Global install\n\n# Always do this\npython -m venv .venv\nsource .venv/bin/activate\npip install mcp-mesh\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#pitfall-2-missing-environment-variables","title":"Pitfall 2: Missing Environment Variables","text":"<p>Problem: Agents fail to start due to missing configuration</p> <p>Solution: Use python-dotenv for automatic loading:</p> <pre><code># In your agent files\nfrom dotenv import load_dotenv\nload_dotenv()  # Load .env file automatically\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#testing","title":"Testing","text":""},{"location":"02-local-development/01-environment-setup/#unit-test-example","title":"Unit Test Example","text":"<pre><code># tests/test_agent_setup.py\nimport pytest\nfrom mcp_mesh import mesh_agent\n\ndef test_agent_decorator():\n    \"\"\"Test that mesh_agent decorator works\"\"\"\n    @mesh_agent(capability=\"test\")\n    def test_function():\n        return \"test\"\n\n    assert hasattr(test_function, '_mesh_config')\n    assert test_function._mesh_config['capability'] == 'test'\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/test_environment.py\nimport os\nimport pytest\n\ndef test_environment_variables():\n    \"\"\"Ensure development environment is configured\"\"\"\n    assert os.getenv('MCP_MESH_REGISTRY_URL') is not None\n    assert os.getenv('MCP_MESH_LOG_LEVEL') == 'DEBUG'\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"02-local-development/01-environment-setup/#logs-to-check","title":"Logs to Check","text":"<pre><code># MCP Mesh logs location\ntail -f ~/.mcp-mesh/logs/mcp-mesh.log\n\n# Filter for specific agent\ngrep \"weather_agent\" ~/.mcp-mesh/logs/mcp-mesh.log\n\n# Watch for errors in real-time\ntail -f ~/.mcp-mesh/logs/mcp-mesh.log | grep ERROR\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#metrics-to-monitor","title":"Metrics to Monitor","text":"<ul> <li>Import Time: Agent startup should be &lt; 2 seconds</li> <li>Memory Usage: Monitor with <code>htop</code> or Activity Monitor</li> <li>File Descriptors: Check <code>lsof -p &lt;pid&gt;</code> for leaks</li> </ul>"},{"location":"02-local-development/01-environment-setup/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"02-local-development/01-environment-setup/#issue-1-ide-cant-find-mcp-mesh-imports","title":"Issue 1: IDE Can't Find MCP Mesh Imports","text":"<p>Symptoms: Red squiggles under <code>from mcp_mesh import mesh_agent</code></p> <p>Cause: IDE using wrong Python interpreter</p> <p>Solution:</p> <pre><code># VS Code: Ctrl+Shift+P \u2192 Python: Select Interpreter\n# Choose the .venv interpreter\n\n# PyCharm: Settings \u2192 Project \u2192 Python Interpreter\n# Select .venv/bin/python\n</code></pre>"},{"location":"02-local-development/01-environment-setup/#issue-2-permission-denied-on-virtual-environment","title":"Issue 2: Permission Denied on Virtual Environment","text":"<p>Symptoms: Can't activate venv on macOS/Linux</p> <p>Cause: Missing execute permissions</p> <p>Solution:</p> <pre><code>chmod +x .venv/bin/activate\nsource .venv/bin/activate\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"02-local-development/01-environment-setup/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Windows Path Length: Virtual environment paths can exceed Windows limits - use short project names</li> <li>Python 3.8: Not supported - requires Python 3.9+</li> <li>ARM Macs: Some dependencies may need Rosetta 2 for M1/M2 Macs</li> </ul>"},{"location":"02-local-development/01-environment-setup/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add support for Poetry and Pipenv workflows</li> <li> Create IDE plugin for MCP Mesh</li> <li> Add devcontainer configuration</li> <li> Support for Jupyter notebook development</li> </ul>"},{"location":"02-local-development/01-environment-setup/#summary","title":"Summary","text":"<p>You now have a professional development environment configured for MCP Mesh development with:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 IDE configured with debugging and IntelliSense support</li> <li>\ud83d\udd11 Virtual environment isolating your dependencies</li> <li>\ud83d\udd11 Development tools for code quality and testing</li> <li>\ud83d\udd11 Environment variables managing configuration</li> </ul>"},{"location":"02-local-development/01-environment-setup/#next-steps","title":"Next Steps","text":"<p>Now that your environment is set up, let's run the MCP Mesh registry locally for development.</p> <p>Continue to Running Registry Locally \u2192</p> <p>\ud83d\udca1 Tip: Use <code>direnv</code> to automatically activate your virtual environment when entering the project directory</p> <p>\ud83d\udcda Reference: Python Development Best Practices</p> <p>\ud83e\uddea Try It: Create a simple \"Hello Developer\" agent and debug it using your IDE's debugger</p>"},{"location":"02-local-development/02-local-registry/","title":"Running Registry Locally","text":"<p>Set up and manage the MCP Mesh registry with SQLite or PostgreSQL for local development</p>"},{"location":"02-local-development/02-local-registry/#overview","title":"Overview","text":"<p>The MCP Mesh registry is the central nervous system of your distributed agent network. It tracks available agents, manages their capabilities, and facilitates service discovery. For local development, you can run it with either SQLite (simple) or PostgreSQL (production-like).</p> <p>This guide covers both database options, data persistence strategies, and how to inspect and manage your local registry during development.</p>"},{"location":"02-local-development/02-local-registry/#key-concepts","title":"Key Concepts","text":"<ul> <li>Registry: Go-based service that maintains agent metadata and health status</li> <li>SQLite Mode: Zero-configuration database perfect for development</li> <li>PostgreSQL Mode: Production-grade database for realistic testing</li> <li>Data Persistence: How to preserve agent registrations between restarts</li> <li>Registry API: REST endpoints for inspection and management</li> </ul>"},{"location":"02-local-development/02-local-registry/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"02-local-development/02-local-registry/#step-1-understanding-registry-auto-start","title":"Step 1: Understanding Registry Auto-Start","text":"<p>The registry starts automatically when you run any agent:</p> <pre><code># Start registry manually\n./bin/meshctl start-registry\n\n# Or start an agent (which can auto-connect to existing registry)\n./bin/meshctl start examples/simple/hello_world.py\n\n# Registry runs on:\n# \u2705 Registry available at http://localhost:8000\n</code></pre>"},{"location":"02-local-development/02-local-registry/#step-2-configure-sqlite-mode-default","title":"Step 2: Configure SQLite Mode (Default)","text":"<p>SQLite is perfect for local development - no setup required!</p> <pre><code># MCP Mesh uses Go registry with automatic database setup\n# No manual database configuration needed for local development\n\n# Start registry\n./bin/meshctl start-registry\n\n# Start agents (separate terminals)\n./bin/meshctl start examples/simple/system_agent.py\n./bin/meshctl start examples/simple/hello_world.py\n</code></pre> <p>Check the database:</p> <pre><code># Install SQLite CLI if needed\nsudo apt-get install sqlite3  # Ubuntu/Debian\nbrew install sqlite3          # macOS\n\n# Inspect the database\nsqlite3 dev-registry.db\n.tables\nSELECT * FROM agents;\n.quit\n</code></pre>"},{"location":"02-local-development/02-local-registry/#step-3-configure-postgresql-mode","title":"Step 3: Configure PostgreSQL Mode","text":"<p>For production-like development:</p> <pre><code># For production-like testing, use Docker Compose setup\ncd examples/docker-examples\ndocker-compose up --build\n\n# This provides:\n# - Go registry with PostgreSQL\n# - Multiple Python agents\n# - Proper networking and service discovery\n\n# For local K8s testing:\ncd examples/k8s\nkubectl apply -k base/\n</code></pre>"},{"location":"02-local-development/02-local-registry/#step-4-inspect-registry-state","title":"Step 4: Inspect Registry State","text":"<p>The registry provides REST API endpoints for inspection:</p> <pre><code># List all registered agents\ncurl http://localhost:8000/agents | jq\n\n# Check registry health\ncurl http://localhost:8000/health | jq\n\n# Use meshctl for better interface\n./bin/meshctl list agents\n./bin/meshctl get agent hello-world\n./bin/meshctl dependencies\n</code></pre>"},{"location":"02-local-development/02-local-registry/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>MCP_MESH_REGISTRY_HOST</code> Registry hostname localhost registry.example.com <code>MCP_MESH_REGISTRY_PORT</code> Registry HTTP port 8000 9000 <code>MCP_MESH_LOG_LEVEL</code> Logging level INFO DEBUG, WARNING <code>MCP_MESH_DEBUG_MODE</code> Enable debug logs false true <code>HOST</code> Agent bind address 0.0.0.0 127.0.0.1 <code>MCP_MESH_HTTP_PORT</code> Agent HTTP port 0 (auto) 8080"},{"location":"02-local-development/02-local-registry/#examples","title":"Examples","text":""},{"location":"02-local-development/02-local-registry/#example-1-development-setup-script","title":"Example 1: Development Setup Script","text":"<p>Create <code>scripts/start-dev-env.sh</code>:</p> <pre><code>#!/bin/bash\n# Start complete development environment\n\nexport MCP_MESH_LOG_LEVEL=DEBUG\nexport MCP_MESH_DEBUG_MODE=true\n\n# Start registry first\necho \"Starting registry...\"\n./bin/meshctl start-registry &amp;\nREGISTRY_PID=$!\n\n# Wait for registry to be ready\necho \"Waiting for registry...\"\nuntil curl -s http://localhost:8000/health &gt; /dev/null; do\n  sleep 1\ndone\n\n# Start agents\necho \"Starting system agent...\"\n./bin/meshctl start examples/simple/system_agent.py &amp;\nSYSTEM_PID=$!\n\necho \"Starting hello world agent...\"\n./bin/meshctl start examples/simple/hello_world.py &amp;\nHELLO_PID=$!\n\necho \"Development environment ready!\"\necho \"Registry: http://localhost:8000\"\necho \"Use './bin/meshctl list agents' to see registered agents\"\necho \"Registry PID: $REGISTRY_PID\"\necho \"System Agent PID: $SYSTEM_PID\"\necho \"Hello World PID: $HELLO_PID\"\n\n# Keep running until Ctrl+C\nwait\n</code></pre>"},{"location":"02-local-development/02-local-registry/#example-2-postgresql-with-persistence","title":"Example 2: PostgreSQL with Persistence","text":"<pre><code># docker-compose.dev.yml\nversion: \"3.8\"\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: mcp_mesh_dev\n      POSTGRES_USER: developer\n      POSTGRES_PASSWORD: devpass123\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - ./data/postgres:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U developer\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  registry:\n    image: mcp-mesh/registry:latest\n    environment:\n      MCP_MESH_DB_TYPE: postgresql\n      MCP_MESH_DB_HOST: postgres\n      MCP_MESH_DB_NAME: mcp_mesh_dev\n      MCP_MESH_DB_USER: developer\n      MCP_MESH_DB_PASSWORD: devpass123\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n</code></pre>"},{"location":"02-local-development/02-local-registry/#best-practices","title":"Best Practices","text":"<ol> <li>Use SQLite for Quick Development: No setup, portable, perfect for prototyping</li> <li>Use PostgreSQL for Integration Testing: Catches production issues early</li> <li>Version Control Database Schemas: Track schema changes in migrations/</li> <li>Clean State for Tests: Delete SQLite file or use test database</li> <li>Monitor Registry Logs: Enable DEBUG logging during development</li> </ol>"},{"location":"02-local-development/02-local-registry/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"02-local-development/02-local-registry/#pitfall-1-registry-port-conflicts","title":"Pitfall 1: Registry Port Conflicts","text":"<p>Problem: \"address already in use\" error when starting registry</p> <p>Solution: Check what's using port 8080:</p> <pre><code># Find process using port 8080\nlsof -i :8080  # macOS/Linux\nnetstat -ano | findstr :8080  # Windows\n\n# Use different port\nexport MCP_MESH_REGISTRY_PORT=9090\n</code></pre>"},{"location":"02-local-development/02-local-registry/#pitfall-2-stale-agent-registrations","title":"Pitfall 2: Stale Agent Registrations","text":"<p>Problem: Registry shows agents that are no longer running</p> <p>Solution: Registry auto-cleans stale entries after health check failures, or manually:</p> <pre><code># For SQLite - start fresh\nrm dev-registry.db\n\n# For PostgreSQL - clean agents table\npsql -h localhost -U postgres -d mcp_mesh -c \"DELETE FROM agents WHERE last_seen &lt; NOW() - INTERVAL '5 minutes';\"\n</code></pre>"},{"location":"02-local-development/02-local-registry/#testing","title":"Testing","text":""},{"location":"02-local-development/02-local-registry/#unit-test-example","title":"Unit Test Example","text":"<pre><code># tests/test_registry_connection.py\nimport requests\nimport pytest\n\ndef test_registry_health():\n    \"\"\"Verify registry is accessible\"\"\"\n    response = requests.get(\"http://localhost:8080/health\")\n    assert response.status_code == 200\n    assert response.json()[\"status\"] == \"healthy\"\n\ndef test_agent_registration():\n    \"\"\"Test agent appears in registry\"\"\"\n    # Start your agent first\n    response = requests.get(\"http://localhost:8080/api/v1/agents\")\n    agents = response.json()\n    assert len(agents) &gt; 0\n    assert any(a[\"name\"] == \"SystemAgent\" for a in agents)\n</code></pre>"},{"location":"02-local-development/02-local-registry/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/test_registry_persistence.py\nimport subprocess\nimport time\nimport requests\n\ndef test_registry_persistence():\n    \"\"\"Verify data persists across registry restarts\"\"\"\n    # Start agent\n    proc = subprocess.Popen([\"mcp-mesh-dev\", \"start\", \"examples/system_agent.py\"])\n    time.sleep(5)\n\n    # Verify registration\n    agents = requests.get(\"http://localhost:8080/api/v1/agents\").json()\n    assert len(agents) == 1\n\n    # Stop agent but registry keeps running\n    proc.terminate()\n    time.sleep(2)\n\n    # Agent should still be in registry (before health check)\n    agents = requests.get(\"http://localhost:8080/api/v1/agents\").json()\n    assert len(agents) == 1\n</code></pre>"},{"location":"02-local-development/02-local-registry/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"02-local-development/02-local-registry/#logs-to-check","title":"Logs to Check","text":"<pre><code># Registry logs (auto-started)\ntail -f ~/.mcp-mesh/logs/registry.log\n\n# Check database queries (PostgreSQL)\ndocker logs mcp-postgres -f\n\n# Enable SQL logging\nexport MCP_MESH_DB_LOG_SQL=true\n</code></pre>"},{"location":"02-local-development/02-local-registry/#metrics-to-monitor","title":"Metrics to Monitor","text":"<ul> <li>Registry Memory: Should stay under 100MB for &lt; 100 agents</li> <li>Database Size: SQLite file or PostgreSQL disk usage</li> <li>Query Performance: Registration should take &lt; 100ms</li> </ul>"},{"location":"02-local-development/02-local-registry/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"02-local-development/02-local-registry/#issue-1-registry-wont-start","title":"Issue 1: Registry Won't Start","text":"<p>Symptoms: \"connection refused\" when accessing registry</p> <p>Cause: Port conflict or database connection issue</p> <p>Solution:</p> <pre><code># Check if port is available\nnc -zv localhost 8000\n\n# Check registry process\nps aux | grep meshctl\n\n# Start registry manually for debugging\n./bin/meshctl start-registry --verbose\n</code></pre>"},{"location":"02-local-development/02-local-registry/#issue-2-database-connection-errors","title":"Issue 2: Database Connection Errors","text":"<p>Symptoms: \"database connection failed\" in logs</p> <p>Cause: Wrong credentials or database not running</p> <p>Solution:</p> <pre><code># Test registry connection\ncurl http://localhost:8000/health\n\n# Check registry logs\n./bin/meshctl status --verbose\n\n# Restart registry if needed\npkill -f meshctl\n./bin/meshctl start-registry\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"02-local-development/02-local-registry/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>SQLite Concurrency: Limited to one writer at a time - fine for development</li> <li>Auto-Start: Only works with mcp-mesh-dev CLI, not direct Python execution</li> <li>Data Migration: No automatic migration between SQLite and PostgreSQL</li> </ul>"},{"location":"02-local-development/02-local-registry/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add support for MySQL/MariaDB backend</li> <li> Implement data export/import tools</li> <li> Add registry UI for visual inspection</li> <li> Support for registry clustering</li> </ul>"},{"location":"02-local-development/02-local-registry/#summary","title":"Summary","text":"<p>You can now run the MCP Mesh registry locally with your choice of database backend.</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Registry auto-starts when you run agents via mcp-mesh-dev</li> <li>\ud83d\udd11 SQLite is perfect for development, PostgreSQL for production-like testing</li> <li>\ud83d\udd11 REST API provides full visibility into registry state</li> <li>\ud83d\udd11 Data persistence options for different development scenarios</li> </ul>"},{"location":"02-local-development/02-local-registry/#next-steps","title":"Next Steps","text":"<p>With the registry running, let's explore debugging techniques for your agents.</p> <p>Continue to Debugging Agents \u2192</p> <p>\ud83d\udca1 Tip: Use <code>watch -n 1 'curl -s localhost:8080/api/v1/agents | jq'</code> to monitor agent registrations in real-time</p> <p>\ud83d\udcda Reference: Registry API Documentation</p> <p>\ud83e\uddea Try It: Start the registry with PostgreSQL and register multiple agents - watch them appear in the database</p>"},{"location":"02-local-development/03-debugging/","title":"Debugging Agents","text":"<p>Master debugging techniques for MCP Mesh agents using IDE tools, logging, and distributed tracing</p>"},{"location":"02-local-development/03-debugging/#overview","title":"Overview","text":"<p>Debugging distributed systems can be challenging, but MCP Mesh provides powerful tools to make it manageable. This guide covers IDE debugging setup, logging strategies, distributed tracing, and techniques specific to debugging dependency injection and remote function calls.</p> <p>Whether you're tracking down a bug in a single agent or debugging interactions between multiple services, these techniques will help you quickly identify and resolve issues.</p>"},{"location":"02-local-development/03-debugging/#key-concepts","title":"Key Concepts","text":"<ul> <li>IDE Debugging: Step through agent code with breakpoints</li> <li>Structured Logging: Consistent, searchable log output</li> <li>Distributed Tracing: Track requests across multiple agents</li> <li>Dependency Injection Debugging: Understand how dependencies are resolved</li> <li>Remote Debugging: Debug agents running in containers or remote hosts</li> </ul>"},{"location":"02-local-development/03-debugging/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"02-local-development/03-debugging/#step-1-enable-debug-logging","title":"Step 1: Enable Debug Logging","text":"<p>Set up comprehensive logging for development:</p> <pre><code># Environment variable\nexport MCP_MESH_LOG_LEVEL=DEBUG\n\n# Or in your agent code\nimport logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n</code></pre> <p>Create a logging configuration file <code>logging_config.py</code>:</p> <pre><code>import logging.config\n\nLOGGING_CONFIG = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'detailed': {\n            'format': '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'\n        },\n        'simple': {\n            'format': '%(levelname)s - %(message)s'\n        }\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'level': 'DEBUG',\n            'formatter': 'detailed',\n            'stream': 'ext://sys.stdout'\n        },\n        'file': {\n            'class': 'logging.handlers.RotatingFileHandler',\n            'level': 'DEBUG',\n            'formatter': 'detailed',\n            'filename': 'agent_debug.log',\n            'maxBytes': 10485760,  # 10MB\n            'backupCount': 5\n        }\n    },\n    'loggers': {\n        'mcp_mesh': {\n            'level': 'DEBUG',\n            'handlers': ['console', 'file']\n        },\n        'your_agent': {\n            'level': 'DEBUG',\n            'handlers': ['console', 'file']\n        }\n    }\n}\n\nlogging.config.dictConfig(LOGGING_CONFIG)\n</code></pre>"},{"location":"02-local-development/03-debugging/#step-2-ide-debugging-setup","title":"Step 2: IDE Debugging Setup","text":""},{"location":"02-local-development/03-debugging/#vs-code-configuration","title":"VS Code Configuration","text":"<p>Create <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.5.6\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Current Agent\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/bin/meshctl\",\n      \"args\": [\"start\", \"${file}\"],\n      \"console\": \"integratedTerminal\",\n      \"justMyCode\": false,\n      \"env\": {\n        \"MCP_MESH_LOG_LEVEL\": \"DEBUG\",\n        \"PYTHONPATH\": \"${workspaceFolder}\"\n      }\n    },\n    {\n      \"name\": \"Debug with Remote Attach\",\n      \"type\": \"python\",\n      \"request\": \"attach\",\n      \"connect\": {\n        \"host\": \"localhost\",\n        \"port\": 5678\n      },\n      \"pathMappings\": [\n        {\n          \"localRoot\": \"${workspaceFolder}\",\n          \"remoteRoot\": \".\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"02-local-development/03-debugging/#pycharm-configuration","title":"PyCharm Configuration","text":"<ol> <li>Run \u2192 Edit Configurations \u2192 Add New Configuration \u2192 Python</li> <li>Script path: <code>/path/to/mcp-mesh/bin/meshctl</code></li> <li>Parameters: <code>start examples/simple/your_agent.py</code></li> <li>Environment variables: <code>MCP_MESH_LOG_LEVEL=DEBUG</code></li> <li>Working directory: Your project root</li> </ol>"},{"location":"02-local-development/03-debugging/#step-3-add-strategic-debug-points","title":"Step 3: Add Strategic Debug Points","text":"<p>Add debug helpers to your agents:</p> <pre><code>from mesh import agent, tool\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@agent(name=\"data-processor\")\nclass DataProcessor:\n    pass\n\n@tool(\n    capability=\"data_processor\",\n    dependencies=[\"database_query\"]\n)\ndef process_data(\n    data_id: str,\n    database_query=None\n):\n    # Debug: Log input parameters\n    logger.debug(f\"process_data called with data_id={data_id}\")\n    logger.debug(f\"DatabaseAgent_query available: {DatabaseAgent_query is not None}\")\n\n    # Debug: Breakpoint for IDE debugging\n    import pdb; pdb.set_trace()  # Remove in production!\n\n    try:\n        # Debug: Log before remote call\n        logger.debug(f\"Calling database_query with id={data_id}\")\n        result = database_query(f\"SELECT * FROM data WHERE id='{data_id}'\")\n        logger.debug(f\"Query result: {result}\")\n\n        # Process the data\n        processed = transform_data(result)\n\n        # Debug: Log success\n        logger.info(f\"Successfully processed data_id={data_id}\")\n        return processed\n\n    except Exception as e:\n        # Debug: Log full exception with stack trace\n        logger.exception(f\"Error processing data_id={data_id}\")\n        raise\n</code></pre>"},{"location":"02-local-development/03-debugging/#step-4-debug-dependency-injection","title":"Step 4: Debug Dependency Injection","text":"<p>Understand how dependencies are resolved:</p> <pre><code># Enable dependency injection debugging\nimport os\nos.environ['MCP_MESH_DEBUG_INJECTION'] = 'true'\n\n@tool(\n    capability=\"analyzer\",\n    dependencies=[\"data_processor\", \"cache_get\"]\n)\ndef analyze(\n    item_id: str,\n    data_processor=None,\n    cache_get=None\n):\n    # Debug: Check which dependencies were injected\n    logger.debug(\"Dependency injection status:\")\n    logger.debug(f\"  data_processor: {'\u2713' if data_processor else '\u2717'}\")\n    logger.debug(f\"  cache_get: {'\u2713' if cache_get else '\u2717'}\")\n\n    # Debug: Log dependency metadata\n    if hasattr(data_processor, '_mesh_metadata'):\n        logger.debug(f\"  data_processor metadata: {data_processor._mesh_metadata}\")\n</code></pre>"},{"location":"02-local-development/03-debugging/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>MCP_MESH_LOG_LEVEL</code> Global log level INFO DEBUG, WARNING, ERROR <code>MCP_MESH_DEBUG_INJECTION</code> Show DI resolution details false true <code>MCP_MESH_TRACE_ENABLED</code> Enable distributed tracing false true <code>MCP_MESH_PROFILE_ENABLED</code> Enable performance profiling false true <code>PYTHONBREAKPOINT</code> Debugger to use pdb.set_trace ipdb.set_trace"},{"location":"02-local-development/03-debugging/#examples","title":"Examples","text":""},{"location":"02-local-development/03-debugging/#example-1-debugging-remote-function-calls","title":"Example 1: Debugging Remote Function Calls","text":"<pre><code>import time\nfrom functools import wraps\n\ndef debug_timing(func):\n    \"\"\"Decorator to debug function execution time\"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        logger.debug(f\"Calling {func.__name__} with args={args}, kwargs={kwargs}\")\n        try:\n            result = func(*args, **kwargs)\n            elapsed = time.time() - start\n            logger.debug(f\"{func.__name__} completed in {elapsed:.3f}s\")\n            return result\n        except Exception as e:\n            elapsed = time.time() - start\n            logger.error(f\"{func.__name__} failed after {elapsed:.3f}s: {e}\")\n            raise\n    return wrapper\n\n@tool(capability=\"timed_service\")\n@debug_timing\ndef slow_operation(size: int):\n    \"\"\"Example of debugging performance issues\"\"\"\n    logger.debug(f\"Starting slow_operation with size={size}\")\n    # Simulate work\n    time.sleep(size * 0.1)\n    return f\"Processed {size} items\"\n</code></pre>"},{"location":"02-local-development/03-debugging/#example-2-interactive-debugging-session","title":"Example 2: Interactive Debugging Session","text":"<pre><code># debug_utils.py\nimport IPython\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ndef debug_registry_state():\n    \"\"\"Interactive function to inspect registry state\"\"\"\n    import requests\n\n    # Fetch registry data\n    agents = requests.get(\"http://localhost:8000/agents\").json()\n\n    # Create rich table\n    table = Table(title=\"Registered Agents\")\n    table.add_column(\"Name\", style=\"cyan\")\n    table.add_column(\"Status\", style=\"green\")\n    table.add_column(\"Capabilities\")\n    table.add_column(\"Dependencies\")\n\n    for agent in agents:\n        table.add_row(\n            agent['name'],\n            agent['status'],\n            ', '.join(agent.get('capabilities', [])),\n            ', '.join(agent.get('dependencies', []))\n        )\n\n    console.print(table)\n\n    # Drop into IPython for exploration\n    IPython.embed()\n\n# Use in your agent:\nif __name__ == \"__main__\":\n    debug_registry_state()\n</code></pre>"},{"location":"02-local-development/03-debugging/#best-practices","title":"Best Practices","text":"<ol> <li>Use Structured Logging: Include context like request IDs and agent names</li> <li>Avoid Print Statements: Use proper logging levels instead</li> <li>Remove Debug Code: Don't commit pdb.set_trace() or excessive logging</li> <li>Log at Boundaries: Focus on function entry/exit and external calls</li> <li>Correlate Logs: Use request IDs to track across services</li> </ol>"},{"location":"02-local-development/03-debugging/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"02-local-development/03-debugging/#pitfall-1-debugging-in-production-mode","title":"Pitfall 1: Debugging in Production Mode","text":"<p>Problem: Breakpoints and debug logs don't work in production mode</p> <p>Solution: Ensure development mode is enabled:</p> <pre><code>export MCP_DEV_MODE=true\nexport MCP_MESH_LOG_LEVEL=DEBUG\n\n# Or check mode in code\nimport os\nif os.getenv('MCP_DEV_MODE') == 'true':\n    import pdb; pdb.set_trace()\n</code></pre>"},{"location":"02-local-development/03-debugging/#pitfall-2-lost-logs-in-async-code","title":"Pitfall 2: Lost Logs in Async Code","text":"<p>Problem: Logs from async functions don't appear or are out of order</p> <p>Solution: Use proper async logging:</p> <pre><code>import asyncio\nimport logging\n\n# Configure async-friendly logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - [%(thread)d] - %(message)s'\n)\n\nasync def async_operation():\n    logger.debug(f\"Starting async operation in task {asyncio.current_task().get_name()}\")\n</code></pre>"},{"location":"02-local-development/03-debugging/#testing","title":"Testing","text":""},{"location":"02-local-development/03-debugging/#unit-test-example","title":"Unit Test Example","text":"<pre><code># tests/test_debugging.py\nimport logging\nimport pytest\nfrom unittest.mock import patch\n\ndef test_debug_logging(caplog):\n    \"\"\"Test that debug logs are captured\"\"\"\n    with caplog.at_level(logging.DEBUG):\n        from your_agent import process_data\n        process_data(data_id=\"test123\")\n\n    assert \"process_data called with data_id=test123\" in caplog.text\n</code></pre>"},{"location":"02-local-development/03-debugging/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/test_debug_tools.py\ndef test_dependency_injection_logging():\n    \"\"\"Test that DI debug mode shows injection details\"\"\"\n    import os\n    os.environ['MCP_MESH_DEBUG_INJECTION'] = 'true'\n\n    # Start agent and check logs\n    # Should see detailed injection information\n</code></pre>"},{"location":"02-local-development/03-debugging/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"02-local-development/03-debugging/#logs-to-check","title":"Logs to Check","text":"<pre><code># Agent-specific logs\ntail -f agent_debug.log | grep ERROR\n\n# Use meshctl for debugging\n./bin/meshctl status --verbose\n./bin/meshctl dependencies\n\n# Performance issues\ngrep \"slow_query\\|timeout\" agent_debug.log\n\n# Memory debugging\ngrep \"memory_usage\\|gc.collect\" agent_debug.log\n</code></pre>"},{"location":"02-local-development/03-debugging/#metrics-to-monitor","title":"Metrics to Monitor","text":"<ul> <li>Function Execution Time: Log slow operations &gt; 1 second</li> <li>Memory Usage: Track before/after large operations</li> <li>Dependency Resolution Time: Should be &lt; 100ms</li> </ul>"},{"location":"02-local-development/03-debugging/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"02-local-development/03-debugging/#issue-1-debugger-wont-attach","title":"Issue 1: Debugger Won't Attach","text":"<p>Symptoms: IDE can't connect to debugging session</p> <p>Cause: Firewall or process isolation</p> <p>Solution:</p> <pre><code># Enable remote debugging\nimport debugpy\ndebugpy.listen(5678)\ndebugpy.wait_for_client()  # Blocks until debugger attaches\n</code></pre>"},{"location":"02-local-development/03-debugging/#issue-2-logs-not-appearing","title":"Issue 2: Logs Not Appearing","text":"<p>Symptoms: Debug statements don't show in console</p> <p>Cause: Logger configuration overridden</p> <p>Solution:</p> <pre><code># Force logging configuration\nimport logging\nlogging.getLogger().setLevel(logging.DEBUG)\nlogging.getLogger('mcp_mesh').setLevel(logging.DEBUG)\n\n# Add console handler if missing\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole.setFormatter(formatter)\nlogging.getLogger().addHandler(console)\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"02-local-development/03-debugging/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Async Debugging: Some debuggers struggle with async code - use logging instead</li> <li>Multi-Process Debugging: Each agent runs in its own process - attach individually</li> <li>Production Debugging: Limited to logging - no breakpoints in production</li> </ul>"},{"location":"02-local-development/03-debugging/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add distributed tracing with OpenTelemetry</li> <li> Create debug toolbar for web UI</li> <li> Add memory profiling tools</li> <li> Support for remote debugging in Kubernetes</li> </ul>"},{"location":"02-local-development/03-debugging/#summary","title":"Summary","text":"<p>You now have powerful debugging tools for developing MCP Mesh agents:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 IDE debugging with breakpoints for step-through debugging</li> <li>\ud83d\udd11 Comprehensive logging for production-like debugging</li> <li>\ud83d\udd11 Dependency injection debugging to understand service resolution</li> <li>\ud83d\udd11 Performance debugging tools for optimization</li> </ul>"},{"location":"02-local-development/03-debugging/#next-steps","title":"Next Steps","text":"<p>Let's explore hot reload functionality to speed up your development workflow.</p> <p>Continue to Hot Reload and Development Workflow \u2192</p> <p>\ud83d\udca1 Tip: Use <code>logger.exception()</code> in except blocks - it automatically includes the full stack trace</p> <p>\ud83d\udcda Reference: Python Debugging Best Practices</p> <p>\ud83e\uddea Try It: Add a deliberate bug to your agent and practice debugging it with both IDE breakpoints and logging</p>"},{"location":"02-local-development/04-hot-reload/","title":"Hot Reload and Development Workflow","text":"<p>Accelerate development with automatic code reloading and efficient workflows</p>"},{"location":"02-local-development/04-hot-reload/#overview","title":"Overview","text":"<p>Hot reload automatically restarts your agents when you change code, eliminating the tedious cycle of stopping and restarting services manually. This guide covers enabling hot reload, optimizing your development workflow, and best practices for rapid iteration.</p> <p>Combined with proper tooling, hot reload can reduce your development cycle from minutes to seconds, allowing you to test changes instantly and maintain flow state.</p>"},{"location":"02-local-development/04-hot-reload/#key-concepts","title":"Key Concepts","text":"<ul> <li>File Watching: Monitor Python files for changes</li> <li>Graceful Restart: Agents restart without losing registry connection</li> <li>Selective Reload: Only restart changed agents, not the entire mesh</li> <li>State Preservation: Maintain debugging context across reloads</li> <li>Workflow Optimization: Tools and practices for maximum productivity</li> </ul>"},{"location":"02-local-development/04-hot-reload/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"02-local-development/04-hot-reload/#step-1-enable-hot-reload","title":"Step 1: Enable Hot Reload","text":"<p>Hot reload is built into mcp-mesh-dev:</p> <pre><code># Note: Hot reload is not currently implemented in meshctl\n# For development, manually restart agents after changes\n\n./bin/meshctl start examples/simple/my_agent.py\n\n# To restart after changes:\n# Ctrl+C to stop, then restart\n./bin/meshctl start examples/simple/my_agent.py\n</code></pre> <p>Environment variable control:</p> <pre><code># For development workflow, use entr or similar tools\n# Watch files and restart automatically\nls examples/simple/*.py | entr -r ./bin/meshctl start examples/simple/my_agent.py\n\n# Or use Docker Compose for auto-reload\ncd examples/docker-examples\ndocker-compose up --build\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#step-2-configure-watch-patterns","title":"Step 2: Configure Watch Patterns","text":"<p>Create <code>.meshwatch</code> file to control what triggers reloads:</p> <pre><code># Use external tools for file watching\n# Example with entr:\nfind examples/simple -name \"*.py\" | entr -r ./bin/meshctl start examples/simple/my_agent.py\n\n# Example with watchexec:\nwatchexec -e py -r \"./bin/meshctl start examples/simple/my_agent.py\"\n\n# Or use nodemon (if you have Node.js):\nnodemon --exec \"./bin/meshctl start examples/simple/my_agent.py\" --ext py\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#step-3-optimize-your-editor-for-hot-reload","title":"Step 3: Optimize Your Editor for Hot Reload","text":""},{"location":"02-local-development/04-hot-reload/#vs-code-settings","title":"VS Code Settings","text":"<pre><code>{\n  \"files.autoSave\": \"afterDelay\",\n  \"files.autoSaveDelay\": 1000,\n  \"python.linting.lintOnSave\": true,\n  \"editor.formatOnSave\": true,\n  \"[python]\": {\n    \"editor.formatOnSaveMode\": \"file\"\n  }\n}\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#pycharm-settings","title":"PyCharm Settings","text":"<ol> <li>Settings \u2192 Appearance &amp; Behavior \u2192 System Settings</li> <li>Enable \"Save files automatically\"</li> <li>Set delay to 1 second</li> <li>Enable \"Save files on frame deactivation\"</li> </ol>"},{"location":"02-local-development/04-hot-reload/#step-4-set-up-development-scripts","title":"Step 4: Set Up Development Scripts","text":"<p>Create <code>dev.sh</code> for quick development:</p> <pre><code>#!/bin/bash\n# dev.sh - Development helper script\n\n# Colors for output\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m'\n\n# Function to start development environment\nstart_dev() {\n    echo -e \"${GREEN}Starting MCP Mesh development environment...${NC}\"\n\n    # Clean logs for fresh start\n    rm -f agent_debug.log\n\n    # Set development environment\n    export MCP_MESH_LOG_LEVEL=DEBUG\n    export MCP_MESH_DEBUG_MODE=true\n\n    # Start registry\n    ./bin/meshctl start-registry &amp;\n    REGISTRY_PID=$!\n\n    # Wait for registry\n    sleep 3\n\n    # Start agents\n    ./bin/meshctl start examples/simple/system_agent.py &amp;\n    ./bin/meshctl start examples/simple/hello_world.py &amp;\n    DEV_PID=$!\n\n    echo -e \"${GREEN}Development environment started!${NC}\"\n    echo -e \"${YELLOW}Watching for file changes...${NC}\"\n    echo \"Process ID: $DEV_PID\"\n\n    # Monitor logs in another terminal\n    if command -v gnome-terminal &amp;&gt; /dev/null; then\n        gnome-terminal -- bash -c \"tail -f agent_debug.log | grep -E 'ERROR|WARNING|Reloading'\"\n    fi\n\n    wait $DEV_PID\n}\n\n# Function to run quick tests\nquick_test() {\n    echo -e \"${GREEN}Running quick tests...${NC}\"\n    pytest tests/ -v --tb=short -x\n}\n\n# Main menu\ncase \"$1\" in\n    start)\n        start_dev\n        ;;\n    test)\n        quick_test\n        ;;\n    *)\n        echo \"Usage: ./dev.sh {start|test}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>MCP_MESH_LOG_LEVEL</code> Logging verbosity INFO DEBUG, ERROR <code>MCP_MESH_DEBUG_MODE</code> Enable debug output false true <code>MCP_MESH_AUTO_RUN</code> Auto-start agent HTTP server true false <code>HOST</code> Agent bind address 0.0.0.0 127.0.0.1 <code>MCP_MESH_HTTP_PORT</code> Agent HTTP port (0=auto) 0 8080"},{"location":"02-local-development/04-hot-reload/#examples","title":"Examples","text":""},{"location":"02-local-development/04-hot-reload/#example-1-development-workflow-script","title":"Example 1: Development Workflow Script","text":"<pre><code># agents/dev_utils.py\nimport os\nimport time\nfrom datetime import datetime\nfrom functools import wraps\n\ndef development_mode(func):\n    \"\"\"Decorator for development-only features\"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        if os.getenv('MCP_DEV_MODE') == 'true':\n            print(f\"[DEV] {func.__name__} called at {datetime.now()}\")\n            start = time.time()\n            result = func(*args, **kwargs)\n            print(f\"[DEV] {func.__name__} took {time.time() - start:.3f}s\")\n            return result\n        return func(*args, **kwargs)\n    return wrapper\n\n# State that persists across reloads\n_persistent_cache = {}\n\ndef get_persistent_cache():\n    \"\"\"Access cache that survives hot reloads\"\"\"\n    return _persistent_cache\n\n@tool(capability=\"dev_agent\")\n@development_mode\ndef process_with_cache(key: str, value: str = None):\n    \"\"\"Example using persistent cache\"\"\"\n    cache = get_persistent_cache()\n\n    if value is not None:\n        cache[key] = value\n        return f\"Stored {key}={value}\"\n\n    return cache.get(key, \"Not found\")\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#example-2-watch-configuration-for-complex-project","title":"Example 2: Watch Configuration for Complex Project","text":"<pre><code># watch_config.py\nimport watchdog.events\nimport watchdog.observers\n\nclass CustomReloadHandler(watchdog.events.FileSystemEventHandler):\n    \"\"\"Custom handler for fine-grained reload control\"\"\"\n\n    def __init__(self, reload_callback):\n        self.reload_callback = reload_callback\n        self.last_reload = 0\n        self.reload_delay = 0.5  # seconds\n\n    def should_reload(self, event):\n        \"\"\"Determine if file change should trigger reload\"\"\"\n        # Skip temporary files\n        if event.src_path.endswith('.tmp') or '~' in event.src_path:\n            return False\n\n        # Skip test files during normal development\n        if 'test_' in event.src_path and not os.getenv('RELOAD_TESTS'):\n            return False\n\n        # Debounce rapid changes\n        current_time = time.time()\n        if current_time - self.last_reload &lt; self.reload_delay:\n            return False\n\n        self.last_reload = current_time\n        return True\n\n    def on_modified(self, event):\n        if not event.is_directory and self.should_reload(event):\n            print(f\"Detected change in {event.src_path}\")\n            self.reload_callback(event.src_path)\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#best-practices","title":"Best Practices","text":"<ol> <li>Save Frequently: Configure auto-save in your editor</li> <li>Small Changes: Make incremental changes for faster feedback</li> <li>Watch Logs: Keep a terminal open with filtered logs</li> <li>State Management: Design agents to handle restart gracefully</li> <li>Exclude Tests: Don't reload on test file changes during development</li> </ol>"},{"location":"02-local-development/04-hot-reload/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"02-local-development/04-hot-reload/#pitfall-1-reload-loops","title":"Pitfall 1: Reload Loops","text":"<p>Problem: Agent crashes on startup, causing infinite reload loop</p> <p>Solution: Add startup validation and circuit breaker:</p> <pre><code># At the top of your agent file\nimport sys\nimport time\n\n# Simple circuit breaker\nstartup_file = '.startup_attempts'\nmax_attempts = 3\nwindow_seconds = 10\n\ntry:\n    with open(startup_file, 'r') as f:\n        attempts = [float(line.strip()) for line in f]\n\n    recent_attempts = [t for t in attempts if time.time() - t &lt; window_seconds]\n\n    if len(recent_attempts) &gt;= max_attempts:\n        print(f\"Too many startup attempts ({len(recent_attempts)}) in {window_seconds}s\")\n        sys.exit(1)\nexcept FileNotFoundError:\n    recent_attempts = []\n\n# Record this startup attempt\nwith open(startup_file, 'a') as f:\n    f.write(f\"{time.time()}\\n\")\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#pitfall-2-state-loss-on-reload","title":"Pitfall 2: State Loss on Reload","text":"<p>Problem: In-memory state lost when agent reloads</p> <p>Solution: Use external state storage:</p> <pre><code>import pickle\nimport atexit\n\nSTATE_FILE = '.agent_state.pkl'\n\ndef save_state():\n    \"\"\"Save state before reload\"\"\"\n    with open(STATE_FILE, 'wb') as f:\n        pickle.dump({\n            'cache': cache_data,\n            'counters': counters,\n            'timestamp': time.time()\n        }, f)\n\ndef load_state():\n    \"\"\"Restore state after reload\"\"\"\n    try:\n        with open(STATE_FILE, 'rb') as f:\n            return pickle.load(f)\n    except FileNotFoundError:\n        return {'cache': {}, 'counters': {}}\n\n# Register save on exit\natexit.register(save_state)\n\n# Load on startup\nstate = load_state()\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#testing","title":"Testing","text":""},{"location":"02-local-development/04-hot-reload/#unit-test-example","title":"Unit Test Example","text":"<pre><code># tests/test_hot_reload.py\nimport os\nimport time\nimport tempfile\nimport shutil\n\ndef test_file_change_triggers_reload():\n    \"\"\"Test that modifying a file triggers reload\"\"\"\n    with tempfile.TemporaryDirectory() as tmpdir:\n        # Create test agent\n        agent_file = os.path.join(tmpdir, 'test_agent.py')\n        with open(agent_file, 'w') as f:\n            f.write('# version 1\\n')\n\n        # Start monitoring (mock)\n        changes_detected = []\n\n        # Modify file\n        time.sleep(1)\n        with open(agent_file, 'a') as f:\n            f.write('# version 2\\n')\n\n        # Verify reload triggered\n        assert len(changes_detected) == 1\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/test_reload_integration.py\nimport subprocess\nimport requests\nimport time\n\ndef test_agent_survives_reload():\n    \"\"\"Test agent remains accessible after reload\"\"\"\n    # Start agent with hot reload\n    proc = subprocess.Popen([\n        'mcp-mesh-dev', 'start', 'test_agent.py'\n    ])\n\n    time.sleep(3)\n\n    # Verify agent is running\n    response = requests.get('http://localhost:8888/health')\n    assert response.status_code == 200\n\n    # Modify agent file\n    with open('test_agent.py', 'a') as f:\n        f.write('\\n# trigger reload\\n')\n\n    time.sleep(2)  # Wait for reload\n\n    # Verify agent still accessible\n    response = requests.get('http://localhost:8888/health')\n    assert response.status_code == 200\n\n    proc.terminate()\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"02-local-development/04-hot-reload/#logs-to-check","title":"Logs to Check","text":"<pre><code># Watch reload events\ntail -f ~/.mcp-mesh/logs/mcp-mesh.log | grep -i reload\n\n# Monitor file system events\ninotifywait -m -r agents/ -e modify\n\n# Track reload performance\ngrep \"Reload completed\" ~/.mcp-mesh/logs/mcp-mesh.log | tail -20\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#metrics-to-monitor","title":"Metrics to Monitor","text":"<ul> <li>Reload Time: Should be &lt; 2 seconds for most agents</li> <li>Reload Frequency: Too many reloads may indicate editor issues</li> <li>Memory Growth: Check for leaks across reloads</li> </ul>"},{"location":"02-local-development/04-hot-reload/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"02-local-development/04-hot-reload/#issue-1-changes-not-triggering-reload","title":"Issue 1: Changes Not Triggering Reload","text":"<p>Symptoms: File saved but agent doesn't restart</p> <p>Cause: File not in watch pattern or save not detected</p> <p>Solution:</p> <pre><code># Check if external file watcher is working\necho \"test\" &gt;&gt; examples/simple/my_agent.py\n\n# Use external tools for file watching\nls examples/simple/*.py | entr -r ./bin/meshctl start examples/simple/my_agent.py\n\n# Check file system events\ninotifywait -m examples/simple/my_agent.py\n</code></pre>"},{"location":"02-local-development/04-hot-reload/#issue-2-slow-reload-performance","title":"Issue 2: Slow Reload Performance","text":"<p>Symptoms: Reload takes &gt; 5 seconds</p> <p>Cause: Large imports or initialization code</p> <p>Solution:</p> <pre><code># Move slow imports inside functions\ndef process_data():\n    import pandas as pd  # Import only when needed\n    return pd.DataFrame()\n\n# Cache expensive initialization\n_model = None\n\ndef get_model():\n    global _model\n    if _model is None:\n        _model = load_expensive_model()\n    return _model\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"02-local-development/04-hot-reload/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Import Caching: Some Python imports may not reload properly</li> <li>Global State: Module-level state may persist incorrectly</li> <li>File System Delays: Network file systems may have delayed notifications</li> </ul>"},{"location":"02-local-development/04-hot-reload/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add support for configuration file reload</li> <li> Implement smart reload (only affected agents)</li> <li> Add reload performance metrics</li> <li> Support for notebook-based development</li> </ul>"},{"location":"02-local-development/04-hot-reload/#summary","title":"Summary","text":"<p>Hot reload dramatically improves your development workflow with MCP Mesh:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Automatic agent restart on code changes</li> <li>\ud83d\udd11 Configurable watch patterns for your project structure</li> <li>\ud83d\udd11 State preservation strategies for complex agents</li> <li>\ud83d\udd11 Integration with development tools and editors</li> </ul>"},{"location":"02-local-development/04-hot-reload/#next-steps","title":"Next Steps","text":"<p>Now let's learn how to write comprehensive tests for your agents.</p> <p>Continue to Testing Your Agents \u2192</p> <p>\ud83d\udca1 Tip: Use <code>entr</code> or <code>watchexec</code> for custom reload scripts: <code>ls agents/*.py | entr -r mcp-mesh-dev start agents/</code></p> <p>\ud83d\udcda Reference: Python Import System</p> <p>\ud83e\uddea Try It: Create an agent with a counter that increments on each request - make it persist across reloads</p>"},{"location":"02-local-development/05-testing/","title":"Testing Your Agents","text":"<p>Write comprehensive tests for MCP Mesh agents including unit tests, integration tests, and dependency mocking</p>"},{"location":"02-local-development/05-testing/#overview","title":"Overview","text":"<p>Testing distributed systems requires special consideration for dependencies, network calls, and asynchronous operations. This guide covers testing strategies specific to MCP Mesh agents, including how to mock dependencies, test dependency injection, and verify distributed behavior.</p> <p>We'll explore unit testing individual functions, integration testing with real dependencies, and end-to-end testing of your entire mesh.</p>"},{"location":"02-local-development/05-testing/#key-concepts","title":"Key Concepts","text":"<ul> <li>Unit Testing: Test agent functions in isolation</li> <li>Dependency Mocking: Mock injected dependencies for controlled testing</li> <li>Integration Testing: Test agents with real registry and dependencies</li> <li>Contract Testing: Verify agent interfaces remain stable</li> <li>Performance Testing: Ensure agents meet performance requirements</li> </ul>"},{"location":"02-local-development/05-testing/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"02-local-development/05-testing/#step-1-set-up-testing-framework","title":"Step 1: Set Up Testing Framework","text":"<p>Install testing dependencies:</p> <pre><code># Core testing tools\npip install pytest pytest-asyncio pytest-cov pytest-mock\n\n# Additional helpful tools\npip install pytest-timeout pytest-xdist httpx\n\n# Development dependencies\npip install -e \".[test]\"  # If your package has test extras\n</code></pre> <p>Create <code>pytest.ini</code> configuration:</p> <pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts =\n    -v\n    --tb=short\n    --strict-markers\n    --cov=agents\n    --cov-report=term-missing\n    --cov-report=html\nmarkers =\n    unit: Unit tests (fast)\n    integration: Integration tests (slower)\n    e2e: End-to-end tests (slowest)\nasyncio_mode = auto\n</code></pre>"},{"location":"02-local-development/05-testing/#step-2-unit-test-agent-functions","title":"Step 2: Unit Test Agent Functions","text":"<p>Create test structure:</p> <pre><code># tests/test_weather_agent.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom examples.simple.weather_agent import get_weather, process_forecast\n\nclass TestWeatherAgent:\n    \"\"\"Unit tests for weather agent functions\"\"\"\n\n    @pytest.fixture\n    def mock_context(self):\n        \"\"\"Mock MCP context\"\"\"\n        context = Mock()\n        context.request_id = \"test-123\"\n        return context\n\n    def test_get_weather_success(self, mock_context):\n        \"\"\"Test successful weather retrieval\"\"\"\n        result = get_weather(mock_context, city=\"London\")\n\n        assert result is not None\n        assert \"temperature\" in result\n        assert result[\"city\"] == \"London\"\n\n    def test_get_weather_invalid_city(self, mock_context):\n        \"\"\"Test handling of invalid city\"\"\"\n        with pytest.raises(ValueError, match=\"Invalid city\"):\n            get_weather(mock_context, city=\"\")\n\n    @patch('agents.weather_agent.fetch_external_api')\n    def test_get_weather_api_failure(self, mock_fetch, mock_context):\n        \"\"\"Test handling of API failures\"\"\"\n        mock_fetch.side_effect = Exception(\"API Error\")\n\n        result = get_weather(mock_context, city=\"Paris\")\n        assert result[\"error\"] == \"Unable to fetch weather\"\n</code></pre>"},{"location":"02-local-development/05-testing/#step-3-test-dependency-injection","title":"Step 3: Test Dependency Injection","text":"<p>Mock injected dependencies:</p> <pre><code># tests/test_dependency_injection.py\nimport pytest\nfrom unittest.mock import Mock, AsyncMock\nfrom examples.simple.analytics_agent import analyze_data\n\nclass TestDependencyInjection:\n    \"\"\"Test agents with dependency injection\"\"\"\n\n    @pytest.fixture\n    def mock_dependencies(self):\n        \"\"\"Create mock dependencies\"\"\"\n        return {\n            'database_query': Mock(return_value={\"count\": 42}),\n            'cache_get': Mock(return_value=None),\n            'cache_set': Mock(return_value=True)\n        }\n\n    def test_analyze_with_all_dependencies(self, mock_dependencies):\n        \"\"\"Test when all dependencies are available\"\"\"\n        result = analyze_data(\n            dataset=\"sales\",\n            **mock_dependencies\n        )\n\n        # Verify dependency calls\n        mock_dependencies['database_query'].assert_called_once_with(\"sales\")\n        mock_dependencies['cache_get'].assert_called_once()\n\n        assert result[\"source\"] == \"database\"\n        assert result[\"count\"] == 42\n\n    def test_analyze_with_cache_hit(self, mock_dependencies):\n        \"\"\"Test when cache has data\"\"\"\n        mock_dependencies['cache_get'].return_value = {\"cached\": True}\n\n        result = analyze_data(dataset=\"sales\", **mock_dependencies)\n\n        # Should not query database on cache hit\n        mock_dependencies['database_query'].assert_not_called()\n        assert result[\"source\"] == \"cache\"\n\n    def test_analyze_graceful_degradation(self):\n        \"\"\"Test when dependencies are unavailable\"\"\"\n        # Call with no dependencies\n        result = analyze_data(\n            dataset=\"sales\",\n            database_query=None,\n            cache_get=None,\n            cache_set=None\n        )\n\n        assert result[\"error\"] == \"No data sources available\"\n</code></pre>"},{"location":"02-local-development/05-testing/#step-4-integration-testing","title":"Step 4: Integration Testing","text":"<p>Test with real registry and agents:</p> <pre><code># tests/test_integration.py\nimport pytest\nimport subprocess\nimport time\nimport requests\nfrom pathlib import Path\n\nclass TestMeshIntegration:\n    \"\"\"Integration tests with real agents\"\"\"\n\n    @pytest.fixture(scope=\"class\")\n    def mesh_environment(self):\n        \"\"\"Start mesh environment for testing\"\"\"\n        procs = []\n\n        # Start test registry\n        registry_proc = subprocess.Popen([\n            \"./bin/meshctl\", \"start-registry\",\n            \"--port\", \"18000\"\n        ])\n        procs.append(registry_proc)\n        time.sleep(2)  # Wait for registry\n\n        # Start test agents\n        for agent in [\"system_agent.py\", \"hello_world.py\"]:\n            proc = subprocess.Popen([\n                \"./bin/meshctl\", \"start\", f\"examples/simple/{agent}\"\n            ], env={**os.environ, \"MCP_MESH_REGISTRY_URL\": \"http://localhost:18000\"})\n            procs.append(proc)\n\n        # Wait for agents to register\n        time.sleep(5)\n\n        yield\n\n        # Cleanup\n        for proc in procs:\n            proc.terminate()\n            proc.wait()\n\n    def test_agent_discovery(self, mesh_environment):\n        \"\"\"Test agents can discover each other\"\"\"\n        response = requests.get(\"http://localhost:18000/agents\")\n        agents = response.json()\n\n        agent_names = [a[\"name\"] for a in agents]\n        assert \"system-agent\" in agent_names\n        assert \"hello-world\" in agent_names\n\n    def test_dependency_resolution(self, mesh_environment):\n        \"\"\"Test hello world agent can use system agent\"\"\"\n        # Find hello world agent port (auto-assigned)\n        agents_response = requests.get(\"http://localhost:18000/agents\")\n        agents = agents_response.json()\n        hello_world = next(a for a in agents if a[\"name\"] == \"hello-world\")\n\n        response = requests.post(\n            f\"http://localhost:{hello_world['http_port']}/mcp\",\n            json={\"method\": \"tools/call\", \"params\": {\"name\": \"hello_mesh_simple\", \"arguments\": {}}}\n        )\n\n        result = response.json()\n        assert \"result\" in result\n        assert \"Today is\" in result[\"result\"]  # Shows date injection worked\n</code></pre>"},{"location":"02-local-development/05-testing/#step-5-create-test-utilities","title":"Step 5: Create Test Utilities","text":"<p>Build reusable test helpers:</p> <pre><code># tests/utils.py\nimport asyncio\nimport functools\nfrom contextlib import contextmanager\nfrom unittest.mock import Mock\n\nclass MockRegistry:\n    \"\"\"Mock registry for testing\"\"\"\n    def __init__(self):\n        self.agents = {}\n\n    def register(self, agent_name, capabilities, dependencies):\n        self.agents[agent_name] = {\n            \"capabilities\": capabilities,\n            \"dependencies\": dependencies,\n            \"status\": \"healthy\"\n        }\n\n    def discover(self, capability):\n        for name, info in self.agents.items():\n            if capability in info[\"capabilities\"]:\n                return {\"name\": name, \"url\": f\"http://mock/{name}\"}\n        return None\n\n@contextmanager\ndef mock_mesh_environment():\n    \"\"\"Context manager for test environment\"\"\"\n    registry = MockRegistry()\n\n    # Mock environment variables\n    import os\n    old_env = os.environ.copy()\n    os.environ['MCP_MESH_REGISTRY_URL'] = 'http://mock-registry:8000'\n    os.environ['MCP_MESH_LOG_LEVEL'] = 'ERROR'  # Quiet logs in tests\n    os.environ['MCP_MESH_DEBUG_MODE'] = 'false'\n\n    try:\n        yield registry\n    finally:\n        os.environ.clear()\n        os.environ.update(old_env)\n\ndef async_test(timeout=5):\n    \"\"\"Decorator for async test with timeout\"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            async def run():\n                return await asyncio.wait_for(\n                    func(*args, **kwargs),\n                    timeout=timeout\n                )\n            return asyncio.run(run())\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"02-local-development/05-testing/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>PYTEST_TIMEOUT</code> Global test timeout 300 60 <code>PYTEST_WORKERS</code> Parallel test workers auto 4 <code>MCP_TEST_REGISTRY_URL</code> Test registry URL http://localhost:18000 http://test-registry:8000 <code>MCP_TEST_ISOLATION</code> Isolate test agents true false <code>COVERAGE_THRESHOLD</code> Minimum coverage % 80 90"},{"location":"02-local-development/05-testing/#examples","title":"Examples","text":""},{"location":"02-local-development/05-testing/#example-1-testing-async-agents","title":"Example 1: Testing Async Agents","text":"<pre><code># tests/test_async_agent.py\nimport pytest\nimport asyncio\nfrom examples.simple.async_processor import process_batch\n\n@pytest.mark.asyncio\nasync def test_batch_processing():\n    \"\"\"Test async batch processing\"\"\"\n    items = [\"item1\", \"item2\", \"item3\"]\n\n    # Mock async dependency\n    async def mock_process_item(item):\n        await asyncio.sleep(0.1)  # Simulate work\n        return f\"processed_{item}\"\n\n    results = await process_batch(\n        items,\n        processor_process=mock_process_item\n    )\n\n    assert len(results) == 3\n    assert all(r.startswith(\"processed_\") for r in results)\n\n@pytest.mark.asyncio\nasync def test_batch_processing_timeout():\n    \"\"\"Test timeout handling\"\"\"\n    items = [\"slow_item\"] * 10\n\n    async def slow_processor(item):\n        await asyncio.sleep(10)  # Too slow!\n\n    with pytest.raises(asyncio.TimeoutError):\n        await asyncio.wait_for(\n            process_batch(items, processor_process=slow_processor),\n            timeout=1.0\n        )\n</code></pre>"},{"location":"02-local-development/05-testing/#example-2-contract-testing","title":"Example 2: Contract Testing","text":"<pre><code># tests/test_contracts.py\nimport json\nfrom jsonschema import validate\n\n# Define agent contract\nWEATHER_AGENT_CONTRACT = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"temperature\": {\"type\": \"number\"},\n        \"humidity\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 100},\n        \"city\": {\"type\": \"string\"},\n        \"timestamp\": {\"type\": \"string\", \"format\": \"date-time\"}\n    },\n    \"required\": [\"temperature\", \"city\", \"timestamp\"]\n}\n\ndef test_weather_agent_contract():\n    \"\"\"Verify weather agent output matches contract\"\"\"\n    from examples.simple.weather_agent import get_weather\n\n    result = get_weather(city=\"London\")\n\n    # Validate against contract\n    validate(instance=result, schema=WEATHER_AGENT_CONTRACT)\n\ndef test_contract_backwards_compatibility():\n    \"\"\"Ensure new changes don't break existing consumers\"\"\"\n    # Test with minimal required fields\n    minimal_response = {\n        \"temperature\": 20.5,\n        \"city\": \"Paris\",\n        \"timestamp\": \"2024-01-01T12:00:00Z\"\n    }\n\n    validate(instance=minimal_response, schema=WEATHER_AGENT_CONTRACT)\n</code></pre>"},{"location":"02-local-development/05-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test Pyramid: Many unit tests, fewer integration tests, minimal E2E tests</li> <li>Mock External Services: Never call real APIs in unit tests</li> <li>Test Edge Cases: Empty inputs, null dependencies, timeouts</li> <li>Use Fixtures: Share common test setup with pytest fixtures</li> <li>Parallel Testing: Use pytest-xdist for faster test runs</li> </ol>"},{"location":"02-local-development/05-testing/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"02-local-development/05-testing/#pitfall-1-testing-with-real-dependencies","title":"Pitfall 1: Testing with Real Dependencies","text":"<p>Problem: Tests fail when external services are down</p> <p>Solution: Always mock external dependencies:</p> <pre><code># Bad: Depends on real service\ndef test_weather():\n    result = get_weather(\"London\")  # Calls real API!\n\n# Good: Mocked service\n@patch('requests.get')\ndef test_weather(mock_get):\n    mock_get.return_value.json.return_value = {\"temp\": 20}\n    result = get_weather(\"London\")\n</code></pre>"},{"location":"02-local-development/05-testing/#pitfall-2-shared-state-between-tests","title":"Pitfall 2: Shared State Between Tests","text":"<p>Problem: Tests pass individually but fail when run together</p> <p>Solution: Ensure test isolation:</p> <pre><code>@pytest.fixture(autouse=True)\ndef reset_state():\n    \"\"\"Reset any global state before each test\"\"\"\n    from agents.cache import clear_cache\n    clear_cache()\n    yield\n    clear_cache()  # Cleanup after test\n</code></pre>"},{"location":"02-local-development/05-testing/#testing","title":"Testing","text":""},{"location":"02-local-development/05-testing/#performance-test-example","title":"Performance Test Example","text":"<pre><code># tests/test_performance.py\nimport time\nimport pytest\nfrom agents.processor import batch_process\n\n@pytest.mark.benchmark\ndef test_processing_performance():\n    \"\"\"Ensure processing meets performance requirements\"\"\"\n    from examples.simple.processor import batch_process\n    large_dataset = list(range(10000))\n\n    start = time.time()\n    results = batch_process(large_dataset)\n    duration = time.time() - start\n\n    assert len(results) == 10000\n    assert duration &lt; 1.0  # Must process in under 1 second\n\n    # Calculate throughput\n    throughput = len(results) / duration\n    assert throughput &gt; 5000  # At least 5000 items/second\n</code></pre>"},{"location":"02-local-development/05-testing/#load-test-example","title":"Load Test Example","text":"<pre><code># tests/test_load.py\nimport concurrent.futures\nimport requests\n\ndef test_agent_under_load():\n    \"\"\"Test agent handles concurrent requests\"\"\"\n    # Use actual agent endpoint from registry\n    agents_response = requests.get(\"http://localhost:8000/agents\")\n    agents = agents_response.json()\n    agent = agents[0]  # Use first available agent\n    url = f\"http://localhost:{agent['http_port']}/mcp\"\n    num_requests = 100\n\n    def make_request(i):\n        response = requests.post(url, json={\"id\": i})\n        return response.status_code == 200\n\n    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:\n        results = list(executor.map(make_request, range(num_requests)))\n\n    success_rate = sum(results) / len(results)\n    assert success_rate &gt;= 0.95  # 95% success rate under load\n</code></pre>"},{"location":"02-local-development/05-testing/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"02-local-development/05-testing/#test-metrics-to-track","title":"Test Metrics to Track","text":"<pre><code># Coverage report\npytest --cov=agents --cov-report=html\n# Open htmlcov/index.html\n\n# Test duration analysis\npytest --durations=10\n\n# Failed test debugging\npytest -vvs --tb=long --pdb-trace\n</code></pre>"},{"location":"02-local-development/05-testing/#debugging-test-failures","title":"Debugging Test Failures","text":"<ul> <li>Verbose Output: Use <code>-vvs</code> for detailed output</li> <li>Drop to Debugger: Use <code>--pdb</code> to debug failures</li> <li>Capture Logs: Use <code>--log-cli-level=DEBUG</code> to see logs</li> </ul>"},{"location":"02-local-development/05-testing/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"02-local-development/05-testing/#issue-1-import-errors-in-tests","title":"Issue 1: Import Errors in Tests","text":"<p>Symptoms: <code>ModuleNotFoundError</code> when running tests</p> <p>Cause: Python path not configured correctly</p> <p>Solution:</p> <pre><code># Add to pytest.ini\n[tool:pytest]\npythonpath = .\n\n# Or set PYTHONPATH\nexport PYTHONPATH=$PYTHONPATH:.\n</code></pre>"},{"location":"02-local-development/05-testing/#issue-2-async-test-hangs","title":"Issue 2: Async Test Hangs","text":"<p>Symptoms: Test never completes, hangs forever</p> <p>Cause: Missing await or event loop issues</p> <p>Solution:</p> <pre><code># Use pytest-asyncio properly\n@pytest.mark.asyncio\nasync def test_async():\n    result = await async_function()  # Don't forget await!\n\n# Or use pytest-timeout\n@pytest.mark.timeout(5)\nasync def test_with_timeout():\n    await potentially_hanging_function()\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"02-local-development/05-testing/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Registry Mocking: Full registry behavior is complex to mock</li> <li>Timing Issues: Integration tests may have race conditions</li> <li>Resource Cleanup: Ensure all processes are terminated after tests</li> </ul>"},{"location":"02-local-development/05-testing/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add mutation testing support</li> <li> Create test data generators</li> <li> Add visual test result dashboard</li> <li> Support for behavior-driven testing (BDD)</li> </ul>"},{"location":"02-local-development/05-testing/#summary","title":"Summary","text":"<p>You now have comprehensive testing strategies for MCP Mesh agents:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Unit tests with mocked dependencies for fast feedback</li> <li>\ud83d\udd11 Integration tests with real agents for confidence</li> <li>\ud83d\udd11 Test utilities and fixtures for maintainable tests</li> <li>\ud83d\udd11 Performance and load testing for production readiness</li> </ul>"},{"location":"02-local-development/05-testing/#next-steps","title":"Next Steps","text":"<p>You've completed the local development section! Consider exploring Docker deployment next.</p> <p>Continue to Docker Deployment \u2192</p> <p>\ud83d\udca1 Tip: Run tests in watch mode during development: <code>ptw -- -v</code> (requires pytest-watch)</p> <p>\ud83d\udcda Reference: Pytest Documentation</p> <p>\ud83e\uddea Try It: Write a test that verifies your agent gracefully handles all dependencies being unavailable</p>"},{"location":"02-local-development/troubleshooting/","title":"Local Development Troubleshooting Guide","text":"<p>Quick solutions to common local development issues with MCP Mesh</p>"},{"location":"02-local-development/troubleshooting/#overview","title":"Overview","text":"<p>This guide provides solutions to frequently encountered issues during local development with MCP Mesh. Each issue includes symptoms, root causes, and step-by-step solutions.</p>"},{"location":"02-local-development/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this diagnostic script to check your environment:</p> <pre><code>#!/bin/bash\necho \"MCP Mesh Development Diagnostics\"\necho \"================================\"\n\n# Check Python version\necho -n \"Python version: \"\npython --version 2&gt;&amp;1 || echo \"NOT FOUND\"\n\n# Check MCP Mesh installation\necho -n \"MCP Mesh build: \"\nls bin/meshctl 2&gt;&amp;1 &amp;&amp; echo \"FOUND\" || echo \"NOT BUILT\"\n\n# Check CLI tool\necho -n \"CLI tool: \"\n./bin/meshctl --version 2&gt;&amp;1 || echo \"NOT WORKING\"\n\n# Check registry\necho -n \"Registry status: \"\ncurl -s http://localhost:8000/health | jq -r '.status' 2&gt;&amp;1 || echo \"NOT RUNNING\"\n\n# Check environment\necho -e \"\\nEnvironment variables:\"\nenv | grep MCP_MESH || echo \"No MCP_MESH variables set\"\n\n# Check ports\necho -e \"\\nPort availability:\"\nfor port in 8000 8081 8082; do\n    nc -zv localhost $port 2&gt;&amp;1 | grep -q succeeded &amp;&amp; echo \"Port $port: IN USE\" || echo \"Port $port: AVAILABLE\"\ndone\n</code></pre>"},{"location":"02-local-development/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"02-local-development/troubleshooting/#issue-1-mcp-mesh-import-error","title":"Issue 1: MCP Mesh Import Error","text":"<p>Symptoms:</p> <pre><code>ImportError: cannot import name 'agent' from 'mesh'\n</code></pre> <p>Cause: MCP Mesh not built or wrong Python path</p> <p>Solution:</p> <pre><code># Build MCP Mesh from source\ncd /path/to/mcp-mesh\nmake install-dev\n\n# Verify installation\npython -c \"from mesh import agent, tool; print('MCP Mesh imported successfully')\"\n\n# Check PYTHONPATH includes project\nexport PYTHONPATH=$PYTHONPATH:$(pwd)/src/runtime/python/src\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-2-registry-connection-failed","title":"Issue 2: Registry Connection Failed","text":"<p>Symptoms:</p> <pre><code>Error: Failed to connect to registry at http://localhost:8000\nConnection refused\n</code></pre> <p>Cause: Registry not running or using wrong port</p> <p>Solution:</p> <pre><code># Check if registry is running\nps aux | grep meshctl\n\n# Check what's using port 8000\nlsof -i :8000\n\n# Start registry manually\n./bin/meshctl start-registry\n\n# Or kill existing process\nkill $(lsof -t -i:8000)\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-3-database-connection-error","title":"Issue 3: Database Connection Error","text":"<p>Symptoms:</p> <pre><code>Error: Registry connection failed or agent registration timeout\n</code></pre> <p>Cause: Registry not running or network connectivity issues</p> <p>Solution:</p> <pre><code># Start registry first\n./bin/meshctl start-registry\n\n# Wait for registry to be ready\nuntil curl -s http://localhost:8000/health; do sleep 1; done\n\n# Then start agents\n./bin/meshctl start examples/simple/my_agent.py\n\n# For Docker environment\ncd examples/docker-examples\ndocker-compose up --build\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-4-agent-auto-restart","title":"Issue 4: Agent Auto-Restart","text":"<p>Symptoms:</p> <ul> <li>Need to manually restart agents after code changes</li> <li>No automatic reload functionality</li> </ul> <p>Cause: Built-in hot reload not implemented</p> <p>Solution:</p> <pre><code># Use external file watchers\n# Install entr: brew install entr (macOS) or apt install entr (Linux)\nls examples/simple/*.py | entr -r ./bin/meshctl start examples/simple/my_agent.py\n\n# Alternative with watchexec\nwatchexec -e py -r \"./bin/meshctl start examples/simple/my_agent.py\"\n\n# Use Docker Compose for development with auto-rebuild\ncd examples/docker-examples\ndocker-compose up --build\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-5-port-already-in-use","title":"Issue 5: Port Already in Use","text":"<p>Symptoms:</p> <pre><code>Error: address already in use :::8081\n</code></pre> <p>Cause: Previous agent still running or port conflict</p> <p>Solution:</p> <pre><code># Find process using port\nlsof -i :8081\n# or on Windows\nnetstat -ano | findstr :8081\n\n# Kill the process\nkill -9 $(lsof -t -i:8081)\n\n# Agent ports are auto-assigned by default\n# Check actual ports with:\n./bin/meshctl list agents\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-6-virtual-environment-issues","title":"Issue 6: Virtual Environment Issues","text":"<p>Symptoms:</p> <ul> <li>Package conflicts</li> <li>\"No module named 'venv'\"</li> <li>Permission errors</li> </ul> <p>Solution:</p> <pre><code># Create fresh virtual environment\npython -m venv .venv --clear\n\n# Activate it\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate  # Windows\n\n# Upgrade pip\npython -m pip install --upgrade pip\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-7-memoryresource-issues","title":"Issue 7: Memory/Resource Issues","text":"<p>Symptoms:</p> <ul> <li>Agent crashes with no error</li> <li>System becomes slow</li> <li>\"Cannot allocate memory\"</li> </ul> <p>Solution:</p> <pre><code># Check memory usage\nfree -h  # Linux\n# or use Activity Monitor on macOS\n\n# Limit agent memory\nexport MCP_MESH_MAX_MEMORY=512M\n\n# Check for memory leaks\npython -m tracemalloc agents/my_agent.py\n\n# Use memory profiler\npip install memory_profiler\npython -m memory_profiler agents/my_agent.py\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-8-debugging-not-working","title":"Issue 8: Debugging Not Working","text":"<p>Symptoms:</p> <ul> <li>Breakpoints ignored</li> <li>Can't attach debugger</li> <li>No debug output</li> </ul> <p>Solution:</p> <pre><code># Enable debug mode explicitly\nimport os\nos.environ['MCP_MESH_DEBUG_MODE'] = 'true'\nos.environ['MCP_MESH_LOG_LEVEL'] = 'DEBUG'\nos.environ['PYTHONBREAKPOINT'] = 'ipdb.set_trace'\n\n# For VS Code debugging\n{\n  \"justMyCode\": false,  // Debug into libraries\n  \"subProcess\": true    // Debug child processes\n}\n\n# Force sync logging\nimport sys\nsys.stdout = sys.__stdout__\nsys.stderr = sys.__stderr__\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-9-test-failures","title":"Issue 9: Test Failures","text":"<p>Symptoms:</p> <ul> <li>Tests pass individually but fail together</li> <li>Import errors in tests</li> <li>Async test timeouts</li> </ul> <p>Solution:</p> <pre><code># Run tests in isolation\npytest -k test_name -s\n\n# Clear test cache\npytest --cache-clear\n\n# Fix import paths\nexport PYTHONPATH=$PYTHONPATH:.\n\n# Increase async timeout\npytest --timeout=30\n\n# Run with more debugging\npytest -vvs --tb=short --log-cli-level=DEBUG\n</code></pre>"},{"location":"02-local-development/troubleshooting/#issue-10-agent-registration-issues","title":"Issue 10: Agent Registration Issues","text":"<p>Symptoms:</p> <ul> <li>Agent starts but doesn't appear in registry</li> <li>\"Failed to register with registry\"</li> </ul> <p>Solution:</p> <pre><code># Check agent registration status\n./bin/meshctl list agents\n\n# Check registry connectivity\ncurl http://localhost:8000/health\ncurl http://localhost:8000/agents\n\n# Enable debug logging\nexport MCP_MESH_DEBUG_MODE=true\n./bin/meshctl start examples/simple/my_agent.py\n\n# Verify agent metadata\nprint(f\"Registering as: {agent_name}\")\nprint(f\"Capabilities: {capabilities}\")\nprint(f\"Registry URL: {registry_url}\")\n</code></pre>"},{"location":"02-local-development/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"02-local-development/troubleshooting/#slow-startup","title":"Slow Startup","text":"<p>Solution:</p> <pre><code># Profile imports\npython -X importtime examples/simple/my_agent.py\n\n# Lazy load heavy imports\ndef get_pandas():\n    import pandas as pd\n    return pd\n\n# Precompile Python files\npython -m compileall examples/simple/\n</code></pre>"},{"location":"02-local-development/troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<p>Solution:</p> <pre><code># Profile CPU usage\npython -m cProfile -o profile.stats examples/simple/my_agent.py\npython -m pstats profile.stats\n\n# Use process monitoring\nhtop  # Linux/macOS\n# Filter by python processes\n</code></pre>"},{"location":"02-local-development/troubleshooting/#environment-specific-issues","title":"Environment-Specific Issues","text":""},{"location":"02-local-development/troubleshooting/#macos-issues","title":"macOS Issues","text":"<pre><code># Fix SSL certificate issues\npip install --upgrade certifi\n\n# Fix fork() issues\nexport OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n\n# Use homebrew Python\nbrew install python@3.11\n</code></pre>"},{"location":"02-local-development/troubleshooting/#windows-issues","title":"Windows Issues","text":"<pre><code># Use WSL2 for better compatibility\nwsl --install\n\n# Or use PowerShell with proper execution policy\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# Fix path length issues\ngit config --global core.longpaths true\n</code></pre>"},{"location":"02-local-development/troubleshooting/#linux-issues","title":"Linux Issues","text":"<pre><code># Fix permissions\nchmod +x .venv/bin/activate\nchmod 755 mcp-mesh-dev\n\n# Install system dependencies\nsudo apt-get update\nsudo apt-get install python3-dev build-essential\n</code></pre>"},{"location":"02-local-development/troubleshooting/#getting-more-help","title":"Getting More Help","text":"<p>If these solutions don't resolve your issue:</p> <ol> <li>Check Logs:</li> </ol> <pre><code>tail -f ~/.mcp-mesh/logs/mcp-mesh.log\ntail -f agent_debug.log\n</code></pre> <ol> <li>Enable Verbose Logging:</li> </ol> <pre><code>export MCP_MESH_LOG_LEVEL=DEBUG\nexport MCP_MESH_DEBUG_INJECTION=true\n</code></pre> <ol> <li> <p>Community Resources:</p> </li> <li> <p>GitHub Issues: https://github.com/dhyansraj/mcp-mesh/issues</p> </li> <li>Discord: MCP Community</li> <li> <p>Stack Overflow: Tag with <code>mcp-mesh</code></p> </li> <li> <p>Create Minimal Reproduction:</p> </li> </ol> <pre><code># minimal_repro.py\nfrom mesh import agent, tool\n\n@agent(name=\"minimal-test\")\nclass MinimalAgent:\n    pass\n\n@tool(capability=\"minimal\")\ndef test_function():\n    return \"If this fails, something is very wrong\"\n\nif __name__ == \"__main__\":\n    # Run with: ./bin/meshctl start minimal_repro.py\n    pass\n</code></pre> <p>\ud83d\udca1 Tip: Keep a <code>debug.log</code> file with solutions that worked for your specific setup</p> <p>\ud83d\udcda Reference: Python Debugging Guide</p> <p>\ud83d\udd0d Debug Mode: Set <code>MCP_MESH_LOG_LEVEL=DEBUG</code> for maximum visibility into issues</p>"},{"location":"03-docker-deployment/01-building-images/","title":"Building Docker Images","text":"<p>Create optimized, secure Docker images for your MCP Mesh agents</p>"},{"location":"03-docker-deployment/01-building-images/#overview","title":"Overview","text":"<p>Building proper Docker images is crucial for reliable agent deployment. This guide covers creating efficient Dockerfiles, optimizing image size, implementing security best practices, and building images that work seamlessly with MCP Mesh's service discovery.</p> <p>We'll explore both simple single-agent images and complex multi-stage builds, ensuring your agents are production-ready.</p>"},{"location":"03-docker-deployment/01-building-images/#key-concepts","title":"Key Concepts","text":"<ul> <li>Base Images: Choosing the right starting point (python:slim, alpine, distroless)</li> <li>Layer Caching: Optimizing build speed with proper layer ordering</li> <li>Multi-Stage Builds: Reducing image size by separating build and runtime</li> <li>Security: Running as non-root, scanning for vulnerabilities</li> <li>MCP Mesh Integration: Ensuring agents can register and communicate</li> </ul>"},{"location":"03-docker-deployment/01-building-images/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"03-docker-deployment/01-building-images/#step-1-basic-agent-dockerfile","title":"Step 1: Basic Agent Dockerfile","text":"<p>Create a simple Dockerfile for your agent:</p> <pre><code># Dockerfile\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies (if needed)\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install MCP Mesh from source\nCOPY . .\nRUN make install-dev\n\n# Agent code is already copied above\n\n# Create non-root user\nRUN useradd -m -u 1000 mcp &amp;&amp; \\\n    chown -R mcp:mcp /app\n\nUSER mcp\n\n# Expose agent port (if using HTTP)\nEXPOSE 8888\n\n# Set environment variables\nENV MCP_MESH_LOG_LEVEL=INFO\nENV PYTHONUNBUFFERED=1\n\n# Run the agent\nCMD [\"./bin/meshctl\", \"start\", \"examples/simple/my_agent.py\"]\n</code></pre> <p>Build and test:</p> <pre><code>docker build -t my-agent:latest .\ndocker run --rm my-agent:latest\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#step-2-multi-stage-build-for-optimization","title":"Step 2: Multi-Stage Build for Optimization","text":"<p>Reduce image size with multi-stage builds:</p> <pre><code># Dockerfile.multistage\n# Build stage\nFROM python:3.11 AS builder\n\nWORKDIR /build\n\n# Install build dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    git\n\n# Install MCP Mesh dependencies\nCOPY . .\nRUN make build &amp;&amp; make install-dev\n\n# Run any build steps (compile, minimize, etc.)\nRUN python -m compileall examples/\n\n# Runtime stage\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Copy built binaries and agent code\nCOPY --from=builder /build/bin ./bin\nCOPY --from=builder /build/examples ./examples\nCOPY --from=builder /build/src ./src\n\n# Make sure scripts in .local are usable\nENV PATH=/root/.local/bin:$PATH\n\n# Install runtime dependencies only\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create non-root user\nRUN useradd -m -u 1000 mcp &amp;&amp; \\\n    chown -R mcp:mcp /app\n\nUSER mcp\n\nEXPOSE 8888\n\nCMD [\"./bin/meshctl\", \"start\", \"examples/simple/my_agent.py\"]\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#step-3-mcp-mesh-specific-configuration","title":"Step 3: MCP Mesh Specific Configuration","text":"<p>Ensure your image works with MCP Mesh:</p> <pre><code># Dockerfile.mcp-mesh\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install MCP Mesh from source\nCOPY . .\nRUN make install-dev\n\n# Agent examples are already available\n\n# Create directories for MCP Mesh\nRUN mkdir -p /data /etc/mcp-mesh /var/log/mcp-mesh\n\n# Add health check script\nCOPY docker/healthcheck.py /usr/local/bin/\nRUN chmod +x /usr/local/bin/healthcheck.py\n\n# Configure health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=40s \\\n  CMD python /usr/local/bin/healthcheck.py || exit 1\n\n# Create non-root user\nRUN useradd -m -u 1000 mcp &amp;&amp; \\\n    chown -R mcp:mcp /app /data /etc/mcp-mesh /var/log/mcp-mesh\n\nUSER mcp\n\n# MCP Mesh environment variables\nENV MCP_MESH_REGISTRY_URL=http://registry:8000\nENV MCP_MESH_LOG_LEVEL=INFO\nENV PYTHONUNBUFFERED=1\n\nEXPOSE 8888\n\n# Use exec form for proper signal handling\nENTRYPOINT [\"./bin/meshctl\"]\nCMD [\"start\", \"examples/simple/my_agent.py\"]\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#step-4-build-arguments-and-flexibility","title":"Step 4: Build Arguments and Flexibility","text":"<p>Make images configurable with build arguments:</p> <pre><code># Dockerfile.flexible\nARG PYTHON_VERSION=3.11\nARG BASE_IMAGE=python:${PYTHON_VERSION}-slim\n\nFROM ${BASE_IMAGE}\n\n# Build arguments\nARG AGENT_NAME=my-agent\nARG AGENT_PORT=8888\nARG BUILD_DATE\nARG VCS_REF\n\n# Labels for metadata\nLABEL org.opencontainers.image.title=\"MCP Mesh Agent: ${AGENT_NAME}\" \\\n      org.opencontainers.image.created=\"${BUILD_DATE}\" \\\n      org.opencontainers.image.revision=\"${VCS_REF}\" \\\n      org.opencontainers.image.version=\"1.0.0\"\n\nWORKDIR /app\n\n# Dynamic configuration based on build args\nENV AGENT_NAME=${AGENT_NAME}\nENV AGENT_PORT=${AGENT_PORT}\n\n# Rest of Dockerfile...\nEXPOSE ${AGENT_PORT}\n</code></pre> <p>Build with arguments:</p> <pre><code>docker build \\\n  --build-arg AGENT_NAME=weather-agent \\\n  --build-arg AGENT_PORT=9000 \\\n  --build-arg BUILD_DATE=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\") \\\n  --build-arg VCS_REF=$(git rev-parse HEAD) \\\n  -t weather-agent:latest .\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#configuration-options","title":"Configuration Options","text":"Build Arg Description Default Example <code>PYTHON_VERSION</code> Python version to use 3.11 3.10, 3.12 <code>AGENT_NAME</code> Name for the agent agent weather-agent <code>AGENT_PORT</code> Port to expose 8888 9000 <code>BASE_IMAGE</code> Base image to use python:3.11-slim python:3.11-alpine <code>PIP_INDEX_URL</code> Custom pip repository - https://pypi.company.com"},{"location":"03-docker-deployment/01-building-images/#examples","title":"Examples","text":""},{"location":"03-docker-deployment/01-building-images/#example-1-production-ready-image","title":"Example 1: Production-Ready Image","text":"<pre><code># Dockerfile.production\nFROM python:3.11-slim AS builder\n\nWORKDIR /build\n\n# Install build dependencies\nCOPY requirements.txt .\nRUN pip wheel --no-cache-dir --no-deps --wheel-dir /build/wheels -r requirements.txt\n\nFROM gcr.io/distroless/python3-debian11\n\nWORKDIR /app\n\n# Copy wheels and install\nCOPY --from=builder /build/wheels /wheels\nCOPY requirements.txt .\nRUN python -m pip install --no-cache /wheels/*\n\n# Copy application\nCOPY --chown=nonroot:nonroot agents/ ./agents/\n\n# Use distroless nonroot user\nUSER nonroot\n\nEXPOSE 8888\n\nENTRYPOINT [\"./bin/meshctl\", \"start\"]\nCMD [\"examples/simple/production_agent.py\"]\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#example-2-development-image-with-tools","title":"Example 2: Development Image with Tools","text":"<pre><code># Dockerfile.dev\nFROM python:3.11\n\nWORKDIR /app\n\n# Install development tools\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    vim \\\n    htop \\\n    net-tools \\\n    iputils-ping \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install MCP Mesh in development mode\nCOPY . .\nRUN make install-dev\n\n# Development tools are included in make install-dev\n\n# Everything is already copied above\n\n# Keep container running for debugging\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#best-practices","title":"Best Practices","text":"<ol> <li>Order Layers by Change Frequency: Put rarely-changing items first</li> <li>Minimize Layer Count: Combine RUN commands with &amp;&amp;</li> <li>Clean Up in Same Layer: Remove temp files in the same RUN command</li> <li>Use .dockerignore: Exclude unnecessary files from build context</li> <li>Pin Versions: Specify exact versions for reproducibility</li> </ol>"},{"location":"03-docker-deployment/01-building-images/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"03-docker-deployment/01-building-images/#pitfall-1-large-image-size","title":"Pitfall 1: Large Image Size","text":"<p>Problem: Image is several GB due to build tools and caches</p> <p>Solution: Use multi-stage builds and clean up:</p> <pre><code># Bad\nRUN apt-get update\nRUN apt-get install build-essential\nRUN pip install numpy\n\n# Good\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends build-essential &amp;&amp; \\\n    pip install --no-cache-dir numpy &amp;&amp; \\\n    apt-get purge -y build-essential &amp;&amp; \\\n    apt-get autoremove -y &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#pitfall-2-secrets-in-image","title":"Pitfall 2: Secrets in Image","text":"<p>Problem: API keys or passwords baked into image</p> <p>Solution: Use environment variables or secrets management:</p> <pre><code># Bad\nENV API_KEY=secret123\n\n# Good\n# Pass at runtime: docker run -e API_KEY=$API_KEY\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#testing","title":"Testing","text":""},{"location":"03-docker-deployment/01-building-images/#unit-test-example","title":"Unit Test Example","text":"<pre><code># test_docker_build.sh\n#!/bin/bash\n\n# Test build succeeds\ndocker build -t test-agent:latest . || exit 1\n\n# Test CLI works\ndocker run --rm test-agent:latest ./bin/meshctl --version || exit 1\n\n# Test as non-root\ndocker run --rm test-agent:latest whoami | grep -q \"mcp\" || exit 1\n\n# Test health check\ndocker run -d --name test-health test-agent:latest\nsleep 5\ndocker inspect test-health --format='{% raw %}{{.State.Health.Status}}{% endraw %}' | grep -q \"healthy\" || exit 1\ndocker rm -f test-health\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/test_docker_agent.py\nimport docker\nimport requests\nimport time\n\ndef test_agent_in_docker():\n    client = docker.from_env()\n\n    # Run agent container\n    container = client.containers.run(\n        \"my-agent:latest\",\n        detach=True,\n        ports={'8888/tcp': 8888},\n        environment={'MCP_MESH_LOG_LEVEL': 'DEBUG'}\n    )\n\n    try:\n        # Wait for startup\n        time.sleep(5)\n\n        # Test health endpoint\n        response = requests.get('http://localhost:8888/health')\n        assert response.status_code == 200\n\n    finally:\n        container.stop()\n        container.remove()\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"03-docker-deployment/01-building-images/#build-performance","title":"Build Performance","text":"<pre><code># Enable BuildKit for better output\nDOCKER_BUILDKIT=1 docker build .\n\n# Analyze build cache usage\ndocker system df\n\n# Show build history\ndocker history my-agent:latest\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#image-analysis","title":"Image Analysis","text":"<pre><code># Check image size and layers\ndocker images my-agent:latest\ndocker inspect my-agent:latest | jq '.[0].RootFS.Layers | length'\n\n# Security scanning\ndocker scan my-agent:latest\n\n# Explore image contents\ndocker run --rm -it my-agent:latest sh\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"03-docker-deployment/01-building-images/#issue-1-build-fails-with-permission-denied","title":"Issue 1: Build Fails with Permission Denied","text":"<p>Symptoms: Cannot create directories or write files</p> <p>Cause: Running as root then switching users</p> <p>Solution:</p> <pre><code># Create directories before switching user\nRUN mkdir -p /app /data &amp;&amp; \\\n    chown -R mcp:mcp /app /data\n\nUSER mcp\n</code></pre>"},{"location":"03-docker-deployment/01-building-images/#issue-2-agent-cant-connect-to-registry","title":"Issue 2: Agent Can't Connect to Registry","text":"<p>Symptoms: \"Connection refused\" to registry</p> <p>Cause: Using localhost in container</p> <p>Solution:</p> <pre><code># Use service name in Docker network\nENV MCP_MESH_REGISTRY_URL=http://registry:8000\n# Not: http://localhost:8000\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"03-docker-deployment/01-building-images/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Alpine Linux: Some Python packages require glibc, not musl</li> <li>Distroless: Limited debugging capabilities</li> <li>File Permissions: UID/GID mapping issues on some systems</li> <li>Signal Handling: PID 1 requires special handling</li> </ul>"},{"location":"03-docker-deployment/01-building-images/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add examples for GPU-enabled agents</li> <li> Document rootless container builds</li> <li> Add supply chain security (SBOM)</li> <li> Create CI/CD pipeline examples</li> <li> Add image signing documentation</li> </ul>"},{"location":"03-docker-deployment/01-building-images/#summary","title":"Summary","text":"<p>You can now build optimized Docker images for MCP Mesh agents with:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Efficient Dockerfiles with proper layering</li> <li>\ud83d\udd11 Security best practices with non-root users</li> <li>\ud83d\udd11 Multi-stage builds for minimal image size</li> <li>\ud83d\udd11 MCP Mesh specific configuration and health checks</li> </ul>"},{"location":"03-docker-deployment/01-building-images/#next-steps","title":"Next Steps","text":"<p>Now let's orchestrate multiple agents with Docker Compose.</p> <p>Continue to Docker Compose Setup \u2192</p> <p>\ud83d\udca1 Tip: Use <code>dive</code> to analyze and optimize your Docker images: <code>dive my-agent:latest</code></p> <p>\ud83d\udcda Reference: Docker Best Practices</p> <p>\ud83e\uddea Try It: Build an image under 100MB using Alpine or distroless as the base</p>"},{"location":"03-docker-deployment/02-compose-setup/","title":"Docker Compose Setup","text":"<p>Orchestrate multi-agent MCP Mesh systems with Docker Compose for development and testing</p>"},{"location":"03-docker-deployment/02-compose-setup/#overview","title":"Overview","text":"<p>Docker Compose simplifies running multi-container MCP Mesh deployments by defining your entire agent network in a single YAML file. This guide covers creating Compose configurations, managing service dependencies, handling networking, and implementing best practices for local development and testing.</p> <p>With Docker Compose, you can spin up a complete MCP Mesh environment with a single command, making it perfect for development, testing, and demos.</p>"},{"location":"03-docker-deployment/02-compose-setup/#key-concepts","title":"Key Concepts","text":"<ul> <li>Service Definitions: Each agent and supporting service as a Compose service</li> <li>Dependency Management: Ensuring services start in the correct order</li> <li>Network Configuration: Containers communicating within a shared network</li> <li>Volume Management: Persistent data and configuration sharing</li> <li>Environment Configuration: Managing settings across services</li> </ul>"},{"location":"03-docker-deployment/02-compose-setup/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"03-docker-deployment/02-compose-setup/#step-1-basic-compose-configuration","title":"Step 1: Basic Compose Configuration","text":"<p>Create a <code>docker-compose.yml</code> file:</p> <pre><code>version: \"3.8\"\n\nservices:\n  # PostgreSQL database for registry\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: mcp_mesh\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  # MCP Mesh Registry\n  registry:\n    build:\n      context: .\n      dockerfile: docker/registry/Dockerfile\n    ports:\n      - \"8000:8000\"\n    environment:\n      MCP_MESH_DB_TYPE: postgresql\n      MCP_MESH_DB_HOST: postgres\n      MCP_MESH_DB_PORT: 5432\n      MCP_MESH_DB_NAME: mcp_mesh\n      MCP_MESH_DB_USER: postgres\n      MCP_MESH_DB_PASSWORD: postgres\n      MCP_MESH_LOG_LEVEL: INFO\n    depends_on:\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 3s\n      retries: 3\n\n  # System Agent\n  system-agent:\n    build:\n      context: .\n      dockerfile: docker/agent/Dockerfile\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n      MCP_MESH_LOG_LEVEL: INFO\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/system_agent.py\"]\n    depends_on:\n      registry:\n        condition: service_healthy\n    restart: unless-stopped\n\n  # Weather Agent (depends on System Agent)\n  weather-agent:\n    build:\n      context: .\n      dockerfile: docker/agent/Dockerfile\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n      MCP_MESH_LOG_LEVEL: INFO\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/weather_agent.py\"]\n    depends_on:\n      registry:\n        condition: service_healthy\n      system-agent:\n        condition: service_started\n    ports:\n      - \"8888:8888\"\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  default:\n    name: mcp-mesh-net\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#step-2-development-compose-with-hot-reload","title":"Step 2: Development Compose with Hot Reload","text":"<p>Create <code>docker-compose.dev.yml</code> for development:</p> <pre><code>version: \"3.8\"\n\nservices:\n  # Override registry for development\n  registry:\n    environment:\n      MCP_MESH_LOG_LEVEL: DEBUG\n    volumes:\n      - ./data/registry:/data\n      - ./logs/registry:/var/log/mcp-mesh\n\n  # Development agent with code mounting\n  dev-agent:\n    build:\n      context: .\n      dockerfile: docker/agent/Dockerfile.dev\n    volumes:\n      # Mount source code for hot reload\n      - ./examples:/app/examples:ro\n      - ./src:/app/src:ro\n      - ./logs/agents:/var/log/mcp-mesh\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n      MCP_MESH_LOG_LEVEL: DEBUG\n      MCP_MESH_ENABLE_HOT_RELOAD: \"true\"\n      PYTHONDONTWRITEBYTECODE: 1\n      PYTHONUNBUFFERED: 1\n    depends_on:\n      registry:\n        condition: service_healthy\n    ports:\n      - \"8889:8888\"\n      - \"5678:5678\" # Debugger port\n    command:\n      [\n        \"python\",\n        \"-m\",\n        \"debugpy\",\n        \"--listen\",\n        \"0.0.0.0:5678\",\n        \"--wait-for-client\",\n        \"./bin/meshctl\",\n        \"start\",\n        \"examples/simple/my_agent.py\",\n      ]\n</code></pre> <p>Run with override:</p> <pre><code>docker-compose -f docker-compose.yml -f docker-compose.dev.yml up\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#step-3-environment-specific-configuration","title":"Step 3: Environment-Specific Configuration","text":"<p>Create <code>.env</code> file for environment variables:</p> <pre><code># .env\nCOMPOSE_PROJECT_NAME=mcp-mesh\nPOSTGRES_PASSWORD=secure_password\nMCP_MESH_VERSION=0.2\nREGISTRY_PORT=8000\nLOG_LEVEL=INFO\n</code></pre> <p>Reference in compose file:</p> <pre><code>version: \"3.8\"\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}\n\n  registry:\n    image: mcp-mesh/registry:${MCP_MESH_VERSION:-0.3}\n    ports:\n      - \"${REGISTRY_PORT:-8000}:8000\"\n    environment:\n      MCP_MESH_LOG_LEVEL: ${LOG_LEVEL:-INFO}\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#step-4-advanced-networking-configuration","title":"Step 4: Advanced Networking Configuration","text":"<p>Configure custom networks for isolation:</p> <pre><code>version: \"3.8\"\n\nservices:\n  registry:\n    networks:\n      - mesh-internal\n      - mesh-public\n\n  agent-internal:\n    networks:\n      - mesh-internal\n\n  agent-public:\n    networks:\n      - mesh-internal\n      - mesh-public\n    ports:\n      - \"8888:8888\"\n\nnetworks:\n  mesh-internal:\n    driver: bridge\n    internal: true # No external access\n  mesh-public:\n    driver: bridge\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#configuration-options","title":"Configuration Options","text":"Environment Variable Description Default Example <code>COMPOSE_PROJECT_NAME</code> Project namespace directory name mcp-mesh <code>COMPOSE_FILE</code> Compose files to use docker-compose.yml docker-compose.yml:docker-compose.dev.yml <code>COMPOSE_PROFILES</code> Active profiles - dev,debug <code>DOCKER_HOST</code> Docker daemon socket unix:///var/run/docker.sock tcp://remote:2375 <code>COMPOSE_PARALLEL_LIMIT</code> Parallel operations 64 10"},{"location":"03-docker-deployment/02-compose-setup/#examples","title":"Examples","text":""},{"location":"03-docker-deployment/02-compose-setup/#example-1-production-like-setup","title":"Example 1: Production-Like Setup","text":"<pre><code># docker-compose.prod.yml\nversion: \"3.8\"\n\nx-common-variables: &amp;common-variables\n  MCP_MESH_LOG_LEVEL: INFO\n  MCP_MESH_METRICS_ENABLED: \"true\"\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: mcp_mesh\n      POSTGRES_USER: mcp_user\n      POSTGRES_PASSWORD_FILE: /run/secrets/db_password\n    secrets:\n      - db_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n        reservations:\n          memory: 256M\n\n  registry:\n    image: mcp-mesh/registry:${VERSION:-0.3}\n    environment:\n      &lt;&lt;: *common-variables\n      MCP_MESH_DB_PASSWORD_FILE: /run/secrets/db_password\n    secrets:\n      - db_password\n    deploy:\n      replicas: 2\n      restart_policy:\n        condition: any\n        delay: 5s\n        max_attempts: 3\n\n  nginx:\n    image: nginx:alpine\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    depends_on:\n      - registry\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n\nvolumes:\n  postgres_data:\n    driver: local\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#example-2-testing-environment","title":"Example 2: Testing Environment","text":"<pre><code># docker-compose.test.yml\nversion: \"3.8\"\n\nservices:\n  # Test database (ephemeral)\n  test-db:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: test_mesh\n      POSTGRES_USER: test\n      POSTGRES_PASSWORD: test\n    tmpfs:\n      - /var/lib/postgresql/data\n\n  # Test agents\n  test-agent-1:\n    build:\n      context: .\n      dockerfile: docker/agent/Dockerfile\n      args:\n        RUN_TESTS: \"true\"\n    environment:\n      MCP_MESH_REGISTRY_URL: http://test-registry:8000\n      TEST_MODE: \"true\"\n    depends_on:\n      - test-registry\n    command: [\"pytest\", \"-v\", \"/app/tests/\"]\n    entrypoint: [\"./bin/meshctl\", \"start\", \"examples/simple/test_agent.py\"]\n\n  # Integration test runner\n  test-runner:\n    build:\n      context: .\n      dockerfile: docker/test/Dockerfile\n    volumes:\n      - ./tests:/tests\n      - ./test-results:/results\n    depends_on:\n      - test-agent-1\n      - test-agent-2\n    command:\n      [\"pytest\", \"-v\", \"--junit-xml=/results/junit.xml\", \"/tests/integration/\"]\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Use Health Checks: Ensure services are ready before dependents start</li> <li>Named Volumes: Use named volumes for data persistence</li> <li>Resource Limits: Set memory and CPU limits for stability</li> <li>Secret Management: Use Docker secrets or external files</li> <li>Profile Organization: Separate concerns with multiple compose files</li> </ol>"},{"location":"03-docker-deployment/02-compose-setup/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"03-docker-deployment/02-compose-setup/#pitfall-1-service-start-order-issues","title":"Pitfall 1: Service Start Order Issues","text":"<p>Problem: Agents fail because registry isn't ready</p> <p>Solution: Use proper health checks and depends_on:</p> <pre><code>depends_on:\n  registry:\n    condition: service_healthy # Wait for health check\n  # not just:\n  # - registry  # Only waits for container start\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#pitfall-2-network-isolation-problems","title":"Pitfall 2: Network Isolation Problems","text":"<p>Problem: Containers can't communicate</p> <p>Solution: Ensure services are on the same network:</p> <pre><code>services:\n  agent1:\n    networks:\n      - mesh-net\n  agent2:\n    networks:\n      - mesh-net # Same network\n\nnetworks:\n  mesh-net:\n    driver: bridge\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#testing","title":"Testing","text":""},{"location":"03-docker-deployment/02-compose-setup/#unit-test-example","title":"Unit Test Example","text":"<pre><code># test_compose_config.sh\n#!/bin/bash\n\n# Validate compose file\ndocker-compose config --quiet || exit 1\n\n# Test service dependencies\ndocker-compose config | grep -q \"depends_on\" || exit 1\n\n# Check all images build\ndocker-compose build --parallel || exit 1\n\n# Verify no port conflicts\ndocker-compose ps --services | while read service; do\n  docker-compose port $service 8080 2&gt;/dev/null &amp;&amp; echo \"Port conflict on $service\"\ndone\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/test_compose_integration.py\nimport subprocess\nimport time\nimport requests\n\ndef test_compose_stack():\n    \"\"\"Test full stack starts correctly\"\"\"\n    # Start stack\n    subprocess.run([\"docker-compose\", \"up\", \"-d\"], check=True)\n\n    try:\n        # Wait for services\n        time.sleep(30)\n\n        # Check registry\n        response = requests.get(\"http://localhost:8000/health\")\n        assert response.status_code == 200\n\n        # Check agents registered\n        agents = requests.get(\"http://localhost:8000/agents\").json()\n        assert len(agents) &gt;= 2\n\n    finally:\n        # Cleanup\n        subprocess.run([\"docker-compose\", \"down\", \"-v\"])\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"03-docker-deployment/02-compose-setup/#compose-commands-for-debugging","title":"Compose Commands for Debugging","text":"<pre><code># View service logs\ndocker-compose logs -f registry\n\n# Check service status\ndocker-compose ps\n\n# Execute commands in running container\ndocker-compose exec registry sh\n\n# View resource usage\ndocker stats $(docker-compose ps -q)\n\n# Inspect network\ndocker network inspect mcp-mesh-net\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#debugging-service-issues","title":"Debugging Service Issues","text":"<pre><code># Check why service won't start\ndocker-compose up registry  # Run in foreground\n\n# View detailed events\ndocker-compose events --json\n\n# Force recreate services\ndocker-compose up -d --force-recreate --no-deps registry\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"03-docker-deployment/02-compose-setup/#issue-1-cannot-create-container-for-service","title":"Issue 1: \"Cannot create container for service\"","text":"<p>Symptoms: Container name conflicts</p> <p>Cause: Old containers still exist</p> <p>Solution:</p> <pre><code># Remove old containers\ndocker-compose down\n\n# Or with cleanup\ndocker-compose down -v --remove-orphans\n</code></pre>"},{"location":"03-docker-deployment/02-compose-setup/#issue-2-environment-variables-not-working","title":"Issue 2: Environment Variables Not Working","text":"<p>Symptoms: Services using default values</p> <p>Cause: Variable expansion issues</p> <p>Solution:</p> <pre><code># Debug variable expansion\ndocker-compose config\n\n# Ensure .env file is in same directory\nls -la .env\n\n# Export variables explicitly\nexport MCP_MESH_LOG_LEVEL=DEBUG\ndocker-compose up\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"03-docker-deployment/02-compose-setup/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Compose Version: v3.8 features require Docker 19.03+</li> <li>Swarm Mode: Some features only work in Swarm mode</li> <li>Resource Limits: Not enforced on all platforms</li> <li>GPU Support: Limited in Compose, use docker run</li> </ul>"},{"location":"03-docker-deployment/02-compose-setup/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Docker Swarm configuration examples</li> <li> Create compose file generator tool</li> <li> Add monitoring stack (Prometheus/Grafana)</li> <li> Document compose secrets rotation</li> <li> Add blue-green deployment example</li> </ul>"},{"location":"03-docker-deployment/02-compose-setup/#summary","title":"Summary","text":"<p>You can now orchestrate complex MCP Mesh deployments with Docker Compose:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Complete service definitions with health checks</li> <li>\ud83d\udd11 Proper dependency management between services</li> <li>\ud83d\udd11 Development and production configurations</li> <li>\ud83d\udd11 Network isolation and security practices</li> </ul>"},{"location":"03-docker-deployment/02-compose-setup/#next-steps","title":"Next Steps","text":"<p>Let's explore running multiple agents in a coordinated deployment.</p> <p>Continue to Multi-Agent Deployment \u2192</p> <p>\ud83d\udca1 Tip: Use <code>docker-compose config</code> to validate and view the final configuration after variable substitution</p> <p>\ud83d\udcda Reference: Docker Compose Documentation</p> <p>\ud83e\uddea Try It: Create a compose file that scales the weather agent to 3 instances behind a load balancer</p>"},{"location":"03-docker-deployment/03-multi-agent/","title":"Multi-Agent Deployment","text":"<p>Deploy and manage complex networks of interdependent MCP Mesh agents with Docker</p>"},{"location":"03-docker-deployment/03-multi-agent/#overview","title":"Overview","text":"<p>Real-world MCP Mesh deployments often involve multiple agents working together - some providing core services, others consuming them, and many doing both. This guide covers deploying multi-agent systems, managing inter-agent dependencies, implementing service patterns, and ensuring reliable operation at scale.</p> <p>We'll explore patterns for agent organization, dependency management, load balancing, and failure handling in multi-agent deployments.</p>"},{"location":"03-docker-deployment/03-multi-agent/#key-concepts","title":"Key Concepts","text":"<ul> <li>Agent Topology: Organizing agents into logical groups and tiers</li> <li>Service Dependencies: Managing complex dependency chains</li> <li>Load Distribution: Running multiple instances of the same agent</li> <li>Failure Isolation: Preventing cascading failures</li> <li>Service Mesh Patterns: Circuit breakers, retries, and timeouts</li> </ul>"},{"location":"03-docker-deployment/03-multi-agent/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"03-docker-deployment/03-multi-agent/#step-1-design-your-agent-architecture","title":"Step 1: Design Your Agent Architecture","text":"<p>Define agent relationships and dependencies:</p> <pre><code># architecture.yml - Document your agent topology\nagents:\n  core_services:\n    - name: auth-agent\n      provides: [\"authentication\", \"authorization\"]\n      depends_on: []\n\n    - name: database-agent\n      provides: [\"data_storage\", \"data_query\"]\n      depends_on: [\"auth-agent\"]\n\n  business_services:\n    - name: user-agent\n      provides: [\"user_management\"]\n      depends_on: [\"auth-agent\", \"database-agent\"]\n\n    - name: order-agent\n      provides: [\"order_processing\"]\n      depends_on: [\"user-agent\", \"inventory-agent\", \"payment-agent\"]\n\n  support_services:\n    - name: notification-agent\n      provides: [\"email\", \"sms\", \"push\"]\n      depends_on: [\"auth-agent\"]\n\n    - name: analytics-agent\n      provides: [\"metrics\", \"reporting\"]\n      depends_on: [\"database-agent\"]\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#step-2-implement-multi-agent-docker-compose","title":"Step 2: Implement Multi-Agent Docker Compose","text":"<p>Create a comprehensive deployment:</p> <pre><code># docker-compose.multi-agent.yml\nversion: '3.8'\n\nx-common-agent: &amp;common-agent\n  image: mcp-mesh/agent:latest\n  restart: unless-stopped\n  environment:\n    MCP_MESH_REGISTRY_URL: http://registry:8000\n    MCP_MESH_LOG_LEVEL: ${LOG_LEVEL:-INFO}\n  depends_on:\n    registry:\n      condition: service_healthy\n\nservices:\n  # Infrastructure\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_MULTIPLE_DATABASES: mcp_mesh,auth_db,business_db\n    volumes:\n      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-databases.sh\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis_data:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n\n  registry:\n    image: mcp-mesh/registry:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      MCP_MESH_DB_TYPE: postgresql\n      MCP_MESH_DB_HOST: postgres\n      MCP_MESH_DB_NAME: mcp_mesh\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n  # Core Services Layer\n  auth-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/auth_agent.py\"]\n      DB_HOST: postgres\n      DB_NAME: auth_db\n      REDIS_HOST: redis\n    deploy:\n      replicas: 2\n\n  database-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/database_agent.py\"]\n      DB_HOST: postgres\n      DB_NAME: business_db\n      CACHE_HOST: redis\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n      auth-agent:\n        condition: service_started\n\n  # Business Services Layer\n  user-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/user_agent.py\"]\n    depends_on:\n      auth-agent:\n        condition: service_started\n      database-agent:\n        condition: service_started\n    deploy:\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n\n  order-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/order_agent.py\"]\n      ORDER_PROCESSING_TIMEOUT: 30\n    depends_on:\n      user-agent:\n        condition: service_started\n      inventory-agent:\n        condition: service_started\n      payment-agent:\n        condition: service_started\n\n  inventory-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/inventory_agent.py\"]\n    depends_on:\n      database-agent:\n        condition: service_started\n\n  payment-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/payment_agent.py\"]\n      PAYMENT_GATEWAY_URL: ${PAYMENT_GATEWAY_URL}\n    secrets:\n      - payment_api_key\n\n  # Support Services Layer\n  notification-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/notification_agent.py\"]\n      SMTP_HOST: ${SMTP_HOST}\n      SMS_PROVIDER_URL: ${SMS_PROVIDER_URL}\n    depends_on:\n      auth-agent:\n        condition: service_started\n\n  analytics-agent:\n    &lt;&lt;: *common-agent\n    environment:\n      &lt;&lt;: *common-agent.environment\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/analytics_agent.py\"]\n      BATCH_SIZE: 1000\n      PROCESSING_INTERVAL: 60\n    depends_on:\n      database-agent:\n        condition: service_started\n\n  # Load Balancer\n  nginx:\n    image: nginx:alpine\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/conf.d:/etc/nginx/conf.d:ro\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    depends_on:\n      - user-agent\n      - order-agent\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nsecrets:\n  payment_api_key:\n    external: true\n\nnetworks:\n  default:\n    name: mesh-network\n    driver: bridge\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#step-3-implement-agent-startup-orchestration","title":"Step 3: Implement Agent Startup Orchestration","text":"<p>Create startup script for ordered initialization:</p> <pre><code>#!/bin/bash\n# scripts/start-multi-agent.sh\n\necho \"Starting MCP Mesh Multi-Agent System...\"\n\n# Start infrastructure\necho \"Starting infrastructure services...\"\ndocker-compose up -d postgres redis\nsleep 10\n\n# Start registry\necho \"Starting registry...\"\ndocker-compose up -d registry\nuntil curl -s http://localhost:8000/health &gt; /dev/null; do\n  echo \"Waiting for registry...\"\n  sleep 2\ndone\n\n# Start core services\necho \"Starting core services...\"\ndocker-compose up -d auth-agent database-agent\nsleep 5\n\n# Start business services\necho \"Starting business services...\"\ndocker-compose up -d user-agent inventory-agent payment-agent\nsleep 5\n\n# Start dependent business services\necho \"Starting dependent services...\"\ndocker-compose up -d order-agent\n\n# Start support services\necho \"Starting support services...\"\ndocker-compose up -d notification-agent analytics-agent\n\n# Start load balancer\necho \"Starting load balancer...\"\ndocker-compose up -d nginx\n\necho \"Multi-agent system started successfully!\"\ndocker-compose ps\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#step-4-implement-service-patterns","title":"Step 4: Implement Service Patterns","text":"<p>Add resilience patterns to agents:</p> <pre><code># agents/business/order_agent.py\nimport mesh\nimport asyncio\nfrom typing import Optional\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass CircuitBreaker:\n    def __init__(self, failure_threshold=5, timeout=60):\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.failures = 0\n        self.last_failure_time = None\n        self.is_open = False\n\n@mesh.agent(name=\"order-processor\")\nclass OrderProcessor:\n    pass\n\n@mesh.tool(\n    capability=\"order_processing\",\n    dependencies=[\n        \"user_get\",\n        \"inventory_check_stock\",\n        \"inventory_reserve_items\",\n        \"payment_process\",\n        \"notification_send_email\"\n    ]\n)\nasync def process_order(\n    order_data: dict,\n    user_get=None,\n    inventory_check_stock=None,\n    inventory_reserve_items=None,\n    payment_process=None,\n    notification_send_email=None\n):\n    \"\"\"Process order with circuit breaker and retry logic\"\"\"\n\n    order_id = order_data.get(\"order_id\")\n    logger.info(f\"Processing order {order_id}\")\n\n    try:\n        # Step 1: Validate user\n        user = await retry_with_backoff(\n            lambda: user_get(order_data[\"user_id\"]),\n            max_retries=3,\n            service_name=\"user_get\"\n        )\n\n        if not user:\n            raise ValueError(\"User not found\")\n\n        # Step 2: Check inventory (with circuit breaker)\n        if not await check_with_circuit_breaker(\n            lambda: inventory_check_stock(order_data[\"items\"]),\n            \"inventory_check_stock\"\n        ):\n            return {\"error\": \"Insufficient stock\"}\n\n        # Step 3: Reserve items\n        reservation = await inventory_reserve_items(\n            order_data[\"items\"],\n            timeout=30  # 30 second timeout\n        )\n\n        try:\n            # Step 4: Process payment\n            payment_result = await payment_process({\n                \"user_id\": user[\"id\"],\n                \"amount\": order_data[\"total\"],\n                \"order_id\": order_id\n            })\n\n            if payment_result[\"status\"] != \"success\":\n                raise Exception(\"Payment failed\")\n\n            # Step 5: Send confirmation (non-critical)\n            try:\n                await notification_send_email({\n                    \"to\": user[\"email\"],\n                    \"subject\": f\"Order {order_id} Confirmed\",\n                    \"body\": \"Your order has been processed successfully.\"\n                })\n            except Exception as e:\n                logger.warning(f\"Failed to send email: {e}\")\n                # Continue - email failure shouldn't fail the order\n\n            return {\n                \"status\": \"completed\",\n                \"order_id\": order_id,\n                \"payment_id\": payment_result[\"payment_id\"]\n            }\n\n        except Exception as e:\n            # Rollback inventory reservation\n            if 'inventory_release_reservation' in locals():\n                await inventory_release_reservation(reservation[\"id\"])\n            raise\n\n    except Exception as e:\n        logger.error(f\"Order {order_id} failed: {e}\")\n        return {\n            \"status\": \"failed\",\n            \"order_id\": order_id,\n            \"error\": str(e)\n        }\n\nasync def retry_with_backoff(func, max_retries=3, service_name=\"\"):\n    \"\"\"Retry with exponential backoff\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return await func()\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            wait_time = (2 ** attempt) + random.uniform(0, 1)\n            logger.warning(f\"Retry {attempt + 1} for {service_name} after {wait_time}s\")\n            await asyncio.sleep(wait_time)\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>AGENT_STARTUP_DELAY</code> Delay between agent starts 5s 10s <code>MAX_REPLICAS</code> Maximum agent replicas 5 10 <code>HEALTH_CHECK_INTERVAL</code> Health check frequency 30s 60s <code>DEPENDENCY_TIMEOUT</code> Timeout for dependencies 30s 60s <code>CIRCUIT_BREAKER_THRESHOLD</code> Failures before open 5 10"},{"location":"03-docker-deployment/03-multi-agent/#examples","title":"Examples","text":""},{"location":"03-docker-deployment/03-multi-agent/#example-1-microservices-pattern","title":"Example 1: Microservices Pattern","text":"<pre><code># docker-compose.microservices.yml\nversion: \"3.8\"\n\nservices:\n  # API Gateway\n  api-gateway:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/api_gateway.py\"]\n    environment:\n      RATE_LIMIT: 1000\n    ports:\n      - \"8000:8000\"\n    deploy:\n      replicas: 2\n\n  # Microservices\n  product-service:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/product_service.py\"]\n    deploy:\n      replicas: 3\n      labels:\n        - \"traefik.enable=true\"\n        - \"traefik.http.services.products.loadbalancer.server.port=8080\"\n\n  cart-service:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/cart_service.py\"]\n    environment:\n      REDIS_HOST: redis\n    deploy:\n      replicas: 2\n\n  recommendation-service:\n    image: mcp-mesh/agent:latest\n    command:\n      [\"./bin/meshctl\", \"start\", \"examples/simple/recommendation_service.py\"]\n    environment:\n      ML_MODEL_PATH: /models/recommendation.pkl\n    volumes:\n      - ./models:/models:ro\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#example-2-event-driven-architecture","title":"Example 2: Event-Driven Architecture","text":"<pre><code># docker-compose.event-driven.yml\nversion: \"3.8\"\n\nservices:\n  # Event Bus\n  rabbitmq:\n    image: rabbitmq:3-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    volumes:\n      - rabbitmq_data:/var/lib/rabbitmq\n\n  # Event Producers\n  order-creator:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/order_creator.py\"]\n    environment:\n      RABBITMQ_URL: amqp://rabbitmq:5672\n      PUBLISH_TO: orders.created\n\n  # Event Processors\n  order-processor:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/order_processor.py\"]\n    environment:\n      RABBITMQ_URL: amqp://rabbitmq:5672\n      SUBSCRIBE_TO: orders.created\n      PUBLISH_TO: orders.processed\n    deploy:\n      replicas: 5\n\n  # Event Consumers\n  email-sender:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/email_sender.py\"]\n    environment:\n      RABBITMQ_URL: amqp://rabbitmq:5672\n      SUBSCRIBE_TO: orders.processed,orders.shipped\n\nvolumes:\n  rabbitmq_data:\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#best-practices","title":"Best Practices","text":"<ol> <li>Layer Your Services: Core \u2192 Business \u2192 Support services</li> <li>Implement Health Checks: Every agent should have health endpoints</li> <li>Use Graceful Shutdowns: Handle SIGTERM properly</li> <li>Monitor Dependencies: Track and alert on dependency failures</li> <li>Plan for Failure: Design for partial system availability</li> </ol>"},{"location":"03-docker-deployment/03-multi-agent/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"03-docker-deployment/03-multi-agent/#pitfall-1-circular-dependencies","title":"Pitfall 1: Circular Dependencies","text":"<p>Problem: Agent A depends on B, B depends on A</p> <p>Solution: Refactor to break circular dependencies:</p> <pre><code># Bad: Circular dependency\n@mesh.tool(dependencies=[\"service_b_func\"])\ndef service_a_func(service_b_func=None):\n    return service_b_func()\n\n# Good: Extract shared functionality\n@mesh.tool(dependencies=[\"shared_service_func\"])\ndef service_a_func(shared_service_func=None):\n    return shared_service_func()\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#pitfall-2-cascading-failures","title":"Pitfall 2: Cascading Failures","text":"<p>Problem: One service failure brings down entire system</p> <p>Solution: Implement circuit breakers and fallbacks:</p> <pre><code>@mesh.tool(\n    capability=\"resilient_service\",\n    dependencies=[\"critical_service_func\"]\n)\ndef resilient_service(critical_service_func=None):\n    if critical_service_func:\n        try:\n            return critical_service_func()\n        except Exception:\n            pass\n    return {\"status\": \"degraded\", \"data\": get_cached_data()}\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#testing","title":"Testing","text":""},{"location":"03-docker-deployment/03-multi-agent/#load-testing-multi-agent-systems","title":"Load Testing Multi-Agent Systems","text":"<pre><code># tests/load_test_multi_agent.py\nimport asyncio\nimport aiohttp\nimport time\n\nasync def test_order_processing_load():\n    \"\"\"Test system under load\"\"\"\n    async with aiohttp.ClientSession() as session:\n        tasks = []\n\n        # Create 1000 concurrent orders\n        for i in range(1000):\n            order = {\n                \"order_id\": f\"TEST-{i}\",\n                \"user_id\": f\"user-{i % 100}\",\n                \"items\": [{\"sku\": \"ITEM-1\", \"quantity\": 1}],\n                \"total\": 99.99\n            }\n\n            task = session.post(\n                \"http://localhost:8000/orders\",\n                json=order\n            )\n            tasks.append(task)\n\n        start = time.time()\n        responses = await asyncio.gather(*tasks)\n        duration = time.time() - start\n\n        success_count = sum(1 for r in responses if r.status == 200)\n\n        print(f\"Processed {success_count}/1000 orders in {duration:.2f}s\")\n        print(f\"Throughput: {success_count/duration:.2f} orders/second\")\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#chaos-testing","title":"Chaos Testing","text":"<pre><code>#!/bin/bash\n# chaos_test.sh - Test system resilience\n\necho \"Starting chaos test...\"\n\n# Kill random agent\nAGENTS=(user-agent order-agent inventory-agent)\nVICTIM=${AGENTS[$RANDOM % ${#AGENTS[@]}]}\necho \"Killing $VICTIM...\"\ndocker-compose kill $VICTIM\n\n# Wait and check system health\nsleep 10\ncurl -s http://localhost:8000/health\n\n# Restart agent\ndocker-compose up -d $VICTIM\n\n# Test gradual recovery\nfor i in {1..10}; do\n  echo \"Recovery check $i...\"\n  curl -s http://localhost:8000/orders/test | jq .\n  sleep 5\ndone\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"03-docker-deployment/03-multi-agent/#multi-agent-monitoring-stack","title":"Multi-Agent Monitoring Stack","text":"<pre><code># docker-compose.monitoring.yml\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - \"9090:9090\"\n\n  grafana:\n    image: grafana/grafana:latest\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards\n    ports:\n      - \"3000:3000\"\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}\n\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - \"16686:16686\"\n      - \"14268:14268\"\n    environment:\n      COLLECTOR_ZIPKIN_HOST_PORT: :9411\n\nvolumes:\n  prometheus_data:\n  grafana_data:\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#debug-commands","title":"Debug Commands","text":"<pre><code># View agent dependencies\ndocker-compose exec registry curl http://localhost:8000/agents | jq\n\n# Check agent health across all replicas\nfor i in {1..3}; do\n  docker-compose exec --index=$i user-agent curl http://localhost:8888/health\ndone\n\n# Trace request flow\ndocker-compose logs -f --tail=0 | grep \"order-123\"\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"03-docker-deployment/03-multi-agent/#issue-1-agents-cant-find-dependencies","title":"Issue 1: Agents Can't Find Dependencies","text":"<p>Symptoms: \"Dependency not found\" errors</p> <p>Cause: Race condition or network issues</p> <p>Solution:</p> <pre><code># Add retry logic to agents\nenvironment:\n  MCP_MESH_RETRY_ATTEMPTS: 10\n  MCP_MESH_RETRY_DELAY: 5\n  MCP_MESH_DISCOVERY_TIMEOUT: 30\n</code></pre>"},{"location":"03-docker-deployment/03-multi-agent/#issue-2-memoryresource-exhaustion","title":"Issue 2: Memory/Resource Exhaustion","text":"<p>Symptoms: Containers getting OOMKilled</p> <p>Cause: No resource limits set</p> <p>Solution:</p> <pre><code>deploy:\n  resources:\n    limits:\n      memory: 512M\n      cpus: \"0.5\"\n    reservations:\n      memory: 256M\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"03-docker-deployment/03-multi-agent/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Docker Compose Scaling: Limited compared to Kubernetes</li> <li>Service Discovery: Basic compared to service mesh solutions</li> <li>State Management: Challenging for stateful agents</li> <li>Network Latency: Container networking adds overhead</li> </ul>"},{"location":"03-docker-deployment/03-multi-agent/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add service mesh integration examples</li> <li> Create agent dependency visualizer</li> <li> Add canary deployment patterns</li> <li> Document state management strategies</li> <li> Add distributed tracing setup</li> </ul>"},{"location":"03-docker-deployment/03-multi-agent/#summary","title":"Summary","text":"<p>You can now deploy complex multi-agent MCP Mesh systems with:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Layered architecture for agent organization</li> <li>\ud83d\udd11 Resilience patterns for production reliability</li> <li>\ud83d\udd11 Load distribution and scaling strategies</li> <li>\ud83d\udd11 Comprehensive monitoring and debugging</li> </ul>"},{"location":"03-docker-deployment/03-multi-agent/#next-steps","title":"Next Steps","text":"<p>Let's explore networking and service discovery in containerized environments.</p> <p>Continue to Networking and Service Discovery \u2192</p> <p>\ud83d\udca1 Tip: Use <code>docker-compose logs -f --tail=100 | grep ERROR</code> to monitor all agents for errors in real-time</p> <p>\ud83d\udcda Reference: Microservices Patterns</p> <p>\ud83e\uddea Try It: Deploy a 10-agent system with complex dependencies and test failure scenarios</p>"},{"location":"03-docker-deployment/04-networking/","title":"Networking and Service Discovery","text":"<p>Configure container networking for reliable agent communication and service discovery in Docker</p>"},{"location":"03-docker-deployment/04-networking/#overview","title":"Overview","text":"<p>Networking is critical for MCP Mesh agents to discover and communicate with each other. This guide covers Docker networking concepts, DNS-based service discovery, network isolation strategies, and troubleshooting connectivity issues in containerized environments.</p> <p>We'll explore how MCP Mesh's registry works with Docker networks, implement secure network topologies, and optimize network performance for agent communication.</p>"},{"location":"03-docker-deployment/04-networking/#key-concepts","title":"Key Concepts","text":"<ul> <li>Docker Networks: Bridge, overlay, and custom network drivers</li> <li>Service Discovery: How containers find each other by name</li> <li>Network Isolation: Segmenting agents for security</li> <li>Port Management: Exposing services safely</li> <li>DNS Resolution: Container name resolution in Docker</li> </ul>"},{"location":"03-docker-deployment/04-networking/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"03-docker-deployment/04-networking/#step-1-understanding-docker-networks-for-mcp-mesh","title":"Step 1: Understanding Docker Networks for MCP Mesh","text":"<p>Create a dedicated network for your mesh:</p> <pre><code># Create a custom bridge network\ndocker network create --driver bridge mcp-mesh-net\n\n# With custom subnet\ndocker network create \\\n  --driver bridge \\\n  --subnet=172.20.0.0/16 \\\n  --ip-range=172.20.240.0/20 \\\n  --gateway=172.20.0.1 \\\n  mcp-mesh-net\n\n# Inspect the network\ndocker network inspect mcp-mesh-net\n</code></pre> <p>Docker Compose network configuration:</p> <pre><code># docker-compose.yml\nversion: \"3.8\"\n\nnetworks:\n  mesh-net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n    driver_opts:\n      com.docker.network.bridge.name: br-mesh\n\n  internal-net:\n    driver: bridge\n    internal: true # No external access\n\nservices:\n  registry:\n    image: mcp-mesh/registry:latest\n    networks:\n      mesh-net:\n        ipv4_address: 172.20.0.10 # Fixed IP\n    hostname: registry\n    domainname: mesh.local\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#step-2-configure-service-discovery","title":"Step 2: Configure Service Discovery","text":"<p>Enable container DNS resolution:</p> <pre><code># docker-compose.yml\nversion: \"3.8\"\n\nservices:\n  registry:\n    image: mcp-mesh/registry:latest\n    hostname: registry # Other containers can reach via 'registry'\n    networks:\n      - mesh-net\n    environment:\n      MCP_MESH_PUBLIC_URL: http://registry:8000\n\n  weather-agent:\n    image: mcp-mesh/agent:0.3\n    networks:\n      - mesh-net\n    environment:\n      # Use service name for discovery\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n    depends_on:\n      - registry\n\n  database-agent:\n    image: mcp-mesh/agent:0.3\n    networks:\n      - mesh-net\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry:8000\n      # Agents discover each other through registry\n      MCP_MESH_ADVERTISE_HOST: database-agent\n      MCP_MESH_ADVERTISE_PORT: 8081\n</code></pre> <p>Implement custom DNS with dnsmasq:</p> <pre><code># docker-compose.dns.yml\nservices:\n  dnsmasq:\n    image: strm/dnsmasq\n    volumes:\n      - ./dnsmasq.conf:/etc/dnsmasq.conf\n    cap_add:\n      - NET_ADMIN\n    networks:\n      mesh-net:\n        ipv4_address: 172.20.0.2\n\n  # Configure agents to use custom DNS\n  agent:\n    dns:\n      - 172.20.0.2 # Custom DNS\n      - 8.8.8.8 # Fallback\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#step-3-implement-network-isolation","title":"Step 3: Implement Network Isolation","text":"<p>Separate agents by security zones:</p> <pre><code># docker-compose.secure.yml\nversion: \"3.8\"\n\nnetworks:\n  dmz: # Public-facing agents\n    driver: bridge\n\n  app: # Business logic agents\n    driver: bridge\n    internal: true\n\n  data: # Database and storage agents\n    driver: bridge\n    internal: true\n\nservices:\n  # DMZ Zone - Public facing\n  api-gateway:\n    image: mcp-mesh/agent:0.3\n    networks:\n      - dmz\n      - app # Can talk to app tier\n    ports:\n      - \"443:443\"\n    environment:\n      ZONE: dmz\n\n  # Application Zone - Business logic\n  order-agent:\n    image: mcp-mesh/agent:0.3\n    networks:\n      - app\n      - data # Can talk to data tier\n    environment:\n      ZONE: app\n\n  # Data Zone - Sensitive data\n  database-agent:\n    image: mcp-mesh/agent:0.3\n    networks:\n      - data # Only in data network\n    environment:\n      ZONE: data\n      RESTRICT_ACCESS: \"true\"\n\n  # Registry spans all zones\n  registry:\n    image: mcp-mesh/registry:latest\n    networks:\n      - dmz\n      - app\n      - data\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#step-4-configure-agent-communication","title":"Step 4: Configure Agent Communication","text":"<p>Set up proper agent networking:</p> <pre><code># agents/network_aware_agent.py\nimport os\nimport socket\nimport mesh\n\ndef get_container_ip():\n    \"\"\"Get container's IP address\"\"\"\n    hostname = socket.gethostname()\n    ip = socket.gethostbyname(hostname)\n    return ip\n\n@mesh.agent(name=\"network-aware\")\nclass NetworkAwareAgent:\n    pass\n\n@mesh.tool(\n    capability=\"network_aware_service\"\n)\ndef network_service():\n    return {\n        \"hostname\": socket.gethostname(),\n        \"ip\": get_container_ip(),\n        \"fqdn\": socket.getfqdn(),\n        \"network_zone\": os.getenv('ZONE', 'default')\n    }\n</code></pre> <p>Configure network policies in agents:</p> <pre><code># agent-config.yml\nnetwork:\n  discovery:\n    # Use Docker's embedded DNS\n    use_dns: true\n    dns_suffix: \".mesh.local\"\n\n  communication:\n    # Prefer internal networks\n    prefer_private_ip: true\n\n    # Network interface selection\n    interface_priority:\n      - eth0 # Docker network\n      - eth1 # Secondary network\n\n  security:\n    # Only accept connections from same network\n    network_whitelist:\n      - 172.20.0.0/16\n\n    # TLS for cross-zone communication\n    require_tls:\n      - dmz-&gt;app\n      - app-&gt;data\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>MCP_MESH_ADVERTISE_HOST</code> Hostname/IP to advertise container hostname agent-1.mesh.local <code>MCP_MESH_ADVERTISE_PORT</code> Port to advertise 8081 9000 <code>MCP_MESH_BIND_HOST</code> Interface to bind to 0.0.0.0 172.20.0.10 <code>MCP_MESH_NETWORK_TIMEOUT</code> Network operation timeout 30s 60s <code>MCP_MESH_DNS_CACHE_TTL</code> DNS cache duration 60s 300s"},{"location":"03-docker-deployment/04-networking/#examples","title":"Examples","text":""},{"location":"03-docker-deployment/04-networking/#example-1-multi-region-networking","title":"Example 1: Multi-Region Networking","text":"<pre><code># docker-compose.multi-region.yml\nversion: \"3.8\"\n\nnetworks:\n  us-east:\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.1.0.0/16\n\n  us-west:\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.2.0.0/16\n\n  global:\n    driver: overlay\n    attachable: true\n\nservices:\n  # US East Region\n  registry-east:\n    image: mcp-mesh/registry:latest\n    networks:\n      - us-east\n      - global\n    environment:\n      REGION: us-east\n      PEER_REGISTRIES: registry-west.global\n\n  agents-east:\n    image: mcp-mesh/agent:0.3\n    deploy:\n      replicas: 5\n    networks:\n      - us-east\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry-east:8000\n      REGION: us-east\n\n  # US West Region\n  registry-west:\n    image: mcp-mesh/registry:latest\n    networks:\n      - us-west\n      - global\n    environment:\n      REGION: us-west\n      PEER_REGISTRIES: registry-east.global\n\n  agents-west:\n    image: mcp-mesh/agent:0.3\n    deploy:\n      replicas: 5\n    networks:\n      - us-west\n    environment:\n      MCP_MESH_REGISTRY_URL: http://registry-west:8000\n      REGION: us-west\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#example-2-service-mesh-integration","title":"Example 2: Service Mesh Integration","text":"<pre><code># docker-compose.service-mesh.yml\nversion: \"3.8\"\n\nservices:\n  # Envoy proxy sidecar for each agent\n  weather-agent:\n    image: mcp-mesh/agent:0.3\n    networks:\n      - mesh-net\n    environment:\n      MCP_MESH_REGISTRY_URL: http://localhost:9901/registry\n\n  weather-proxy:\n    image: envoyproxy/envoy:latest\n    volumes:\n      - ./envoy/weather-envoy.yaml:/etc/envoy/envoy.yaml\n    network_mode: \"service:weather-agent\"\n    command: [\"-c\", \"/etc/envoy/envoy.yaml\"]\n\n  # Consul for service discovery\n  consul:\n    image: consul:latest\n    networks:\n      - mesh-net\n    ports:\n      - \"8500:8500\"\n    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#best-practices","title":"Best Practices","text":"<ol> <li>Use Custom Networks: Don't rely on default bridge network</li> <li>Implement Network Policies: Restrict communication between zones</li> <li>Monitor Network Traffic: Use tools like iftop or nethogs</li> <li>Plan IP Addressing: Use consistent subnets across environments</li> <li>Document Network Topology: Maintain network diagrams</li> </ol>"},{"location":"03-docker-deployment/04-networking/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"03-docker-deployment/04-networking/#pitfall-1-container-name-resolution-fails","title":"Pitfall 1: Container Name Resolution Fails","text":"<p>Problem: Agents can't resolve other container names</p> <p>Solution: Ensure containers are on the same network:</p> <pre><code># Check container networks\ndocker inspect weather-agent | jq '.[0].NetworkSettings.Networks'\n\n# Connect to network if missing\ndocker network connect mcp-mesh-net weather-agent\n\n# In compose, explicitly set networks\nservices:\n  agent:\n    networks:\n      - mesh-net  # Must match other services\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#pitfall-2-port-conflicts","title":"Pitfall 2: Port Conflicts","text":"<p>Problem: Multiple agents trying to use same port</p> <p>Solution: Use dynamic port allocation:</p> <pre><code>services:\n  agent-1:\n    environment:\n      SERVICE_PORT: 8081\n    ports:\n      - \"8081:8081\"\n\n  agent-2:\n    environment:\n      SERVICE_PORT: 8082\n    ports:\n      - \"8082:8082\"\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#testing","title":"Testing","text":""},{"location":"03-docker-deployment/04-networking/#network-connectivity-tests","title":"Network Connectivity Tests","text":"<pre><code># tests/test_network_connectivity.py\nimport docker\nimport requests\n\ndef test_agent_connectivity():\n    \"\"\"Test agents can reach each other\"\"\"\n    client = docker.from_env()\n\n    # Get container IPs\n    registry = client.containers.get('registry')\n    registry_ip = registry.attrs['NetworkSettings']['Networks']['mesh-net']['IPAddress']\n\n    # Test from agent container\n    agent = client.containers.get('weather-agent')\n\n    # Execute connectivity test inside container\n    result = agent.exec_run(f'curl -s http://{registry_ip}:8000/health')\n    assert result.exit_code == 0\n    assert 'healthy' in result.output.decode()\n\ndef test_network_isolation():\n    \"\"\"Test network isolation works\"\"\"\n    client = docker.from_env()\n\n    # Agent in data network shouldn't be reachable from dmz\n    dmz_agent = client.containers.get('api-gateway')\n\n    # Try to reach data tier (should fail)\n    result = dmz_agent.exec_run('curl -s --connect-timeout 5 http://database-agent:8081')\n    assert result.exit_code != 0  # Should timeout/fail\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#dns-resolution-tests","title":"DNS Resolution Tests","text":"<pre><code>#!/bin/bash\n# test_dns_resolution.sh\n\necho \"Testing DNS resolution in containers...\"\n\n# Test from each container\nfor container in registry weather-agent database-agent; do\n  echo \"Testing from $container:\"\n\n  # Test internal DNS\n  docker exec $container nslookup registry\n  docker exec $container ping -c 1 registry\n\n  # Test external DNS\n  docker exec $container nslookup google.com\ndone\n\n# Test custom domains\ndocker exec weather-agent nslookup registry.mesh.local\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"03-docker-deployment/04-networking/#network-debugging-tools","title":"Network Debugging Tools","text":"<pre><code># docker-compose.debug.yml\nservices:\n  network-tools:\n    image: nicolaka/netshoot\n    networks:\n      - mesh-net\n    command: tail -f /dev/null\n    cap_add:\n      - NET_ADMIN\n      - NET_RAW\n</code></pre> <p>Debug commands:</p> <pre><code># Enter debug container\ndocker-compose exec network-tools bash\n\n# Inside container:\n# DNS debugging\nnslookup registry\ndig registry.mesh.local\n\n# Network path testing\ntraceroute registry\nmtr registry\n\n# Port scanning\nnmap -p 8000,8081 172.20.0.0/24\n\n# Packet capture\ntcpdump -i eth0 host registry\n\n# Connection testing\nnc -zv registry 8000\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#network-metrics","title":"Network Metrics","text":"<pre><code># Monitor network usage\ndocker stats --format \"table {% raw %}{{.Container}}{% endraw %}\\t{% raw %}{{.NetIO}}{% endraw %}\"\n\n# Check network interfaces\ndocker exec weather-agent ip addr\n\n# View routing table\ndocker exec weather-agent ip route\n\n# Network namespace debugging\ndocker inspect weather-agent | jq '.[0].NetworkSettings'\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"03-docker-deployment/04-networking/#issue-1-intermittent-connection-failures","title":"Issue 1: Intermittent Connection Failures","text":"<p>Symptoms: Random \"connection refused\" errors</p> <p>Cause: Docker's userland proxy issues</p> <p>Solution:</p> <pre><code># Disable userland proxy\nservices:\n  agent:\n    ports:\n      - target: 8081\n        published: 8081\n        protocol: tcp\n        mode: host # Use host networking for port\n</code></pre>"},{"location":"03-docker-deployment/04-networking/#issue-2-slow-dns-resolution","title":"Issue 2: Slow DNS Resolution","text":"<p>Symptoms: Long delays before connections</p> <p>Cause: DNS timeout/cache issues</p> <p>Solution:</p> <pre><code>services:\n  agent:\n    dns_options:\n      - ndots:0 # Don't append search domains\n      - timeout:1 # 1 second timeout\n      - attempts:2 # 2 attempts max\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"03-docker-deployment/04-networking/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Docker Bridge Network: Limited to single host</li> <li>Overlay Networks: Require Swarm mode or external orchestrator</li> <li>MacVLAN: Complex setup and limited platform support</li> <li>IPv6: Requires additional configuration</li> </ul>"},{"location":"03-docker-deployment/04-networking/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add IPv6 networking examples</li> <li> Document CNI plugin integration</li> <li> Add network policy examples</li> <li> Create network topology visualizer</li> <li> Add eBPF monitoring examples</li> </ul>"},{"location":"03-docker-deployment/04-networking/#summary","title":"Summary","text":"<p>You now understand Docker networking for MCP Mesh deployments:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Custom networks for agent isolation and organization</li> <li>\ud83d\udd11 DNS-based service discovery within Docker</li> <li>\ud83d\udd11 Network security through segmentation</li> <li>\ud83d\udd11 Debugging tools for network issues</li> </ul>"},{"location":"03-docker-deployment/04-networking/#next-steps","title":"Next Steps","text":"<p>Let's explore data persistence strategies for containerized agents.</p> <p>Continue to Persistent Storage \u2192</p> <p>\ud83d\udca1 Tip: Use <code>docker network prune</code> to clean up unused networks and avoid conflicts</p> <p>\ud83d\udcda Reference: Docker Networking Documentation</p> <p>\ud83e\uddea Try It: Create a three-tier network architecture with proper isolation between tiers</p>"},{"location":"03-docker-deployment/05-storage/","title":"Persistent Storage","text":"<p>Manage data persistence and stateful operations for containerized MCP Mesh agents</p>"},{"location":"03-docker-deployment/05-storage/#overview","title":"Overview","text":"<p>While MCP Mesh agents are typically stateless, many real-world scenarios require persistent data storage - from caching and session state to configuration and logs. This guide covers Docker volume management, data persistence strategies, backup approaches, and best practices for stateful agent deployments.</p> <p>We'll explore different storage drivers, volume types, data migration strategies, and how to ensure data survives container restarts and updates.</p>"},{"location":"03-docker-deployment/05-storage/#key-concepts","title":"Key Concepts","text":"<ul> <li>Docker Volumes: Managed volumes vs bind mounts</li> <li>Volume Drivers: Local, NFS, cloud storage plugins</li> <li>Data Lifecycle: Persistence across container lifecycles</li> <li>Backup Strategies: Protecting agent data</li> <li>Shared Storage: Multiple agents accessing same data</li> </ul>"},{"location":"03-docker-deployment/05-storage/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"03-docker-deployment/05-storage/#step-1-understanding-storage-options","title":"Step 1: Understanding Storage Options","text":"<p>Docker provides several storage mechanisms:</p> <pre><code># docker-compose.yml\nversion: \"3.8\"\n\nservices:\n  # Named volume (recommended)\n  agent-with-volume:\n    image: mcp-mesh/agent:latest\n    volumes:\n      - agent_data:/data # Named volume\n      - cache_data:/cache\n\n  # Bind mount (for development)\n  agent-with-bind:\n    image: mcp-mesh/agent:latest\n    volumes:\n      - ./local-data:/data # Bind mount\n      - ./config:/app/config:ro # Read-only mount\n\n  # tmpfs mount (for temporary data)\n  agent-with-tmpfs:\n    image: mcp-mesh/agent:latest\n    tmpfs:\n      - /tmp\n      - /run\n    volumes:\n      - type: tmpfs\n        target: /cache\n        tmpfs:\n          size: 100M\n\nvolumes:\n  agent_data: # Named volume\n    driver: local\n  cache_data:\n    driver: local\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#step-2-configure-persistent-agent-storage","title":"Step 2: Configure Persistent Agent Storage","text":"<p>Implement storage for different agent needs:</p> <pre><code># docker-compose.storage.yml\nversion: \"3.8\"\n\nservices:\n  # Database agent with persistent data\n  database-agent:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/database_agent.py\"]\n    environment:\n      DB_PATH: /data/agent.db\n    volumes:\n      - db_data:/data\n      - db_backups:/backups\n    # Ensure data directory has correct permissions\n    user: \"1000:1000\"\n\n  # Cache agent with Redis\n  cache-agent:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/cache_agent.py\"]\n    environment:\n      REDIS_DATA_DIR: /data\n    volumes:\n      - redis_data:/data\n      - redis_config:/etc/redis:ro\n\n  # File processing agent\n  file-agent:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/file_processor.py\"]\n    environment:\n      INPUT_DIR: /data/input\n      OUTPUT_DIR: /data/output\n      PROCESSING_DIR: /data/processing\n    volumes:\n      - file_input:/data/input\n      - file_output:/data/output\n      - file_processing:/data/processing\n\n  # Analytics agent with time-series data\n  analytics-agent:\n    image: mcp-mesh/agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/analytics_agent.py\"]\n    environment:\n      METRICS_PATH: /data/metrics\n      RETENTION_DAYS: 30\n    volumes:\n      - type: volume\n        source: metrics_data\n        target: /data/metrics\n        volume:\n          nocopy: true # Don't copy existing data\n\nvolumes:\n  db_data:\n    driver: local\n  db_backups:\n    driver: local\n  redis_data:\n    driver: local\n  redis_config:\n    driver: local\n  file_input:\n    driver: local\n  file_output:\n    driver: local\n  file_processing:\n    driver: local\n  metrics_data:\n    driver: local\n    driver_opts:\n      type: none\n      device: /mnt/metrics # Mount specific directory\n      o: bind\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#step-3-implement-backup-and-recovery","title":"Step 3: Implement Backup and Recovery","text":"<p>Create backup strategies for agent data:</p> <pre><code># docker-compose.backup.yml\nversion: \"3.8\"\n\nservices:\n  # Backup service\n  backup-agent:\n    image: mcp-mesh/backup-agent:latest\n    environment:\n      BACKUP_SCHEDULE: \"0 2 * * *\" # 2 AM daily\n      BACKUP_RETENTION: 7 # Keep 7 days\n      S3_BUCKET: ${BACKUP_BUCKET}\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}\n    volumes:\n      # Access all volumes that need backup\n      - agent_data:/backup/agent_data:ro\n      - db_data:/backup/db_data:ro\n      - metrics_data:/backup/metrics_data:ro\n      - backup_temp:/tmp\n\n  # Volume backup using restic\n  restic-backup:\n    image: restic/restic:latest\n    environment:\n      RESTIC_REPOSITORY: s3:s3.amazonaws.com/bucket/backup\n      RESTIC_PASSWORD_FILE: /run/secrets/restic_password\n    secrets:\n      - restic_password\n    volumes:\n      - agent_data:/data/agent_data:ro\n      - ./backup-scripts:/scripts\n    command: [\"/scripts/backup.sh\"]\n\nvolumes:\n  backup_temp:\n    driver: local\n\nsecrets:\n  restic_password:\n    file: ./secrets/restic_password.txt\n</code></pre> <p>Backup script example:</p> <pre><code>#!/bin/bash\n# backup-scripts/backup.sh\n\nset -e\n\necho \"Starting backup at $(date)\"\n\n# Initialize repository if needed\nrestic snapshots || restic init\n\n# Backup each volume\nfor volume in agent_data db_data metrics_data; do\n  echo \"Backing up $volume...\"\n  restic backup /data/$volume \\\n    --tag \"$volume\" \\\n    --tag \"$(date +%Y-%m-%d)\" \\\n    --host \"docker-compose\"\ndone\n\n# Cleanup old snapshots\nrestic forget \\\n  --keep-daily 7 \\\n  --keep-weekly 4 \\\n  --keep-monthly 6 \\\n  --prune\n\necho \"Backup completed at $(date)\"\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#step-4-implement-shared-storage","title":"Step 4: Implement Shared Storage","text":"<p>Configure shared storage for agent collaboration:</p> <pre><code># docker-compose.shared.yml\nversion: \"3.8\"\n\nservices:\n  # NFS server for shared storage\n  nfs-server:\n    image: itsthenetwork/nfs-server-alpine:latest\n    privileged: true\n    environment:\n      SHARED_DIRECTORY: /exports\n    volumes:\n      - shared_data:/exports\n    ports:\n      - \"2049:2049\"\n\n  # Agents using shared storage\n  agent-1:\n    image: mcp-mesh/agent:latest\n    volumes:\n      - type: volume\n        source: nfs_volume\n        target: /shared\n        volume:\n          driver: local\n          driver_opts:\n            type: nfs\n            o: addr=nfs-server,vers=4,soft,rw\n            device: \":/exports\"\n\n  agent-2:\n    image: mcp-mesh/agent:latest\n    volumes:\n      - type: volume\n        source: nfs_volume\n        target: /shared\n        volume:\n          driver: local\n          driver_opts:\n            type: nfs\n            o: addr=nfs-server,vers=4,soft,rw\n            device: \":/exports\"\n\n  # Using cloud storage (MinIO)\n  minio:\n    image: minio/minio:latest\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n    volumes:\n      - minio_data:/data\n    ports:\n      - \"9000:9000\"\n      - \"9001:9001\"\n    command: server /data --console-address \":9001\"\n\nvolumes:\n  shared_data:\n  nfs_volume:\n  minio_data:\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#configuration-options","title":"Configuration Options","text":"Option Description Default Example <code>volume.driver</code> Volume driver to use local nfs, glusterfs <code>volume.driver_opts</code> Driver-specific options - type: nfs <code>volume.external</code> Use existing volume false true <code>tmpfs.size</code> Size of tmpfs mount unlimited 100M <code>bind.propagation</code> Bind propagation mode rprivate shared"},{"location":"03-docker-deployment/05-storage/#examples","title":"Examples","text":""},{"location":"03-docker-deployment/05-storage/#example-1-stateful-ml-agent","title":"Example 1: Stateful ML Agent","text":"<pre><code># docker-compose.ml.yml\nversion: \"3.8\"\n\nservices:\n  ml-training-agent:\n    image: mcp-mesh/ml-agent:latest\n    command: [\"./bin/meshctl\", \"start\", \"examples/simple/ml_trainer.py\"]\n    environment:\n      MODEL_PATH: /models\n      DATASET_PATH: /datasets\n      CHECKPOINT_PATH: /checkpoints\n    volumes:\n      # Large datasets on fast storage\n      - type: volume\n        source: datasets\n        target: /datasets\n        volume:\n          driver: local\n          driver_opts:\n            type: none\n            device: /nvme/datasets\n            o: bind\n\n      # Model storage\n      - models:/models\n\n      # Temporary checkpoint storage\n      - type: tmpfs\n        target: /checkpoints\n        tmpfs:\n          size: 10G\n\n    # GPU access for training\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: 1\n              capabilities: [gpu]\n\nvolumes:\n  datasets:\n    external: true\n  models:\n    driver: local\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#example-2-event-sourcing-storage","title":"Example 2: Event Sourcing Storage","text":"<pre><code># agents/event_store_agent.py\nimport os\nimport json\nimport time\nfrom pathlib import Path\nimport mesh\n\nclass EventStore:\n    def __init__(self, base_path=\"/data/events\"):\n        self.base_path = Path(base_path)\n        self.base_path.mkdir(parents=True, exist_ok=True)\n\n    def append_event(self, stream, event):\n        \"\"\"Append event to stream with guaranteed ordering\"\"\"\n        stream_path = self.base_path / stream\n        stream_path.mkdir(exist_ok=True)\n\n        # Use timestamp + sequence for ordering\n        timestamp = time.time_ns()\n        event_file = stream_path / f\"{timestamp}.json\"\n\n        # Atomic write\n        temp_file = event_file.with_suffix('.tmp')\n        with open(temp_file, 'w') as f:\n            json.dump({\n                'timestamp': timestamp,\n                'event': event\n            }, f)\n\n        # Atomic rename\n        temp_file.rename(event_file)\n\n        # Sync to ensure durability\n        os.sync()\n\n    def read_stream(self, stream, from_timestamp=0):\n        \"\"\"Read events from stream\"\"\"\n        stream_path = self.base_path / stream\n        if not stream_path.exists():\n            return []\n\n        events = []\n        for event_file in sorted(stream_path.glob('*.json')):\n            timestamp = int(event_file.stem)\n            if timestamp &gt;= from_timestamp:\n                with open(event_file) as f:\n                    events.append(json.load(f))\n\n        return events\n\n@mesh_agent(\n    capability=\"event_store\",\n    persistent_paths=[\"/data/events\"]\n)\ndef store_event(stream: str, event: dict):\n    store = EventStore()\n    store.append_event(stream, event)\n    return {\"status\": \"stored\", \"stream\": stream}\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#best-practices","title":"Best Practices","text":"<ol> <li>Use Named Volumes: Easier to manage than bind mounts</li> <li>Regular Backups: Automate backup processes</li> <li>Volume Labels: Tag volumes with metadata</li> <li>Separate Data Types: Different volumes for different data</li> <li>Monitor Disk Usage: Set up alerts for volume capacity</li> </ol>"},{"location":"03-docker-deployment/05-storage/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"03-docker-deployment/05-storage/#pitfall-1-permission-issues","title":"Pitfall 1: Permission Issues","text":"<p>Problem: Container can't write to volume</p> <p>Solution: Set correct ownership:</p> <pre><code># In Dockerfile\nRUN useradd -m -u 1000 appuser\nUSER appuser\n\n# Or in docker-compose.yml\nservices:\n  agent:\n    user: \"1000:1000\"\n    volumes:\n      - data:/data\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#pitfall-2-data-loss-on-volume-delete","title":"Pitfall 2: Data Loss on Volume Delete","text":"<p>Problem: Accidentally deleted volume with important data</p> <p>Solution: Use external volumes for critical data:</p> <pre><code>volumes:\n  critical_data:\n    external: true # Won't be deleted with stack\n    name: production_data\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#testing","title":"Testing","text":""},{"location":"03-docker-deployment/05-storage/#volume-testing-script","title":"Volume Testing Script","text":"<pre><code>#!/bin/bash\n# test_volumes.sh\n\necho \"Testing volume persistence...\"\n\n# Create test data\ndocker-compose exec agent sh -c 'echo \"test data\" &gt; /data/test.txt'\n\n# Restart container\ndocker-compose restart agent\n\n# Verify data persists\ndocker-compose exec agent cat /data/test.txt || {\n  echo \"ERROR: Data not persisted!\"\n  exit 1\n}\n\n# Test backup\ndocker-compose run --rm backup-agent /scripts/backup.sh\n\n# Simulate disaster - delete volume\ndocker-compose down -v\ndocker volume rm myapp_agent_data\n\n# Restore from backup\ndocker-compose run --rm backup-agent /scripts/restore.sh\n\n# Verify restored data\ndocker-compose up -d agent\ndocker-compose exec agent cat /data/test.txt || {\n  echo \"ERROR: Restore failed!\"\n  exit 1\n}\n\necho \"Volume tests passed!\"\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#performance-testing","title":"Performance Testing","text":"<pre><code># tests/test_storage_performance.py\nimport time\nimport docker\n\ndef test_volume_performance():\n    \"\"\"Compare volume performance\"\"\"\n    client = docker.from_env()\n\n    tests = {\n        'bind_mount': './test-data:/data',\n        'named_volume': 'test_volume:/data',\n        'tmpfs': {'tmpfs': {'/data': 'size=100M'}}\n    }\n\n    for mount_type, mount_config in tests.items():\n        if mount_type == 'tmpfs':\n            container = client.containers.run(\n                'alpine',\n                'sh -c \"dd if=/dev/zero of=/data/test bs=1M count=100\"',\n                tmpfs=mount_config['tmpfs'],\n                detach=True\n            )\n        else:\n            container = client.containers.run(\n                'alpine',\n                'sh -c \"dd if=/dev/zero of=/data/test bs=1M count=100\"',\n                volumes=[mount_config],\n                detach=True\n            )\n\n        start = time.time()\n        container.wait()\n        duration = time.time() - start\n\n        print(f\"{mount_type}: {duration:.2f}s\")\n        container.remove()\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"03-docker-deployment/05-storage/#volume-monitoring","title":"Volume Monitoring","text":"<pre><code># Check volume usage\ndocker system df -v\n\n# Inspect volume details\ndocker volume inspect agent_data\n\n# Monitor disk I/O\ndocker exec agent iostat -x 1\n\n# Check volume mount inside container\ndocker exec agent df -h\ndocker exec agent mount | grep /data\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#storage-debugging","title":"Storage Debugging","text":"<pre><code># docker-compose.debug.yml\nservices:\n  volume-debugger:\n    image: busybox\n    volumes:\n      - agent_data:/debug/agent_data\n      - db_data:/debug/db_data\n    command: |\n      sh -c \"\n      while true; do\n        echo '=== Volume Status ==='\n        du -sh /debug/*\n        echo '=== Disk Usage ==='\n        df -h /debug\n        sleep 60\n      done\n      \"\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"03-docker-deployment/05-storage/#issue-1-volume-mount-fails","title":"Issue 1: Volume Mount Fails","text":"<p>Symptoms: \"No such file or directory\" or permission denied</p> <p>Cause: Path doesn't exist or permission issues</p> <p>Solution:</p> <pre><code># Create directory first\nmkdir -p /path/to/data\nchmod 755 /path/to/data\n\n# Or use init container\nservices:\n  init-volumes:\n    image: busybox\n    volumes:\n      - data:/data\n    command: |\n      sh -c \"\n      mkdir -p /data/subdir\n      chmod -R 777 /data\n      \"\n</code></pre>"},{"location":"03-docker-deployment/05-storage/#issue-2-slow-volume-performance","title":"Issue 2: Slow Volume Performance","text":"<p>Symptoms: Agent operations are slow</p> <p>Cause: Storage driver overhead</p> <p>Solution:</p> <pre><code># Use optimal storage driver\nvolumes:\n  fast_data:\n    driver: local\n    driver_opts:\n      type: none\n      device: /dev/nvme0n1p1 # Use fast disk\n      o: bind\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"03-docker-deployment/05-storage/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Cross-Platform Mounts: Path differences between Windows/Mac/Linux</li> <li>Volume Drivers: Not all drivers available on all platforms</li> <li>Live Migration: Moving volumes between hosts is complex</li> <li>Concurrent Access: Some filesystems don't handle concurrent writes well</li> </ul>"},{"location":"03-docker-deployment/05-storage/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add distributed storage examples (GlusterFS, Ceph)</li> <li> Document volume encryption</li> <li> Add disaster recovery procedures</li> <li> Create volume migration tools</li> <li> Add storage quota management</li> </ul>"},{"location":"03-docker-deployment/05-storage/#summary","title":"Summary","text":"<p>You now understand persistent storage for containerized MCP Mesh agents:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Multiple storage options for different use cases</li> <li>\ud83d\udd11 Backup and recovery strategies for data protection</li> <li>\ud83d\udd11 Shared storage for agent collaboration</li> <li>\ud83d\udd11 Performance optimization techniques</li> </ul>"},{"location":"03-docker-deployment/05-storage/#next-steps","title":"Next Steps","text":"<p>You've completed the Docker deployment section! Consider exploring Kubernetes deployment next.</p> <p>Continue to Kubernetes Basics \u2192</p> <p>\ud83d\udca1 Tip: Use <code>docker volume prune</code> carefully - add the <code>-a</code> flag to see what would be removed first</p> <p>\ud83d\udcda Reference: Docker Storage Documentation</p> <p>\ud83e\uddea Try It: Implement a multi-agent system where agents share processed data through a common volume</p>"},{"location":"03-docker-deployment/troubleshooting/","title":"Docker Deployment Troubleshooting Guide","text":"<p>Quick solutions to common Docker deployment issues with MCP Mesh</p>"},{"location":"03-docker-deployment/troubleshooting/#overview","title":"Overview","text":"<p>This comprehensive troubleshooting guide addresses common issues encountered when deploying MCP Mesh agents with Docker. Each issue includes diagnostic steps, root cause analysis, and proven solutions.</p>"},{"location":"03-docker-deployment/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this comprehensive diagnostic script:</p> <pre><code>#!/bin/bash\necho \"MCP Mesh Docker Diagnostics\"\necho \"===========================\"\n\n# Check Docker daemon\necho -n \"Docker daemon: \"\ndocker version &gt; /dev/null 2&gt;&amp;1 &amp;&amp; echo \"RUNNING\" || echo \"NOT RUNNING\"\n\n# Check Docker Compose\necho -n \"Docker Compose: \"\ndocker-compose version &gt; /dev/null 2&gt;&amp;1 &amp;&amp; echo \"INSTALLED\" || echo \"NOT FOUND\"\n\n# Check running containers\necho -e \"\\nRunning containers:\"\ndocker ps --format \"table {% raw %}{{.Names}}{% endraw %}\\t{% raw %}{{.Status}}{% endraw %}\\t{% raw %}{{.Ports}}{% endraw %}\"\n\n# Check networks\necho -e \"\\nDocker networks:\"\ndocker network ls --filter name=mesh\n\n# Check volumes\necho -e \"\\nDocker volumes:\"\ndocker volume ls --filter name=mesh\n\n# Check resource usage\necho -e \"\\nResource usage:\"\ndocker system df\n\n# Check container health\necho -e \"\\nContainer health:\"\ndocker ps --format \"table {% raw %}{{.Names}}{% endraw %}\\t{% raw %}{{.Status}}{% endraw %}\" | grep -E \"(healthy|unhealthy|starting)\"\n\n# Check registry connectivity\necho -e \"\\nRegistry status:\"\ncurl -s http://localhost:8000/health 2&gt;/dev/null | jq -r '.status' || echo \"NOT ACCESSIBLE\"\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"03-docker-deployment/troubleshooting/#issue-1-container-fails-to-start","title":"Issue 1: Container Fails to Start","text":"<p>Symptoms:</p> <pre><code>ERROR: for agent Cannot start service agent: OCI runtime create failed\n</code></pre> <p>Diagnosis:</p> <pre><code># Check logs\ndocker-compose logs agent\n\n# Inspect container\ndocker inspect $(docker-compose ps -q agent)\n\n# Check events\ndocker events --since 10m --filter container=agent\n</code></pre> <p>Solutions:</p> <ol> <li>Image not found:</li> </ol> <pre><code># Build missing image\ndocker-compose build agent\n\n# Or pull from registry\ndocker-compose pull agent\n</code></pre> <ol> <li>Port already in use:</li> </ol> <pre><code># Find process using port\nsudo lsof -i :8000\n\n# Change port in docker-compose.yml\nports:\n  - \"8001:8000\"  # Use different host port\n</code></pre> <ol> <li>Permission issues: <pre><code># Fix in Dockerfile\nRUN chmod +x /entrypoint.sh\nUSER 1000:1000\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-2-agent-cant-connect-to-registry","title":"Issue 2: Agent Can't Connect to Registry","text":"<p>Symptoms:</p> <pre><code>Failed to register with registry: connection refused\nRegistry at http://localhost:8000 not accessible\n</code></pre> <p>Diagnosis:</p> <pre><code># Test from host\ncurl http://localhost:8000/health\n\n# Test from container\ndocker-compose exec agent curl http://registry:8000/health\n\n# Check DNS resolution\ndocker-compose exec agent nslookup registry\n</code></pre> <p>Solutions:</p> <ol> <li>Wrong hostname:</li> </ol> <pre><code>environment:\n  # Use service name, not localhost\n  MCP_MESH_REGISTRY_URL: http://registry:8000\n</code></pre> <ol> <li>Network isolation:</li> </ol> <pre><code>services:\n  agent:\n    networks:\n      - mesh-net # Same network as registry\n  registry:\n    networks:\n      - mesh-net\n</code></pre> <ol> <li>Startup order: <pre><code>depends_on:\n  registry:\n    condition: service_healthy\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-3-database-connection-errors","title":"Issue 3: Database Connection Errors","text":"<p>Symptoms:</p> <pre><code>FATAL: password authentication failed for user \"postgres\"\ncould not connect to server: Connection refused\n</code></pre> <p>Solutions:</p> <ol> <li>Environment variables not set:</li> </ol> <pre><code># Use .env file\nenvironment:\n  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n\n# Or docker-compose override\ndocker-compose run -e POSTGRES_PASSWORD=secret postgres\n</code></pre> <ol> <li>Database not initialized:</li> </ol> <pre><code># Remove old volume and reinitialize\ndocker-compose down -v\ndocker volume rm project_postgres_data\ndocker-compose up -d postgres\n</code></pre> <ol> <li>Health check timing: <pre><code>healthcheck:\n  test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n  interval: 10s\n  timeout: 5s\n  retries: 5\n  start_period: 30s # Give time to initialize\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-4-container-keeps-restarting","title":"Issue 4: Container Keeps Restarting","text":"<p>Symptoms:</p> <pre><code>STATUS: Restarting (1) X seconds ago\nContainer exits immediately after starting\n</code></pre> <p>Diagnosis:</p> <pre><code># Check exit code\ndocker-compose ps\n\n# View recent logs\ndocker-compose logs --tail=50 agent\n\n# Check restart policy\ndocker inspect agent | jq '.[0].HostConfig.RestartPolicy'\n</code></pre> <p>Solutions:</p> <ol> <li>Application crashes:</li> </ol> <pre><code># Temporarily disable restart\nrestart: \"no\"\n\n# Run interactively to debug\ndocker-compose run --rm agent bash\n</code></pre> <ol> <li>Missing environment variables:</li> </ol> <pre><code>environment:\n  - REQUIRED_VAR=${REQUIRED_VAR:?Error: REQUIRED_VAR not set}\n</code></pre> <ol> <li>Entrypoint issues: <pre><code># Use exec form to handle signals properly\nENTRYPOINT [\"./bin/meshctl\"]\nCMD [\"start\", \"examples/simple/agent.py\"]\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-5-out-of-memory-errors","title":"Issue 5: Out of Memory Errors","text":"<p>Symptoms:</p> <pre><code>Container killed due to OOM (Out of Memory)\nAgent becomes unresponsive\n</code></pre> <p>Solutions:</p> <ol> <li>Set memory limits:</li> </ol> <pre><code>deploy:\n  resources:\n    limits:\n      memory: 512M\n    reservations:\n      memory: 256M\n</code></pre> <ol> <li>Optimize application:</li> </ol> <pre><code># In agent code\nimport gc\n\ndef process_large_data():\n    # Process in chunks\n    for chunk in data_chunks:\n        process(chunk)\n        gc.collect()  # Force garbage collection\n</code></pre> <ol> <li>Monitor memory usage:</li> </ol> <pre><code># Real-time monitoring\ndocker stats\n\n# Historical data\ndocker-compose exec agent cat /proc/meminfo\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#issue-6-volume-permission-issues","title":"Issue 6: Volume Permission Issues","text":"<p>Symptoms:</p> <pre><code>Permission denied when writing to volume\nCannot create directory: Operation not permitted\n</code></pre> <p>Solutions:</p> <ol> <li>Fix ownership:</li> </ol> <pre><code># Check current ownership\ndocker-compose exec agent ls -la /data\n\n# Fix from host\nsudo chown -R 1000:1000 ./data\n\n# Or use init container\nservices:\n  init-permissions:\n    image: busybox\n    volumes:\n      - data:/data\n    command: chown -R 1000:1000 /data\n</code></pre> <ol> <li>Use proper user in container: <pre><code># Create user with specific UID\nRUN useradd -m -u 1000 appuser\nUSER appuser\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-7-slow-container-startup","title":"Issue 7: Slow Container Startup","text":"<p>Symptoms:</p> <ul> <li>Container takes minutes to become ready</li> <li>Health checks timing out</li> </ul> <p>Solutions:</p> <ol> <li>Optimize image:</li> </ol> <pre><code># Multi-stage build\nFROM python:3.11 AS builder\nCOPY requirements.txt .\nRUN pip wheel --no-cache-dir -r requirements.txt\n\nFROM python:3.11-slim\nCOPY --from=builder *.whl .\nRUN pip install --no-cache-dir *.whl\n</code></pre> <ol> <li>Adjust health check timing:</li> </ol> <pre><code>healthcheck:\n  start_period: 60s # Allow more startup time\n  interval: 30s\n  timeout: 10s\n</code></pre> <ol> <li>Pre-compile Python: <pre><code>RUN python -m compileall /app\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-8-network-communication-issues","title":"Issue 8: Network Communication Issues","text":"<p>Symptoms:</p> <ul> <li>Containers can't reach each other</li> <li>DNS resolution failures</li> <li>Intermittent connection errors</li> </ul> <p>Solutions:</p> <ol> <li>DNS debugging:</li> </ol> <pre><code># Test DNS from container\ndocker-compose exec agent nslookup registry\ndocker-compose exec agent ping -c 3 registry\n\n# Check resolv.conf\ndocker-compose exec agent cat /etc/resolv.conf\n</code></pre> <ol> <li>Network inspection:</li> </ol> <pre><code># List networks\ndocker network ls\n\n# Inspect network\ndocker network inspect mesh-net\n\n# Check container networks\ndocker inspect agent | jq '.[0].NetworkSettings.Networks'\n</code></pre> <ol> <li>Fix network configuration: <pre><code>networks:\n  mesh-net:\n    driver: bridge\n    driver_opts:\n      com.docker.network.bridge.enable_icc: \"true\"\n      com.docker.network.bridge.enable_ip_masquerade: \"true\"\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-9-build-failures","title":"Issue 9: Build Failures","text":"<p>Symptoms:</p> <pre><code>ERROR: Service 'agent' failed to build\nPackage installation fails\n</code></pre> <p>Solutions:</p> <ol> <li>Clear build cache:</li> </ol> <pre><code># Remove all build cache\ndocker builder prune -a\n\n# Build without cache\ndocker-compose build --no-cache agent\n</code></pre> <ol> <li>Fix package sources:</li> </ol> <pre><code># Update package lists\nRUN apt-get update &amp;&amp; apt-get install -y ...\n\n# Use specific package versions\nRUN pip install package==1.2.3\n</code></pre> <ol> <li>Handle network issues: <pre><code># Retry on failure\nRUN for i in 1 2 3; do \\\n    pip install -r requirements.txt &amp;&amp; break || sleep 5; \\\ndone\n</code></pre></li> </ol>"},{"location":"03-docker-deployment/troubleshooting/#issue-10-docker-compose-version-issues","title":"Issue 10: Docker Compose Version Issues","text":"<p>Symptoms:</p> <pre><code>ERROR: Version in \"./docker-compose.yml\" is unsupported\nInvalid compose file\n</code></pre> <p>Solutions:</p> <ol> <li>Check Docker Compose version:</li> </ol> <pre><code>docker-compose version\n\n# Upgrade if needed\nsudo pip install --upgrade docker-compose\n</code></pre> <ol> <li>Use compatible syntax:</li> </ol> <pre><code># Use version 3.8 features carefully\nversion: '3.8'\n\n# Or downgrade to widely supported version\nversion: '3.3'\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"03-docker-deployment/troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<pre><code># Find CPU-hungry containers\ndocker stats --no-stream --format \"table {% raw %}{{.Container}}{% endraw %}\\t{% raw %}{{.CPUPerc}}{% endraw %}\"\n\n# Limit CPU usage\nservices:\n  agent:\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#disk-space-issues","title":"Disk Space Issues","text":"<pre><code># Check disk usage\ndocker system df\n\n# Clean up\ndocker system prune -a --volumes\n\n# Remove specific items\ndocker container prune\ndocker image prune\ndocker volume prune\ndocker network prune\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#emergency-recovery","title":"Emergency Recovery","text":""},{"location":"03-docker-deployment/troubleshooting/#complete-reset","title":"Complete Reset","text":"<pre><code>#!/bin/bash\n# emergency-reset.sh\n\necho \"WARNING: This will delete all Docker data!\"\nread -p \"Continue? (y/N) \" -n 1 -r\necho\n\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    # Stop all containers\n    docker-compose down\n\n    # Remove all containers\n    docker rm -f $(docker ps -aq) 2&gt;/dev/null\n\n    # Remove all images\n    docker rmi -f $(docker images -q) 2&gt;/dev/null\n\n    # Remove all volumes\n    docker volume rm $(docker volume ls -q) 2&gt;/dev/null\n\n    # Remove all networks\n    docker network rm $(docker network ls -q) 2&gt;/dev/null\n\n    # Restart Docker\n    sudo systemctl restart docker\n\n    echo \"Docker reset complete\"\nfi\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#backup-before-troubleshooting","title":"Backup Before Troubleshooting","text":"<pre><code>#!/bin/bash\n# backup-docker-state.sh\n\nBACKUP_DIR=\"docker-backup-$(date +%Y%m%d-%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Export compose configuration\ndocker-compose config &gt; \"$BACKUP_DIR/docker-compose.resolved.yml\"\n\n# Save running container state\ndocker ps -a &gt; \"$BACKUP_DIR/containers.txt\"\n\n# Export volumes\nfor volume in $(docker volume ls -q); do\n    docker run --rm -v $volume:/data -v $(pwd)/$BACKUP_DIR:/backup \\\n        busybox tar czf /backup/$volume.tar.gz /data\ndone\n\necho \"Backup saved to $BACKUP_DIR\"\n</code></pre>"},{"location":"03-docker-deployment/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If these solutions don't resolve your issue:</p> <ol> <li>Collect diagnostic information:</li> </ol> <pre><code>docker-compose logs &gt; docker-logs.txt\ndocker-compose ps &gt; docker-status.txt\ndocker-compose config &gt; docker-config.txt\ndocker version &gt; docker-version.txt\n</code></pre> <ol> <li> <p>Check GitHub issues:</p> </li> <li> <p>https://github.com/dhyansraj/mcp-mesh/issues</p> </li> <li> <p>Community support:</p> </li> <li>MCP Discord: https://discord.gg/mcp</li> <li>Stack Overflow: Tag with <code>mcp-mesh</code> and <code>docker</code></li> </ol> <p>\ud83d\udca1 Tip: Always test solutions in a development environment first</p> <p>\ud83d\udcda Reference: Docker Troubleshooting Guide</p> <p>\ud83d\udd0d Debug Mode: Set <code>COMPOSE_DEBUG=true</code> for verbose Docker Compose output</p>"},{"location":"04-kubernetes-basics/01-minikube-setup/","title":"Minikube Setup","text":"<p>Set up a local Kubernetes cluster with Minikube for MCP Mesh development and testing</p>"},{"location":"04-kubernetes-basics/01-minikube-setup/#overview","title":"Overview","text":"<p>Minikube provides a local Kubernetes cluster perfect for developing and testing MCP Mesh deployments before moving to production. This guide covers installing Minikube, configuring it for MCP Mesh requirements, and optimizing performance for local development.</p> <p>We'll set up a cluster with sufficient resources, enable necessary addons, and prepare the environment for deploying MCP Mesh components.</p>"},{"location":"04-kubernetes-basics/01-minikube-setup/#key-concepts","title":"Key Concepts","text":"<ul> <li>Minikube: Local Kubernetes implementation for development</li> <li>Drivers: Virtualization backends (Docker, VirtualBox, HyperKit)</li> <li>Addons: Additional Kubernetes features (ingress, metrics-server)</li> <li>Profiles: Multiple cluster configurations</li> <li>Resource Allocation: CPU, memory, and disk configuration</li> </ul>"},{"location":"04-kubernetes-basics/01-minikube-setup/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"04-kubernetes-basics/01-minikube-setup/#step-1-install-minikube","title":"Step 1: Install Minikube","text":"<p>Choose your platform and install Minikube:</p>"},{"location":"04-kubernetes-basics/01-minikube-setup/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install minikube\n\n# Or direct download\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64\nsudo install minikube-darwin-amd64 /usr/local/bin/minikube\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#linux","title":"Linux","text":"<pre><code># Download and install\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# For ARM64\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64\nsudo install minikube-linux-arm64 /usr/local/bin/minikube\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#windows","title":"Windows","text":"<pre><code># Using Chocolatey\nchoco install minikube\n\n# Or using installer\n# Download from: https://github.com/kubernetes/minikube/releases/latest\n</code></pre> <p>Verify installation:</p> <pre><code>minikube version\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#step-2-choose-and-configure-driver","title":"Step 2: Choose and Configure Driver","text":"<p>Select the best driver for your system:</p>"},{"location":"04-kubernetes-basics/01-minikube-setup/#docker-driver-recommended","title":"Docker Driver (Recommended)","text":"<pre><code># Ensure Docker is running\ndocker version\n\n# Set Docker as default driver\nminikube config set driver docker\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#virtualbox-driver","title":"VirtualBox Driver","text":"<pre><code># Install VirtualBox first\n# Then set as driver\nminikube config set driver virtualbox\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#platform-specific-drivers","title":"Platform-Specific Drivers","text":"<pre><code># macOS: HyperKit\nminikube config set driver hyperkit\n\n# Windows: Hyper-V (requires admin)\nminikube config set driver hyperv\n\n# Linux: KVM2\nminikube config set driver kvm2\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#step-3-start-minikube-with-mcp-mesh-requirements","title":"Step 3: Start Minikube with MCP Mesh Requirements","text":"<p>Create a cluster with appropriate resources:</p> <pre><code># Start with recommended settings\nminikube start \\\n  --cpus=4 \\\n  --memory=8192 \\\n  --disk-size=40g \\\n  --kubernetes-version=v1.25.0 \\\n  --addons=ingress,metrics-server,dashboard \\\n  --extra-config=apiserver.enable-admission-plugins=\"LimitRanger,ResourceQuota\"\n\n# For development with limited resources\nminikube start \\\n  --cpus=2 \\\n  --memory=4096 \\\n  --disk-size=20g\n\n# For testing production-like setup\nminikube start \\\n  --cpus=6 \\\n  --memory=16384 \\\n  --disk-size=100g \\\n  --nodes=3\n</code></pre> <p>Monitor startup:</p> <pre><code># Watch cluster status\nminikube status\n\n# View cluster info\nkubectl cluster-info\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#step-4-configure-minikube-for-mcp-mesh","title":"Step 4: Configure Minikube for MCP Mesh","text":"<p>Enable required features and addons:</p> <pre><code># Enable ingress for external access\nminikube addons enable ingress\n\n# Enable metrics for monitoring\nminikube addons enable metrics-server\n\n# Enable dashboard for visualization\nminikube addons enable dashboard\n\n# Enable registry for local image storage\nminikube addons enable registry\n\n# List all addons\nminikube addons list\n</code></pre> <p>Configure Docker to use Minikube's registry:</p> <pre><code># Point Docker to Minikube's Docker daemon\neval $(minikube docker-env)\n\n# Now Docker commands use Minikube's Docker\ndocker ps\n\n# Build images directly in Minikube\ndocker build -t mcp-mesh/agent:local .\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#step-5-set-up-storage","title":"Step 5: Set Up Storage","text":"<p>Configure persistent storage for stateful components:</p> <pre><code># Check default storage class\nkubectl get storageclass\n\n# Create a PersistentVolume for testing\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mcp-mesh-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /data/mcp-mesh\n  storageClassName: standard\nEOF\n\n# Verify storage\nkubectl get pv\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#configuration-options","title":"Configuration Options","text":"Option Description Default Recommended <code>--cpus</code> Number of CPUs 2 4 <code>--memory</code> Memory allocation (MB) 2048 8192 <code>--disk-size</code> Disk size 20g 40g <code>--nodes</code> Number of nodes 1 1 (dev), 3 (test) <code>--driver</code> Virtualization driver auto docker"},{"location":"04-kubernetes-basics/01-minikube-setup/#examples","title":"Examples","text":""},{"location":"04-kubernetes-basics/01-minikube-setup/#example-1-development-profile","title":"Example 1: Development Profile","text":"<p>Create a lightweight development cluster:</p> <pre><code># Create development profile\nminikube start -p mcp-dev \\\n  --cpus=2 \\\n  --memory=4096 \\\n  --disk-size=20g \\\n  --kubernetes-version=v1.25.0\n\n# Create namespace\nkubectl create namespace mcp-mesh\n\n# Set default namespace\nkubectl config set-context --current --namespace=mcp-mesh\n\n# Verify setup\nkubectl get nodes\nkubectl get ns\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#example-2-production-like-profile","title":"Example 2: Production-Like Profile","text":"<p>Create a multi-node cluster for testing:</p> <pre><code># Create production-like profile\nminikube start -p mcp-prod \\\n  --cpus=6 \\\n  --memory=16384 \\\n  --disk-size=100g \\\n  --nodes=3 \\\n  --kubernetes-version=v1.25.0 \\\n  --extra-config=kubelet.max-pods=110 \\\n  --extra-config=apiserver.enable-admission-plugins=\"PodSecurityPolicy\"\n\n# Label nodes for workload placement\nkubectl label nodes mcp-prod-m02 node-role.kubernetes.io/worker=true\nkubectl label nodes mcp-prod-m03 node-role.kubernetes.io/worker=true\n\n# Add taints for control plane\nkubectl taint nodes mcp-prod control-plane=true:NoSchedule\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Resource Planning: Allocate at least 4GB RAM for MCP Mesh</li> <li>Profile Management: Use profiles for different environments</li> <li>Image Caching: Pre-pull images to speed up deployments</li> <li>Addon Selection: Only enable necessary addons to save resources</li> <li>Regular Cleanup: Delete unused clusters to free resources</li> </ol>"},{"location":"04-kubernetes-basics/01-minikube-setup/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"04-kubernetes-basics/01-minikube-setup/#pitfall-1-insufficient-resources","title":"Pitfall 1: Insufficient Resources","text":"<p>Problem: Pods stuck in Pending state due to resource constraints</p> <p>Solution: Increase cluster resources:</p> <pre><code># Stop current cluster\nminikube stop\n\n# Start with more resources\nminikube start --cpus=4 --memory=8192\n\n# Or resize existing cluster (experimental)\nminikube config set memory 8192\nminikube config set cpus 4\nminikube stop &amp;&amp; minikube start\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#pitfall-2-image-pull-errors","title":"Pitfall 2: Image Pull Errors","text":"<p>Problem: Kubernetes can't pull Docker images built locally</p> <p>Solution: Use Minikube's Docker daemon:</p> <pre><code># Configure Docker to use Minikube\neval $(minikube docker-env)\n\n# Build image in Minikube\ndocker build -t mcp-mesh/agent:local .\n\n# Use in Kubernetes with imagePullPolicy: Never\nkubectl run test --image=mcp-mesh/agent:local --image-pull-policy=Never\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#testing","title":"Testing","text":""},{"location":"04-kubernetes-basics/01-minikube-setup/#verify-cluster-health","title":"Verify Cluster Health","text":"<pre><code>#!/bin/bash\n# test_minikube_setup.sh\n\necho \"Testing Minikube setup for MCP Mesh...\"\n\n# Check cluster status\nif ! minikube status | grep -q \"Running\"; then\n  echo \"ERROR: Minikube not running\"\n  exit 1\nfi\n\n# Check Kubernetes connectivity\nif ! kubectl get nodes | grep -q \"Ready\"; then\n  echo \"ERROR: Kubernetes not ready\"\n  exit 1\nfi\n\n# Check required addons\nfor addon in ingress metrics-server; do\n  if ! minikube addons list | grep \"$addon\" | grep -q \"enabled\"; then\n    echo \"WARNING: Addon $addon not enabled\"\n  fi\ndone\n\n# Check resources\nMIN_CPU=2\nMIN_MEM=4096\n\nCURRENT_CPU=$(minikube config get cpus)\nCURRENT_MEM=$(minikube config get memory)\n\nif [ \"$CURRENT_CPU\" -lt \"$MIN_CPU\" ]; then\n  echo \"WARNING: CPU allocation ($CURRENT_CPU) below recommended ($MIN_CPU)\"\nfi\n\nif [ \"$CURRENT_MEM\" -lt \"$MIN_MEM\" ]; then\n  echo \"WARNING: Memory allocation ($CURRENT_MEM) below recommended ($MIN_MEM)\"\nfi\n\necho \"Minikube setup check complete!\"\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#performance-test","title":"Performance Test","text":"<pre><code># Test cluster performance\nkubectl create namespace perf-test\n\n# Deploy test workload\nkubectl run perf-test --image=busybox \\\n  --namespace=perf-test \\\n  --command -- sh -c \"while true; do echo 'Running'; sleep 1; done\"\n\n# Measure pod startup time\ntime kubectl wait --for=condition=ready pod/perf-test -n perf-test\n\n# Cleanup\nkubectl delete namespace perf-test\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"04-kubernetes-basics/01-minikube-setup/#access-kubernetes-dashboard","title":"Access Kubernetes Dashboard","text":"<pre><code># Start dashboard\nminikube dashboard\n\n# Or get URL only\nminikube dashboard --url\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#monitor-resource-usage","title":"Monitor Resource Usage","text":"<pre><code># Check node resources\nkubectl top nodes\n\n# Check pod resources\nkubectl top pods -n mcp-mesh\n\n# View Minikube logs\nminikube logs\n\n# SSH into Minikube VM\nminikube ssh\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#debug-networking","title":"Debug Networking","text":"<pre><code># Test service connectivity\nminikube service list\n\n# Get service URL\nminikube service mcp-mesh-registry -n mcp-mesh --url\n\n# Test DNS resolution\nkubectl run -it --rm debug --image=busybox --restart=Never -- nslookup kubernetes\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"04-kubernetes-basics/01-minikube-setup/#issue-1-minikube-wont-start","title":"Issue 1: Minikube Won't Start","text":"<p>Symptoms: <code>minikube start</code> fails with error</p> <p>Cause: Driver issues or insufficient resources</p> <p>Solution:</p> <pre><code># Clean up existing cluster\nminikube delete\n\n# Try different driver\nminikube start --driver=docker\n\n# Check system resources\n# macOS: Check Activity Monitor\n# Linux: free -h\n# Windows: Task Manager\n</code></pre>"},{"location":"04-kubernetes-basics/01-minikube-setup/#issue-2-kubectl-connection-refused","title":"Issue 2: kubectl Connection Refused","text":"<p>Symptoms: <code>kubectl get nodes</code> returns connection error</p> <p>Cause: kubectl context not set correctly</p> <p>Solution:</p> <pre><code># Set kubectl context\nminikube kubectl -- get nodes\n\n# Or update kubectl config\nminikube update-context\n\n# Verify context\nkubectl config current-context\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"04-kubernetes-basics/01-minikube-setup/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Resource Constraints: Limited by host machine resources</li> <li>Networking: Some advanced networking features unavailable</li> <li>Multi-node: Performance overhead for multi-node clusters</li> <li>Storage: Local storage only, no distributed storage</li> </ul>"},{"location":"04-kubernetes-basics/01-minikube-setup/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add kind and k3s alternatives</li> <li> Document WSL2 specific setup</li> <li> Add automated setup script</li> <li> Include resource monitoring dashboard</li> <li> Add IPv6 configuration</li> </ul>"},{"location":"04-kubernetes-basics/01-minikube-setup/#summary","title":"Summary","text":"<p>You now have a local Kubernetes cluster configured for MCP Mesh development:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Minikube running with appropriate resources</li> <li>\ud83d\udd11 Required addons enabled for MCP Mesh</li> <li>\ud83d\udd11 Docker configured to build images in Minikube</li> <li>\ud83d\udd11 Storage and networking ready for deployments</li> </ul>"},{"location":"04-kubernetes-basics/01-minikube-setup/#next-steps","title":"Next Steps","text":"<p>Now let's deploy the MCP Mesh registry to your cluster.</p> <p>Continue to Local Registry Configuration \u2192</p> <p>\ud83d\udca1 Tip: Use <code>minikube tunnel</code> in a separate terminal to access LoadBalancer services locally</p> <p>\ud83d\udcda Reference: Minikube Documentation</p> <p>\ud83e\uddea Try It: Create multiple Minikube profiles for different testing scenarios</p>"},{"location":"04-kubernetes-basics/02-local-registry/","title":"Local Registry Configuration","text":"<p>Deploy and configure the MCP Mesh registry on Kubernetes for agent coordination</p>"},{"location":"04-kubernetes-basics/02-local-registry/#overview","title":"Overview","text":"<p>The MCP Mesh registry is the central coordination point for all agents, managing service discovery, health checks, and capability routing. This guide covers deploying the registry as a StatefulSet on Kubernetes, configuring persistent storage, and setting up high availability.</p> <p>We'll explore both simple single-instance deployments for development and multi-replica configurations for production readiness.</p>"},{"location":"04-kubernetes-basics/02-local-registry/#key-concepts","title":"Key Concepts","text":"<ul> <li>StatefulSet: Provides stable network identities and persistent storage</li> <li>Headless Service: Enables direct pod-to-pod communication</li> <li>Leader Election: Ensures consistency in multi-replica deployments</li> <li>Persistent Volumes: Store registry data across pod restarts</li> <li>ConfigMaps/Secrets: Externalize configuration and credentials</li> </ul>"},{"location":"04-kubernetes-basics/02-local-registry/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"04-kubernetes-basics/02-local-registry/#step-1-create-namespace-and-prerequisites","title":"Step 1: Create Namespace and Prerequisites","text":"<p>Set up the MCP Mesh namespace and basic resources:</p> <pre><code># Create namespace\nkubectl create namespace mcp-mesh\n\n# Set as default namespace\nkubectl config set-context --current --namespace=mcp-mesh\n\n# Create RBAC resources\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: mcp-mesh-registry-leader-election\n  namespace: mcp-mesh\nrules:\n- apiGroups: [\"coordination.k8s.io\"]\n  resources: [\"leases\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: mcp-mesh-registry-leader-election\n  namespace: mcp-mesh\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: mcp-mesh-registry-leader-election\nsubjects:\n- kind: ServiceAccount\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\nEOF\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#step-2-configure-registry-storage","title":"Step 2: Configure Registry Storage","text":"<p>Create ConfigMap for registry configuration:</p> <pre><code># registry-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-registry-config\n  namespace: mcp-mesh\ndata:\n  # Database configuration\n  DATABASE_TYPE: \"sqlite\" # Use sqlite for local development\n  DATABASE_PATH: \"/data/registry.db\"\n\n  # Registry settings\n  REGISTRY_PORT: \"8000\"\n  METRICS_PORT: \"9090\"\n  LOG_LEVEL: \"info\"\n\n  # Health check settings\n  HEALTH_CHECK_INTERVAL: \"30s\"\n  AGENT_TIMEOUT: \"60s\"\n\n  # Leader election (for multi-replica)\n  ENABLE_LEADER_ELECTION: \"true\"\n  LEADER_ELECTION_LEASE_DURATION: \"15s\"\n  LEADER_ELECTION_RENEW_DEADLINE: \"10s\"\n  LEADER_ELECTION_RETRY_PERIOD: \"2s\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mcp-registry-secret\n  namespace: mcp-mesh\ntype: Opaque\nstringData:\n  # Add any sensitive configuration here\n  AUTH_TOKEN: \"dev-token-change-in-production\"\n  ENCRYPTION_KEY: \"dev-key-32-bytes-change-in-prod!\"\n</code></pre> <p>Apply the configuration:</p> <pre><code>kubectl apply -f registry-config.yaml\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#step-3-deploy-registry-statefulset","title":"Step 3: Deploy Registry StatefulSet","text":"<p>Create the registry StatefulSet for development:</p> <pre><code># registry-statefulset-dev.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcp-mesh-registry-headless\n  namespace: mcp-mesh\nspec:\n  clusterIP: None\n  selector:\n    app.kubernetes.io/name: mcp-mesh-registry\n  ports:\n    - name: http\n      port: 8000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\nspec:\n  type: ClusterIP\n  selector:\n    app.kubernetes.io/name: mcp-mesh-registry\n  ports:\n    - name: http\n      port: 8000\n      targetPort: 8000\n    - name: metrics\n      port: 9090\n      targetPort: 9090\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\nspec:\n  serviceName: mcp-mesh-registry-headless\n  replicas: 1 # Single instance for development\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: mcp-mesh-registry\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: mcp-mesh-registry\n        app.kubernetes.io/component: registry\n    spec:\n      serviceAccountName: mcp-mesh-registry\n      containers:\n        - name: registry\n          image: mcp-mesh/registry:latest\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 8000\n            - name: metrics\n              containerPort: 9090\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          envFrom:\n            - configMapRef:\n                name: mcp-registry-config\n            - secretRef:\n                name: mcp-registry-secret\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 10\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: http\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n          volumeMounts:\n            - name: data\n              mountPath: /data\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n      spec:\n        accessModes: [\"ReadWriteOnce\"]\n        resources:\n          requests:\n            storage: 5Gi\n</code></pre> <p>Deploy the registry:</p> <pre><code>kubectl apply -f registry-statefulset-dev.yaml\n\n# Wait for registry to be ready\nkubectl wait --for=condition=ready pod -l app.kubernetes.io/name=mcp-mesh-registry --timeout=60s\n\n# Check status\nkubectl get statefulset,pod,svc,pvc -l app.kubernetes.io/name=mcp-mesh-registry\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#step-4-verify-registry-operation","title":"Step 4: Verify Registry Operation","text":"<p>Test registry health and functionality:</p> <pre><code># Port forward to access registry\nkubectl port-forward svc/mcp-mesh-registry 8000:8000 &amp;\n\n# Check health endpoint\ncurl http://localhost:8000/health\n\n# Check metrics\ncurl http://localhost:8000/metrics\n\n# View registry logs\nkubectl logs -f mcp-mesh-registry-0\n\n# Check API endpoints (matches actual implementation)\ncurl http://localhost:8000/agents\ncurl http://localhost:8000/capabilities\ncurl http://localhost:8000/health\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#step-5-configure-for-high-availability","title":"Step 5: Configure for High Availability","text":"<p>For production, deploy with multiple replicas:</p> <pre><code># registry-ha.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\nspec:\n  serviceName: mcp-mesh-registry-headless\n  replicas: 3 # High availability with 3 replicas\n  podManagementPolicy: Parallel\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchLabels:\n                  app.kubernetes.io/name: mcp-mesh-registry\n              topologyKey: kubernetes.io/hostname\n      containers:\n        - name: registry\n          env:\n            - name: ENABLE_LEADER_ELECTION\n              value: \"true\"\n            - name: REGISTRY_INSTANCE_ID\n              value: \"$(POD_NAME)\"\n          # ... rest of container spec\n</code></pre> <p>Apply HA configuration:</p> <pre><code># Scale up existing StatefulSet\nkubectl scale statefulset mcp-mesh-registry --replicas=3\n\n# Or apply new configuration\nkubectl apply -f registry-ha.yaml\n\n# Monitor rollout\nkubectl rollout status statefulset mcp-mesh-registry\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#configuration-options","title":"Configuration Options","text":"Environment Variable Description Default Example <code>DATABASE_TYPE</code> Database backend sqlite postgresql, mysql <code>DATABASE_PATH</code> SQLite file path /data/registry.db /data/mesh.db <code>REGISTRY_PORT</code> HTTP service port 8000 9000 <code>LOG_LEVEL</code> Logging verbosity info debug, warn, error <code>ENABLE_LEADER_ELECTION</code> Enable HA mode false true <code>HEALTH_CHECK_INTERVAL</code> Agent health check frequency 30s 60s"},{"location":"04-kubernetes-basics/02-local-registry/#examples","title":"Examples","text":""},{"location":"04-kubernetes-basics/02-local-registry/#example-1-development-setup-with-local-image","title":"Example 1: Development Setup with Local Image","text":"<pre><code># Build registry image locally in Minikube\neval $(minikube docker-env)\ndocker build -t mcp-mesh/registry:dev ./cmd/registry\n\n# Deploy with local image\nkubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mcp-mesh-registry-dev\n  namespace: mcp-mesh\nspec:\n  replicas: 1\n  serviceName: registry-dev\n  selector:\n    matchLabels:\n      app: registry-dev\n  template:\n    metadata:\n      labels:\n        app: registry-dev\n    spec:\n      containers:\n      - name: registry\n        image: mcp-mesh/registry:dev\n        imagePullPolicy: Never  # Use local image\n        env:\n        - name: LOG_LEVEL\n          value: debug\n        - name: DATABASE_TYPE\n          value: sqlite\n        volumeMounts:\n        - name: data\n          mountPath: /data\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 1Gi\nEOF\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#example-2-production-setup-with-postgresql","title":"Example 2: Production Setup with PostgreSQL","text":"<pre><code># postgres-registry.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secret\n  namespace: mcp-mesh\nstringData:\n  POSTGRES_USER: mcpmesh\n  POSTGRES_PASSWORD: changeme\n  POSTGRES_DB: registry\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: mcp-mesh\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: postgres:15-alpine\n          envFrom:\n            - secretRef:\n                name: postgres-secret\n          volumeMounts:\n            - name: data\n              mountPath: /var/lib/postgresql/data\n      volumes:\n        - name: data\n          persistentVolumeClaim:\n            claimName: postgres-pvc\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-registry-config\n  namespace: mcp-mesh\ndata:\n  DATABASE_TYPE: postgresql\n  DATABASE_HOST: postgres\n  DATABASE_PORT: \"5432\"\n  DATABASE_NAME: registry\n  DATABASE_USER: mcpmesh\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#best-practices","title":"Best Practices","text":"<ol> <li>Use StatefulSet: Provides stable network identity and storage</li> <li>Configure Anti-Affinity: Spread replicas across nodes</li> <li>Set Resource Limits: Prevent registry from consuming too many resources</li> <li>Enable Monitoring: Export metrics for Prometheus</li> <li>Backup Data: Regular backups of registry database</li> </ol>"},{"location":"04-kubernetes-basics/02-local-registry/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"04-kubernetes-basics/02-local-registry/#pitfall-1-pvc-stuck-in-pending","title":"Pitfall 1: PVC Stuck in Pending","text":"<p>Problem: PersistentVolumeClaim won't bind</p> <p>Solution: Check StorageClass availability:</p> <pre><code># List available storage classes\nkubectl get storageclass\n\n# Create PVC with specific storage class\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: registry-data\n  namespace: mcp-mesh\nspec:\n  accessModes: [\"ReadWriteOnce\"]\n  storageClassName: standard  # Use available class\n  resources:\n    requests:\n      storage: 5Gi\nEOF\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#pitfall-2-registry-pods-not-starting","title":"Pitfall 2: Registry Pods Not Starting","text":"<p>Problem: Pods stuck in CrashLoopBackOff</p> <p>Solution: Check logs and events:</p> <pre><code># View pod logs\nkubectl logs mcp-mesh-registry-0 -p\n\n# Check events\nkubectl describe pod mcp-mesh-registry-0\n\n# Common fixes:\n# 1. Fix image name/tag\n# 2. Correct environment variables\n# 3. Ensure volume permissions\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#testing","title":"Testing","text":""},{"location":"04-kubernetes-basics/02-local-registry/#registry-health-check-script","title":"Registry Health Check Script","text":"<pre><code>#!/bin/bash\n# test_registry_health.sh\n\nNAMESPACE=mcp-mesh\nREGISTRY_SVC=mcp-mesh-registry\n\necho \"Testing MCP Mesh Registry deployment...\"\n\n# Check StatefulSet\nif ! kubectl get statefulset mcp-mesh-registry -n $NAMESPACE &amp;&gt;/dev/null; then\n  echo \"ERROR: Registry StatefulSet not found\"\n  exit 1\nfi\n\n# Check all pods are ready\nREADY_PODS=$(kubectl get statefulset mcp-mesh-registry -n $NAMESPACE -o jsonpath='{.status.readyReplicas}')\nDESIRED_PODS=$(kubectl get statefulset mcp-mesh-registry -n $NAMESPACE -o jsonpath='{.spec.replicas}')\n\nif [ \"$READY_PODS\" != \"$DESIRED_PODS\" ]; then\n  echo \"ERROR: Only $READY_PODS/$DESIRED_PODS pods ready\"\n  exit 1\nfi\n\n# Test service endpoint using actual service name\nkubectl run test-curl --rm -it --image=curlimages/curl --restart=Never -- \\\n  curl -s http://mcp-mesh-registry.mcp-mesh:8000/health\n\necho \"Registry health check passed!\"\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#load-test-registry","title":"Load Test Registry","text":"<pre><code># test_registry_load.py\nimport asyncio\nimport aiohttp\nimport time\n\nasync def register_agent(session, agent_id):\n    \"\"\"Register a test agent\"\"\"\n    data = {\n        \"id\": f\"test-agent-{agent_id}\",\n        \"capabilities\": [\"test\"],\n        \"endpoint\": f\"http://agent-{agent_id}:8080\"\n    }\n\n    async with session.post(\n        \"http://localhost:8000/agents\",\n        json=data\n    ) as response:\n        return response.status == 200\n\nasync def load_test():\n    \"\"\"Test registry under load\"\"\"\n    async with aiohttp.ClientSession() as session:\n        start = time.time()\n\n        # Register 100 agents concurrently\n        tasks = [register_agent(session, i) for i in range(100)]\n        results = await asyncio.gather(*tasks)\n\n        duration = time.time() - start\n        success_rate = sum(results) / len(results)\n\n        print(f\"Registered {len(results)} agents in {duration:.2f}s\")\n        print(f\"Success rate: {success_rate * 100:.1f}%\")\n\nif __name__ == \"__main__\":\n    asyncio.run(load_test())\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"04-kubernetes-basics/02-local-registry/#view-registry-metrics","title":"View Registry Metrics","text":"<pre><code># Port forward to metrics port\nkubectl port-forward svc/mcp-mesh-registry 9090:9090\n\n# Query metrics\ncurl http://localhost:9090/metrics | grep mcp_\n\n# Common metrics:\n# mcp_registry_agents_total - Total registered agents\n# mcp_registry_requests_total - API request count\n# mcp_registry_errors_total - Error count\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#debug-registry-issues","title":"Debug Registry Issues","text":"<pre><code># Enter registry pod\nkubectl exec -it mcp-mesh-registry-0 -- sh\n\n# Inside pod:\n# Check database\nsqlite3 /data/registry.db \"SELECT * FROM agents;\"\n\n# Test internal endpoints\nwget -O- http://localhost:8000/health\n\n# Check disk usage\ndf -h /data\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"04-kubernetes-basics/02-local-registry/#issue-1-leader-election-failures","title":"Issue 1: Leader Election Failures","text":"<p>Symptoms: Multiple registry instances think they're leader</p> <p>Cause: Network partitions or timeout issues</p> <p>Solution:</p> <pre><code># Adjust leader election timeouts\nenv:\n  - name: LEADER_ELECTION_LEASE_DURATION\n    value: \"30s\" # Increase from 15s\n  - name: LEADER_ELECTION_RENEW_DEADLINE\n    value: \"20s\" # Increase from 10s\n</code></pre>"},{"location":"04-kubernetes-basics/02-local-registry/#issue-2-slow-registry-queries","title":"Issue 2: Slow Registry Queries","text":"<p>Symptoms: Agent registration/discovery taking too long</p> <p>Cause: Database performance or resource constraints</p> <p>Solution:</p> <pre><code># Increase resources\nkubectl patch statefulset mcp-mesh-registry --type='json' -p='[\n  {\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/resources/requests/memory\", \"value\":\"256Mi\"},\n  {\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/resources/limits/memory\", \"value\":\"1Gi\"}\n]'\n\n# Add database indexes (PostgreSQL)\nkubectl exec -it postgres-0 -- psql -U mcpmesh -d registry -c \"\nCREATE INDEX idx_agents_capability ON agents(capability);\nCREATE INDEX idx_agents_last_seen ON agents(last_seen);\n\"\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"04-kubernetes-basics/02-local-registry/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>SQLite: Not suitable for high-concurrency production use</li> <li>Storage: StatefulSet volumes can't be easily resized</li> <li>Minikube: Limited to single-node storage</li> <li>Leader Election: Requires Kubernetes 1.14+</li> </ul>"},{"location":"04-kubernetes-basics/02-local-registry/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Helm chart for registry deployment</li> <li> Document external database setup</li> <li> Add backup/restore procedures</li> <li> Create registry operator</li> <li> Add multi-region deployment guide</li> </ul>"},{"location":"04-kubernetes-basics/02-local-registry/#summary","title":"Summary","text":"<p>You've successfully deployed the MCP Mesh registry on Kubernetes:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Registry running as StatefulSet with persistent storage</li> <li>\ud83d\udd11 Services configured for internal and external access</li> <li>\ud83d\udd11 High availability options for production</li> <li>\ud83d\udd11 Monitoring and health checks enabled</li> </ul>"},{"location":"04-kubernetes-basics/02-local-registry/#next-steps","title":"Next Steps","text":"<p>Now let's deploy agents using kubectl.</p> <p>Continue to Deploying with kubectl \u2192</p> <p>\ud83d\udca1 Tip: Use <code>kubectl logs -f statefulset/mcp-mesh-registry --all-containers=true</code> to stream logs from all registry pods</p> <p>\ud83d\udcda Reference: Kubernetes StatefulSet Documentation</p> <p>\ud83e\uddea Try It: Scale the registry to 3 replicas and observe leader election in action</p>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/","title":"Deploying with kubectl","text":"<p>Deploy MCP Mesh agents to Kubernetes using kubectl and YAML manifests</p>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#overview","title":"Overview","text":"<p>This guide covers deploying MCP Mesh agents to Kubernetes using kubectl commands and YAML manifests. You'll learn how to create Deployments, configure Services, manage ConfigMaps and Secrets, and monitor your agents. We'll start with simple deployments and progress to more complex configurations.</p> <p>Understanding kubectl deployment is essential even if you plan to use Helm or operators, as it provides the foundation for all Kubernetes operations.</p>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#key-concepts","title":"Key Concepts","text":"<ul> <li>Deployments: Manage stateless agent replicas</li> <li>Services: Expose agents for discovery and load balancing</li> <li>ConfigMaps: External configuration management</li> <li>Secrets: Sensitive data like API keys</li> <li>Labels/Selectors: Organize and select resources</li> </ul>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"04-kubernetes-basics/03-kubectl-deployment/#step-1-prepare-agent-container-image","title":"Step 1: Prepare Agent Container Image","text":"<p>First, ensure your agent is containerized:</p> <pre><code># Dockerfile for MCP Mesh agent\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install MCP Mesh from source\nCOPY . .\nRUN make install-dev\n\n# Non-root user\nRUN useradd -m -u 1000 mcp &amp;&amp; chown -R mcp:mcp /app\nUSER mcp\n\n# Agent configuration\nENV MCP_MESH_REGISTRY_URL=http://mcp-mesh-registry:8000\nENV PYTHONUNBUFFERED=1\n\nEXPOSE 8081\n\nCMD [\"./bin/meshctl\", \"start\", \"examples/simple/my_agent.py\"]\n</code></pre> <p>Build and push the image:</p> <pre><code># For Minikube (local registry)\neval $(minikube docker-env)\ndocker build -t mcp-mesh/my-agent:0.2 .\n\n# For remote registry\ndocker build -t myregistry.io/mcp-mesh/my-agent:0.2 .\ndocker push myregistry.io/mcp-mesh/my-agent:0.2\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#step-2-create-basic-agent-deployment","title":"Step 2: Create Basic Agent Deployment","text":"<p>Create a simple deployment manifest:</p> <pre><code># my-agent-deployment.yaml - Following actual K8s examples\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-agent\n  namespace: mcp-mesh\n  labels:\n    app.kubernetes.io/name: my-agent # \u2190 Critical: Used for SERVICE_NAME\n    app.kubernetes.io/component: agent\n    app.kubernetes.io/part-of: mcp-mesh\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: my-agent\n      app.kubernetes.io/component: agent\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: my-agent # \u2190 Must match for auto-detection\n        app.kubernetes.io/component: agent\n    spec:\n      containers:\n        - name: agent\n          image: mcpmesh/python-runtime:0.5\n          imagePullPolicy: IfNotPresent\n          command: [\"python\", \"/app/agent.py\"]\n          ports:\n            - containerPort: 8080 # \u2190 Standard port 8080\n              name: http\n          env:\n            # Registry connection - configurable for federated networks\n            - name: MCP_MESH_REGISTRY_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: mcp-agent-config\n                  key: REGISTRY_HOST\n            - name: MCP_MESH_REGISTRY_PORT\n              valueFrom:\n                configMapKeyRef:\n                  name: mcp-agent-config\n                  key: REGISTRY_PORT\n            # HTTP server binding - bind to all interfaces\n            - name: HOST\n              value: \"0.0.0.0\"\n            # \ud83c\udfaf Kubernetes service discovery - auto-detect from labels\n            - name: SERVICE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.labels['app.kubernetes.io/name']\n            - name: NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            # Fallback pod IP for backward compatibility\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: MCP_MESH_AGENT_NAME\n              value: \"my-agent\"\n          envFrom:\n            - configMapRef:\n                name: mcp-agent-config\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 15\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 10\n            periodSeconds: 5\n          startupProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 5\n            periodSeconds: 10\n            failureThreshold: 30\n</code></pre> <p>Deploy the agent:</p> <pre><code># Apply the deployment\nkubectl apply -f my-agent-deployment.yaml\n\n# Check deployment status\nkubectl get deployment my-agent -n mcp-mesh\n\n# Watch pods come up\nkubectl get pods -n mcp-mesh -l app=my-agent -w\n\n# Check logs\nkubectl logs -n mcp-mesh -l app=my-agent\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#step-3-configure-agent-service","title":"Step 3: Configure Agent Service","text":"<p>Expose the agent with a Service:</p> <pre><code># my-agent-service.yaml - Must match deployment labels exactly\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-agent # \u2190 Must match app.kubernetes.io/name for SERVICE_NAME\n  namespace: mcp-mesh\n  labels:\n    app.kubernetes.io/name: my-agent\n    app.kubernetes.io/component: agent\nspec:\n  type: ClusterIP\n  selector:\n    app.kubernetes.io/name: my-agent # \u2190 Must match deployment selector\n    app.kubernetes.io/component: agent\n  ports:\n    - name: http\n      port: 8080 # \u2190 Standard port 8080\n      targetPort: http\n      protocol: TCP\n    - name: metrics\n      port: 9090\n      targetPort: 9090\n      protocol: TCP\n</code></pre> <p>Apply and test the service:</p> <pre><code># Create service\nkubectl apply -f my-agent-service.yaml\n\n# Check service endpoints\nkubectl get endpoints my-agent -n mcp-mesh\n\n# Test service from another pod\nkubectl run -it --rm debug --image=busybox --restart=Never -- \\\n  wget -O- http://my-agent.mcp-mesh:8081/health\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#step-4-manage-configuration-with-configmaps","title":"Step 4: Manage Configuration with ConfigMaps","text":"<p>Create a ConfigMap for agent configuration:</p> <pre><code># agent-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-agent-config\n  namespace: mcp-mesh\ndata:\n  config.yaml: |\n    agent:\n      name: my-agent\n      capabilities:\n        - data_processing\n        - analytics\n      dependencies:\n        - database_query\n        - cache_get\n\n    logging:\n      level: info\n      format: json\n\n    features:\n      enable_metrics: true\n      enable_tracing: false\n\n  # Additional configuration files\n  rules.json: |\n    {\n      \"processing_rules\": [\n        {\"pattern\": \"*.csv\", \"handler\": \"csv_processor\"},\n        {\"pattern\": \"*.json\", \"handler\": \"json_processor\"}\n      ]\n    }\n</code></pre> <p>Update deployment to use ConfigMap:</p> <pre><code># Add to deployment spec\nspec:\n  template:\n    spec:\n      containers:\n        - name: agent\n          volumeMounts:\n            - name: config\n              mountPath: /etc/mcp-mesh\n              readOnly: true\n          env:\n            - name: CONFIG_PATH\n              value: /etc/mcp-mesh/config.yaml\n      volumes:\n        - name: config\n          configMap:\n            name: my-agent-config\n</code></pre> <p>Apply configuration:</p> <pre><code># Create ConfigMap\nkubectl apply -f agent-config.yaml\n\n# Update deployment\nkubectl apply -f my-agent-deployment.yaml\n\n# Verify config is mounted\nkubectl exec -it &lt;pod-name&gt; -n mcp-mesh -- ls -la /etc/mcp-mesh/\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#step-5-handle-secrets-securely","title":"Step 5: Handle Secrets Securely","text":"<p>Create secrets for sensitive data:</p> <pre><code># Create secret from literals\nkubectl create secret generic my-agent-secrets \\\n  --from-literal=api-key=supersecret123 \\\n  --from-literal=db-password=dbpass456 \\\n  -n mcp-mesh\n\n# Or from files\nkubectl create secret generic my-agent-certs \\\n  --from-file=tls.crt=path/to/cert.pem \\\n  --from-file=tls.key=path/to/key.pem \\\n  -n mcp-mesh\n</code></pre> <p>Use secrets in deployment:</p> <pre><code># Add to deployment spec\nspec:\n  template:\n    spec:\n      containers:\n        - name: agent\n          env:\n            - name: API_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: my-agent-secrets\n                  key: api-key\n            - name: DB_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: my-agent-secrets\n                  key: db-password\n          volumeMounts:\n            - name: certs\n              mountPath: /etc/ssl/certs\n              readOnly: true\n      volumes:\n        - name: certs\n          secret:\n            secretName: my-agent-certs\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#configuration-options","title":"Configuration Options","text":"kubectl Option Description Example <code>--namespace</code> Target namespace <code>-n mcp-mesh</code> <code>--selector</code> Label selector <code>-l app=my-agent</code> <code>--output</code> Output format <code>-o yaml</code>, <code>-o json</code> <code>--watch</code> Watch for changes <code>-w</code> <code>--dry-run</code> Test without applying <code>--dry-run=client</code>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#examples","title":"Examples","text":""},{"location":"04-kubernetes-basics/03-kubectl-deployment/#example-1-multi-environment-deployment","title":"Example 1: Multi-Environment Deployment","text":"<p>Deploy the same agent with different configurations:</p> <pre><code># Development environment\nkubectl apply -f my-agent-deployment.yaml \\\n  --dry-run=client -o yaml | \\\n  sed 's/replicas: 2/replicas: 1/' | \\\n  kubectl apply -f - -n mcp-mesh-dev\n\n# Production environment with overrides\nkubectl apply -f my-agent-deployment.yaml \\\n  --dry-run=client -o yaml | \\\n  sed 's/replicas: 2/replicas: 5/' | \\\n  sed 's/cpu: 100m/cpu: 500m/' | \\\n  kubectl apply -f - -n mcp-mesh-prod\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#example-2-rolling-update-strategy","title":"Example 2: Rolling Update Strategy","text":"<p>Configure zero-downtime updates:</p> <pre><code># rolling-update-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: analytics-agent\n  namespace: mcp-mesh\nspec:\n  replicas: 4\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1 # One extra pod during update\n      maxUnavailable: 0 # No pods down during update\n  minReadySeconds: 30 # Wait 30s before considering pod ready\n  selector:\n    matchLabels:\n      app: analytics-agent\n  template:\n    metadata:\n      labels:\n        app: analytics-agent\n        version: v2.0.0\n    spec:\n      containers:\n        - name: agent\n          image: mcp-mesh/analytics-agent:v2.0.0\n          # Graceful shutdown\n          lifecycle:\n            preStop:\n              exec:\n                command: [\"/bin/sh\", \"-c\", \"sleep 15\"]\n</code></pre> <p>Perform rolling update:</p> <pre><code># Update image\nkubectl set image deployment/analytics-agent \\\n  agent=mcp-mesh/analytics-agent:v2.1.0 \\\n  -n mcp-mesh\n\n# Monitor rollout\nkubectl rollout status deployment/analytics-agent -n mcp-mesh\n\n# Rollback if needed\nkubectl rollout undo deployment/analytics-agent -n mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#best-practices","title":"Best Practices","text":"<ol> <li>Use Declarative Configuration: Always use YAML files, not imperative commands</li> <li>Label Consistently: Follow Kubernetes labeling conventions</li> <li>Set Resource Limits: Prevent agents from consuming too many resources</li> <li>Configure Health Checks: Ensure Kubernetes knows when pods are healthy</li> <li>Use Namespaces: Isolate environments and teams</li> </ol>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"04-kubernetes-basics/03-kubectl-deployment/#pitfall-1-image-pull-errors","title":"Pitfall 1: Image Pull Errors","text":"<p>Problem: Pods stuck in ImagePullBackOff</p> <p>Solution: Check image availability and pull secrets:</p> <pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh\n\n# For private registries, create pull secret\nkubectl create secret docker-registry regcred \\\n  --docker-server=myregistry.io \\\n  --docker-username=user \\\n  --docker-password=pass \\\n  -n mcp-mesh\n\n# Add to deployment\nspec:\n  template:\n    spec:\n      imagePullSecrets:\n      - name: regcred\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#pitfall-2-service-discovery-not-working","title":"Pitfall 2: Service Discovery Not Working","text":"<p>Problem: Agents can't find each other</p> <p>Solution: Verify service DNS:</p> <pre><code># Test DNS resolution\nkubectl run -it --rm debug --image=busybox --restart=Never -- \\\n  nslookup my-agent.mcp-mesh.svc.cluster.local\n\n# Check service endpoints\nkubectl get endpoints -n mcp-mesh\n\n# Ensure pods have correct labels\nkubectl get pods -n mcp-mesh --show-labels\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#testing","title":"Testing","text":""},{"location":"04-kubernetes-basics/03-kubectl-deployment/#deployment-validation-script","title":"Deployment Validation Script","text":"<pre><code>#!/bin/bash\n# validate_deployment.sh\n\nNAMESPACE=mcp-mesh\nDEPLOYMENT=my-agent\n\necho \"Validating deployment: $DEPLOYMENT\"\n\n# Check deployment exists\nif ! kubectl get deployment $DEPLOYMENT -n $NAMESPACE &amp;&gt;/dev/null; then\n  echo \"ERROR: Deployment not found\"\n  exit 1\nfi\n\n# Check desired replicas\nDESIRED=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o jsonpath='{.spec.replicas}')\nREADY=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o jsonpath='{.status.readyReplicas}')\n\nif [ \"$READY\" != \"$DESIRED\" ]; then\n  echo \"WARNING: Only $READY/$DESIRED replicas ready\"\nfi\n\n# Check pod health\nkubectl get pods -n $NAMESPACE -l app=$DEPLOYMENT -o wide\n\n# Test service connectivity\nSERVICE_IP=$(kubectl get svc $DEPLOYMENT -n $NAMESPACE -o jsonpath='{.spec.clusterIP}')\nkubectl run test-curl --rm -it --image=curlimages/curl --restart=Never -- \\\n  curl -s http://$SERVICE_IP:8080/health\n\necho \"Deployment validation complete\"\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#load-testing-deployed-agents","title":"Load Testing Deployed Agents","text":"<pre><code># load_test_k8s.py\nimport asyncio\nimport aiohttp\nimport kubernetes\nfrom kubernetes import client, config\n\nasync def test_agent_endpoint(session, endpoint):\n    \"\"\"Test agent health endpoint\"\"\"\n    try:\n        async with session.get(f\"http://{endpoint}/health\") as resp:\n            return resp.status == 200\n    except:\n        return False\n\nasync def load_test_k8s_agents():\n    \"\"\"Load test all agents in namespace\"\"\"\n    # Load Kubernetes config\n    config.load_incluster_config()  # If running in cluster\n    # or config.load_kube_config()  # If running locally\n\n    v1 = client.CoreV1Api()\n\n    # Get all agent services\n    services = v1.list_namespaced_service(\"mcp-mesh\")\n\n    async with aiohttp.ClientSession() as session:\n        tasks = []\n        for svc in services.items:\n            if \"agent\" in svc.metadata.name:\n                endpoint = f\"{svc.spec.cluster_ip}:8080\"\n                # Test each endpoint 100 times\n                for _ in range(100):\n                    tasks.append(test_agent_endpoint(session, endpoint))\n\n        results = await asyncio.gather(*tasks)\n        success_rate = sum(results) / len(results)\n        print(f\"Success rate: {success_rate * 100:.1f}%\")\n\nasyncio.run(load_test_k8s_agents())\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"04-kubernetes-basics/03-kubectl-deployment/#monitor-deployments","title":"Monitor Deployments","text":"<pre><code># Watch deployment status\nkubectl get deployments -n mcp-mesh -w\n\n# View deployment details\nkubectl describe deployment my-agent -n mcp-mesh\n\n# Check rollout history\nkubectl rollout history deployment/my-agent -n mcp-mesh\n\n# View pod logs\nkubectl logs -f deployment/my-agent -n mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#debug-pod-issues","title":"Debug Pod Issues","text":"<pre><code># Get pod details\nkubectl get pods -n mcp-mesh -o wide\n\n# Describe problematic pod\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh\n\n# Execute commands in pod\nkubectl exec -it &lt;pod-name&gt; -n mcp-mesh -- /bin/sh\n\n# Copy files from pod\nkubectl cp &lt;pod-name&gt;:/path/to/file ./local-file -n mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"04-kubernetes-basics/03-kubectl-deployment/#issue-1-pods-crashing-on-startup","title":"Issue 1: Pods Crashing on Startup","text":"<p>Symptoms: CrashLoopBackOff status</p> <p>Cause: Application errors or missing dependencies</p> <p>Solution:</p> <pre><code># Check logs from previous run\nkubectl logs &lt;pod-name&gt; -n mcp-mesh --previous\n\n# Common fixes:\n# 1. Check environment variables\nkubectl get deployment my-agent -o yaml | grep -A20 env:\n\n# 2. Verify ConfigMap/Secret exists\nkubectl get configmap,secret -n mcp-mesh\n\n# 3. Test with debug pod\nkubectl run -it debug --image=mcp-mesh/my-agent:0.2 --rm -- /bin/sh\n</code></pre>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#issue-2-deployment-stuck-updating","title":"Issue 2: Deployment Stuck Updating","text":"<p>Symptoms: Rollout not progressing</p> <p>Cause: New pods failing health checks</p> <p>Solution:</p> <pre><code># Check rollout status\nkubectl rollout status deployment/my-agent -n mcp-mesh\n\n# Pause rollout\nkubectl rollout pause deployment/my-agent -n mcp-mesh\n\n# Fix issues and resume\nkubectl rollout resume deployment/my-agent -n mcp-mesh\n\n# Or rollback\nkubectl rollout undo deployment/my-agent -n mcp-mesh\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>kubectl apply: Limited to 1MB manifests</li> <li>Port forwarding: Single connection only</li> <li>Exec: Requires container shell</li> <li>Windows: Some commands require PowerShell</li> </ul>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Kustomize examples</li> <li> Document kubectl plugins for MCP Mesh</li> <li> Add GitOps deployment patterns</li> <li> Create kubectl cheat sheet</li> <li> Add multi-cluster deployment</li> </ul>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#summary","title":"Summary","text":"<p>You can now deploy MCP Mesh agents using kubectl:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Create and manage Deployments for agents</li> <li>\ud83d\udd11 Configure Services for agent discovery</li> <li>\ud83d\udd11 Use ConfigMaps and Secrets for configuration</li> <li>\ud83d\udd11 Implement rolling updates and rollbacks</li> </ul>"},{"location":"04-kubernetes-basics/03-kubectl-deployment/#next-steps","title":"Next Steps","text":"<p>Let's explore service discovery in Kubernetes.</p> <p>Continue to Service Discovery in K8s \u2192</p> <p>\ud83d\udca1 Tip: Use <code>kubectl diff -f manifest.yaml</code> to preview changes before applying</p> <p>\ud83d\udcda Reference: kubectl Reference Documentation</p> <p>\ud83e\uddea Try It: Deploy an agent with 3 replicas and perform a zero-downtime rolling update</p>"},{"location":"04-kubernetes-basics/04-service-discovery/","title":"Service Discovery in K8s","text":"<p>Understanding how MCP Mesh agents discover and communicate with each other in Kubernetes</p>"},{"location":"04-kubernetes-basics/04-service-discovery/#overview","title":"Overview","text":"<p>Service discovery is crucial for MCP Mesh agents to find and communicate with each other in a dynamic Kubernetes environment. This guide explains how Kubernetes DNS works, how agents register with the MCP Mesh registry, and how to configure service discovery for different deployment patterns.</p> <p>We'll cover DNS-based discovery, headless services, service mesh integration, and troubleshooting connectivity issues between agents.</p>"},{"location":"04-kubernetes-basics/04-service-discovery/#key-concepts","title":"Key Concepts","text":"<ul> <li>Kubernetes DNS: Automatic DNS for services and pods</li> <li>Service Types: ClusterIP, NodePort, LoadBalancer, Headless</li> <li>Endpoints: Actual pod IPs behind a service</li> <li>Registry Integration: How MCP Mesh enhances K8s discovery</li> <li>Network Policies: Controlling inter-agent communication</li> <li>\ud83c\udfaf Service Name Auto-Detection: Agents detect their service name from <code>app.kubernetes.io/name</code> labels</li> </ul>"},{"location":"04-kubernetes-basics/04-service-discovery/#service-naming-patterns-in-mcp-mesh","title":"\ud83c\udfaf Service Naming Patterns in MCP Mesh","text":"<p>Based on the actual Kubernetes examples in <code>examples/k8s/base/agents/</code>, MCP Mesh follows these service naming conventions:</p> Component Service Name Label Value Port Registry <code>mcp-mesh-registry</code> <code>mcp-mesh-registry</code> 8000 Hello World Agent <code>mcp-mesh-hello-world</code> <code>mcp-mesh-hello-world</code> 8080 System Agent <code>mcp-mesh-system-agent</code> <code>mcp-mesh-system-agent</code> 8080 Your Agent <code>mcp-mesh-{agent-name}</code> <code>mcp-mesh-{agent-name}</code> 8080 <p>Critical Pattern: The service name MUST exactly match the <code>app.kubernetes.io/name</code> label value for automatic service detection to work.</p>"},{"location":"04-kubernetes-basics/04-service-discovery/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"04-kubernetes-basics/04-service-discovery/#step-1-understanding-kubernetes-dns-and-mcp-mesh-service-names","title":"Step 1: Understanding Kubernetes DNS and MCP Mesh Service Names","text":"<p>Kubernetes automatically creates DNS entries for services, and MCP Mesh uses specific naming patterns:</p> <pre><code># DNS naming pattern:\n# &lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local\n\n# \ud83c\udfaf Actual MCP Mesh service examples:\nmcp-mesh-registry.mcp-mesh.svc.cluster.local    # Registry (port 8000)\nmcp-mesh-hello-world.mcp-mesh.svc.cluster.local # Hello World Agent (port 8080)\nmcp-mesh-system-agent.mcp-mesh.svc.cluster.local # System Agent (port 8080)\n\n# Short forms (within same namespace):\nmcp-mesh-registry:8000      # Registry\nmcp-mesh-hello-world:8080   # Hello World Agent\nmcp-mesh-system-agent:8080  # System Agent\n\n# Test DNS resolution with actual service names\nkubectl run -it --rm debug --image=busybox --restart=Never -n mcp-mesh -- \\\n  nslookup mcp-mesh-registry\n\nkubectl run -it --rm debug --image=busybox --restart=Never -n mcp-mesh -- \\\n  nslookup mcp-mesh-hello-world\n</code></pre> <p>DNS for different service types:</p> <pre><code># Standard Service (ClusterIP)\napiVersion: v1\nkind: Service\nmetadata:\n  name: weather-agent\n  namespace: mcp-mesh\nspec:\n  selector:\n    app: weather-agent\n  ports:\n    - port: 8081\n      targetPort: 8081\n# DNS: weather-agent.mcp-mesh.svc.cluster.local\n\n---\n# Headless Service (for StatefulSets)\napiVersion: v1\nkind: Service\nmetadata:\n  name: registry-headless\n  namespace: mcp-mesh\nspec:\n  clusterIP: None # Headless\n  selector:\n    app: registry\n  ports:\n    - port: 8000\n# DNS for pods: registry-0.registry-headless.mcp-mesh.svc.cluster.local\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#step-2-configure-agent-service-discovery","title":"Step 2: Configure Agent Service Discovery","text":"<p>\ud83c\udfaf Service Name Auto-Detection: MCP Mesh agents automatically detect their service name from Kubernetes labels, enabling seamless service discovery.</p> <p>Configure agents using the actual K8s example pattern:</p> <pre><code># Key service discovery configuration from examples/k8s/base/agents/\nenv:\n  # Kubernetes service discovery - auto-detect from labels\n  - name: SERVICE_NAME\n    valueFrom:\n      fieldRef:\n        fieldPath: metadata.labels['app.kubernetes.io/name']\n  - name: NAMESPACE\n    valueFrom:\n      fieldRef:\n        fieldPath: metadata.namespace\n  # Registry connection - configurable for federated networks\n  - name: MCP_MESH_REGISTRY_HOST\n    valueFrom:\n      configMapKeyRef:\n        name: mcp-agent-config\n        key: REGISTRY_HOST\n  - name: MCP_MESH_REGISTRY_PORT\n    valueFrom:\n      configMapKeyRef:\n        name: mcp-agent-config\n        key: REGISTRY_PORT\n</code></pre> <p>Corresponding agent code with automatic service name detection:</p> <pre><code># agent_discovery.py\nimport os\nimport requests\nimport mesh\n\nclass ServiceDiscovery:\n    def __init__(self):\n        # Service name auto-detected from K8s labels\n        self.service_name = os.getenv('SERVICE_NAME')  # e.g., \"mcp-mesh-hello-world\"\n        self.namespace = os.getenv('NAMESPACE', 'mcp-mesh')\n        self.registry_host = os.getenv('MCP_MESH_REGISTRY_HOST', 'mcp-mesh-registry')\n        self.registry_port = os.getenv('MCP_MESH_REGISTRY_PORT', '8000')\n        self.registry_url = f\"http://{self.registry_host}:{self.registry_port}\"\n\n    def discover_by_capability(self, capability):\n        \"\"\"Discover agents by capability through registry\"\"\"\n        response = requests.get(\n            f\"{self.registry_url}/agents\",\n            params={\"capability\": capability}\n        )\n        return response.json()\n\n    def discover_by_k8s_service(self, service_name):\n        \"\"\"Direct K8s service discovery using service name\"\"\"\n        # Use Kubernetes DNS with actual port 8080\n        k8s_endpoint = f\"http://{service_name}.{self.namespace}:8080\"\n        return k8s_endpoint\n\n    def get_my_service_url(self):\n        \"\"\"Get this agent's own service URL\"\"\"\n        return f\"http://{self.service_name}.{self.namespace}:8080\"\n\n@mesh.agent(name=\"discovery-aware\")\nclass DiscoveryAwareAgent:\n    pass\n\n@mesh.tool(\n    capability=\"discovery_aware\",\n    dependencies=[\"weather_service\", \"data_processor\"]\n)\ndef discovery_example(weather_service=None, data_processor=None):\n    discovery = ServiceDiscovery()\n\n    # Method 1: Use injected dependencies (recommended)\n    if weather_service:\n        weather_data = weather_service(\"London\")\n\n    # Method 2: Manual discovery through registry\n    weather_agents = discovery.discover_by_capability(\"weather\")\n\n    # Method 3: Direct K8s service call using known service names\n    hello_world_url = discovery.discover_by_k8s_service(\"mcp-mesh-hello-world\")\n    system_agent_url = discovery.discover_by_k8s_service(\"mcp-mesh-system-agent\")\n\n    # Method 4: Get own service URL\n    my_url = discovery.get_my_service_url()\n\n    return {\n        \"injected\": weather_data if weather_service else None,\n        \"registry\": weather_agents,\n        \"hello_world_endpoint\": hello_world_url,\n        \"system_agent_endpoint\": system_agent_url,\n        \"my_service_url\": my_url\n    }\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#step-3-implement-service-registration","title":"Step 3: Implement Service Registration","text":"<p>\ud83c\udfaf Automatic Registration: Based on the actual K8s examples, agents use automatic service name detection and registration.</p> <pre><code># agent-deployment-with-registration.yaml - Following actual patterns\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: analytics-agent\n  namespace: mcp-mesh\n  labels:\n    app.kubernetes.io/name: analytics-agent # \u2190 Key: This becomes SERVICE_NAME\n    app.kubernetes.io/component: agent\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: analytics-agent\n      app.kubernetes.io/component: agent\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: analytics-agent # \u2190 Critical for auto-detection\n        app.kubernetes.io/component: agent\n    spec:\n      containers:\n        - name: agent\n          image: mcp-mesh-base:latest\n          command: [\"python\", \"/app/agent.py\"]\n          ports:\n            - name: http\n              containerPort: 8080 # \u2190 Standard port 8080\n              protocol: TCP\n          env:\n            # Registry connection - configurable for federated networks\n            - name: MCP_MESH_REGISTRY_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: mcp-agent-config\n                  key: REGISTRY_HOST # \"mcp-mesh-registry\"\n            - name: MCP_MESH_REGISTRY_PORT\n              valueFrom:\n                configMapKeyRef:\n                  name: mcp-agent-config\n                  key: REGISTRY_PORT # \"8000\"\n            # HTTP server binding - bind to all interfaces\n            - name: HOST\n              value: \"0.0.0.0\"\n            # \ud83c\udfaf Kubernetes service discovery - auto-detect from labels\n            - name: SERVICE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.labels['app.kubernetes.io/name']\n            - name: NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            # Agent identification\n            - name: MCP_MESH_AGENT_NAME\n              value: \"analytics-agent\"\n            # Fallback pod IP for backward compatibility\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          envFrom:\n            - configMapRef:\n                name: mcp-agent-config\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 15\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 10\n            periodSeconds: 5\n---\n# \ud83c\udfaf Service matches the deployment label exactly\napiVersion: v1\nkind: Service\nmetadata:\n  name: analytics-agent # \u2190 Matches app.kubernetes.io/name\n  namespace: mcp-mesh\n  labels:\n    app.kubernetes.io/name: analytics-agent\n    app.kubernetes.io/component: agent\nspec:\n  type: ClusterIP\n  ports:\n    - name: http\n      port: 8080\n      targetPort: http\n      protocol: TCP\n  selector:\n    app.kubernetes.io/name: analytics-agent\n    app.kubernetes.io/component: agent\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#step-4-configure-headless-services-for-direct-pod-access","title":"Step 4: Configure Headless Services for Direct Pod Access","text":"<p>For scenarios requiring direct pod communication:</p> <pre><code># headless-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: data-processor-headless\n  namespace: mcp-mesh\nspec:\n  clusterIP: None # Headless service\n  selector:\n    app: data-processor\n  ports:\n    - port: 8080\n      name: http\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: data-processor\n  namespace: mcp-mesh\nspec:\n  serviceName: data-processor-headless\n  replicas: 3\n  selector:\n    matchLabels:\n      app: data-processor\n  template:\n    metadata:\n      labels:\n        app: data-processor\n    spec:\n      containers:\n        - name: processor\n          image: mcp-mesh/data-processor:latest\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: PROCESSOR_ID\n              value: \"$(POD_NAME)\"\n          ports:\n            - containerPort: 8080\n              name: http\n</code></pre> <p>Access specific pods:</p> <pre><code># Direct pod access\ndef access_specific_processor(processor_id):\n    \"\"\"Access specific data processor pod\"\"\"\n    # Pod DNS format for StatefulSet\n    pod_dns = f\"data-processor-{processor_id}.data-processor-headless.mcp-mesh.svc.cluster.local\"\n\n    response = requests.get(f\"http://{pod_dns}:8080/status\")\n    return response.json()\n\n# Access all pods\ndef access_all_processors():\n    \"\"\"Access all data processor pods\"\"\"\n    results = []\n    for i in range(3):  # Assuming 3 replicas\n        pod_dns = f\"data-processor-{i}.data-processor-headless.mcp-mesh.svc.cluster.local\"\n        try:\n            response = requests.get(f\"http://{pod_dns}:8080/status\")\n            results.append(response.json())\n        except:\n            results.append({\"error\": f\"Pod {i} unreachable\"})\n    return results\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#step-5-implement-network-policies","title":"Step 5: Implement Network Policies","text":"<p>Control which agents can communicate:</p> <pre><code># network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: agent-communication-policy\n  namespace: mcp-mesh\nspec:\n  # Apply to all agents\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/component: agent\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    # Allow from other agents\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              name: mcp-mesh\n          podSelector:\n            matchLabels:\n              app.kubernetes.io/component: agent\n      ports:\n        - protocol: TCP\n          port: 8080\n    # Allow from registry\n    - from:\n        - podSelector:\n            matchLabels:\n              app.kubernetes.io/name: mcp-mesh-registry\n      ports:\n        - protocol: TCP\n          port: 8080\n  egress:\n    # Allow to registry\n    - to:\n        - podSelector:\n            matchLabels:\n              app.kubernetes.io/name: mcp-mesh-registry\n      ports:\n        - protocol: TCP\n          port: 8080\n    # Allow to other agents\n    - to:\n        - namespaceSelector:\n            matchLabels:\n              name: mcp-mesh\n          podSelector:\n            matchLabels:\n              app.kubernetes.io/component: agent\n      ports:\n        - protocol: TCP\n          port: 8080\n    # Allow DNS\n    - to:\n        - namespaceSelector: {}\n          podSelector:\n            matchLabels:\n              k8s-app: kube-dns\n      ports:\n        - protocol: UDP\n          port: 53\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#configuration-options","title":"Configuration Options","text":"Environment Variable Description Default Example <code>SERVICE_NAME</code> K8s service name (auto-detected) from labels mcp-mesh-hello-world <code>NAMESPACE</code> Pod namespace (auto-detected) from fieldRef mcp-mesh <code>MCP_MESH_REGISTRY_HOST</code> Registry service name mcp-mesh-registry mcp-mesh-registry <code>MCP_MESH_REGISTRY_PORT</code> Registry service port 8000 8000 <code>MCP_MESH_REGISTRY_URL</code> Complete registry URL auto-constructed http://mcp-mesh-registry:8000 <code>MCP_MESH_AGENT_NAME</code> Agent logical name manual hello-world, system-agent <code>HOST</code> HTTP binding address 0.0.0.0 0.0.0.0"},{"location":"04-kubernetes-basics/04-service-discovery/#examples","title":"Examples","text":""},{"location":"04-kubernetes-basics/04-service-discovery/#example-1-service-name-based-discovery-real-k8s-pattern","title":"Example 1: Service Name-Based Discovery (Real K8s Pattern)","text":"<pre><code># real_k8s_discovery.py - Based on actual examples/k8s/base/agents/\nimport os\nimport requests\nimport socket\nfrom functools import lru_cache\nfrom kubernetes import client, config\n\nclass K8sServiceDiscovery:\n    def __init__(self):\n        # Load K8s config\n        if os.path.exists('/var/run/secrets/kubernetes.io'):\n            config.load_incluster_config()\n        else:\n            config.load_kube_config()\n\n        self.v1 = client.CoreV1Api()\n        # \ud83c\udfaf Auto-detected from environment (matches real examples)\n        self.service_name = os.getenv('SERVICE_NAME')  # e.g., \"mcp-mesh-hello-world\"\n        self.namespace = os.getenv('NAMESPACE', 'mcp-mesh')\n        self.registry_host = os.getenv('MCP_MESH_REGISTRY_HOST', 'mcp-mesh-registry')\n        self.registry_port = os.getenv('MCP_MESH_REGISTRY_PORT', '8000')\n        self.registry_url = f\"http://{self.registry_host}:{self.registry_port}\"\n\n    def get_known_service_endpoints(self):\n        \"\"\"Get all known MCP Mesh agent service endpoints\"\"\"\n        # \ud83c\udfaf Based on actual service names from K8s examples\n        known_services = {\n            'hello-world': 'mcp-mesh-hello-world',\n            'system-agent': 'mcp-mesh-system-agent',\n            'registry': 'mcp-mesh-registry'\n        }\n\n        endpoints = {}\n        for logical_name, service_name in known_services.items():\n            endpoints[logical_name] = {\n                'url': f\"http://{service_name}.{self.namespace}:8080\",\n                'service_name': service_name,\n                'dns': f\"{service_name}.{self.namespace}.svc.cluster.local\"\n            }\n        return endpoints\n\n    @lru_cache(maxsize=128)\n    def discover_service(self, service_name, capability=None):\n        \"\"\"Discover service using actual K8s patterns\"\"\"\n        endpoints = []\n\n        # Method 1: Direct service name (most reliable)\n        try:\n            svc = self.v1.read_namespaced_service(service_name, self.namespace)\n            if svc.spec.cluster_ip:\n                endpoints.append({\n                    'url': f\"http://{svc.spec.cluster_ip}:8080\",\n                    'source': 'kubernetes-service',\n                    'type': 'service',\n                    'service_name': service_name\n                })\n        except:\n            pass\n\n        # Method 2: Registry discovery for capabilities\n        if capability and self.registry_url:\n            try:\n                resp = requests.get(\n                    f\"{self.registry_url}/agents\",\n                    params={'capability': capability}\n                )\n                for agent in resp.json():\n                    endpoints.append({\n                        'url': agent['endpoint'],\n                        'source': 'registry',\n                        'type': 'agent',\n                        'metadata': agent.get('metadata', {})\n                    })\n            except:\n                pass\n\n        # Method 3: DNS resolution (fallback)\n        if not endpoints:\n            try:\n                ip = socket.gethostbyname(f\"{service_name}.{self.namespace}\")\n                endpoints.append({\n                    'url': f\"http://{ip}:8080\",\n                    'source': 'dns',\n                    'type': 'resolved',\n                    'service_name': service_name\n                })\n            except:\n                pass\n\n        return endpoints\n\n    def call_hello_world_agent(self):\n        \"\"\"Example: Call hello-world agent using service name\"\"\"\n        url = \"http://mcp-mesh-hello-world.mcp-mesh:8080/health\"\n        response = requests.get(url)\n        return response.json()\n\n    def call_system_agent(self):\n        \"\"\"Example: Call system agent using service name\"\"\"\n        url = \"http://mcp-mesh-system-agent.mcp-mesh:8080/health\"\n        response = requests.get(url)\n        return response.json()\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#example-2-service-mesh-integration","title":"Example 2: Service Mesh Integration","text":"<pre><code># istio-service-entry.yaml\napiVersion: networking.istio.io/v1beta1\nkind: ServiceEntry\nmetadata:\n  name: mcp-mesh-agents\n  namespace: mcp-mesh\nspec:\n  hosts:\n    - \"*.agent.mcp-mesh.local\"\n  ports:\n    - number: 8080\n      name: http\n      protocol: HTTP\n  resolution: DNS\n  location: MESH_INTERNAL\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: agent-routing\n  namespace: mcp-mesh\nspec:\n  hosts:\n    - \"*.agent.mcp-mesh.local\"\n  http:\n    - match:\n        - headers:\n            capability:\n              exact: weather\n      route:\n        - destination:\n            host: weather-agent.mcp-mesh.svc.cluster.local\n    - match:\n        - headers:\n            capability:\n              exact: analytics\n      route:\n        - destination:\n            host: analytics-agent.mcp-mesh.svc.cluster.local\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#best-practices","title":"Best Practices","text":"<ol> <li>Use Registry Discovery: More flexible than direct K8s services</li> <li>Cache Discovery Results: Reduce registry/DNS load</li> <li>Implement Fallbacks: Multiple discovery methods</li> <li>Health Check Endpoints: Ensure only healthy agents are discovered</li> <li>Use Labels: Consistent labeling for service selection</li> </ol>"},{"location":"04-kubernetes-basics/04-service-discovery/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"04-kubernetes-basics/04-service-discovery/#pitfall-1-dns-resolution-failures","title":"Pitfall 1: DNS Resolution Failures","text":"<p>Problem: Agents can't resolve service names</p> <p>Solution: Check DNS configuration:</p> <pre><code># Test DNS from pod\nkubectl exec -it &lt;pod-name&gt; -n mcp-mesh -- nslookup kubernetes.default\n\n# Check CoreDNS logs\nkubectl logs -n kube-system -l k8s-app=kube-dns\n\n# Verify DNS policy in pod\nkubectl get pod &lt;pod-name&gt; -o yaml | grep -A5 dnsPolicy\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#pitfall-2-service-endpoints-not-ready","title":"Pitfall 2: Service Endpoints Not Ready","text":"<p>Problem: Service has no endpoints</p> <p>Solution: Verify pod labels match service selector:</p> <pre><code># Check service selector\nkubectl get svc &lt;service-name&gt; -o yaml | grep -A5 selector\n\n# Check pod labels\nkubectl get pods -l &lt;label-selector&gt; --show-labels\n\n# View endpoints\nkubectl get endpoints &lt;service-name&gt;\nkubectl describe endpoints &lt;service-name&gt;\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#testing","title":"Testing","text":""},{"location":"04-kubernetes-basics/04-service-discovery/#service-discovery-test-suite","title":"Service Discovery Test Suite","text":"<pre><code># test_service_discovery.py\nimport pytest\nimport requests\nfrom kubernetes import client, config\n\nclass TestServiceDiscovery:\n    @classmethod\n    def setup_class(cls):\n        config.load_kube_config()\n        cls.v1 = client.CoreV1Api()\n        cls.namespace = \"mcp-mesh\"\n\n    def test_dns_resolution(self):\n        \"\"\"Test K8s DNS works for services\"\"\"\n        # Deploy test service\n        test_svc = client.V1Service(\n            metadata=client.V1ObjectMeta(name=\"test-dns\"),\n            spec=client.V1ServiceSpec(\n                selector={\"app\": \"test\"},\n                ports=[client.V1ServicePort(port=8080)]\n            )\n        )\n\n        self.v1.create_namespaced_service(self.namespace, test_svc)\n\n        # Test DNS resolution from pod\n        pod_manifest = {\n            \"apiVersion\": \"v1\",\n            \"kind\": \"Pod\",\n            \"metadata\": {\"name\": \"dns-test\"},\n            \"spec\": {\n                \"containers\": [{\n                    \"name\": \"test\",\n                    \"image\": \"busybox\",\n                    \"command\": [\"nslookup\", \"test-dns\"]\n                }],\n                \"restartPolicy\": \"Never\"\n            }\n        }\n\n        # Cleanup\n        self.v1.delete_namespaced_service(\"test-dns\", self.namespace)\n\n    def test_registry_discovery(self):\n        \"\"\"Test registry-based discovery\"\"\"\n        registry_url = \"http://mcp-mesh-registry:8080\"\n\n        # Register test agent\n        agent_data = {\n            \"id\": \"test-agent-1\",\n            \"capabilities\": [\"test-capability\"],\n            \"endpoint\": \"http://test-agent:8080\"\n        }\n\n        response = requests.post(\n            f\"{registry_url}/api/v1/agents\",\n            json=agent_data\n        )\n        assert response.status_code == 200\n\n        # Discover by capability\n        response = requests.get(\n            f\"{registry_url}/api/v1/agents\",\n            params={\"capability\": \"test-capability\"}\n        )\n        agents = response.json()\n        assert len(agents) &gt; 0\n        assert agents[0][\"id\"] == \"test-agent-1\"\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#load-test-service-discovery","title":"Load Test Service Discovery","text":"<pre><code>#!/bin/bash\n# load_test_discovery.sh\n\nNAMESPACE=mcp-mesh\nITERATIONS=1000\n\necho \"Load testing service discovery...\"\n\n# Test DNS resolution performance\necho \"Testing DNS resolution...\"\ntime for i in $(seq 1 $ITERATIONS); do\n  kubectl exec -it test-pod -n $NAMESPACE -- \\\n    nslookup mcp-mesh-registry.mcp-mesh.svc.cluster.local &gt; /dev/null 2&gt;&amp;1\ndone\n\n# Test registry discovery performance\necho \"Testing registry discovery...\"\ntime for i in $(seq 1 $ITERATIONS); do\n  curl -s http://localhost:8080/api/v1/agents?capability=test &gt; /dev/null\ndone\n\necho \"Load test complete\"\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"04-kubernetes-basics/04-service-discovery/#monitor-service-discovery","title":"Monitor Service Discovery","text":"<pre><code># Watch service endpoints\nkubectl get endpoints -n mcp-mesh -w\n\n# Monitor DNS queries (if using CoreDNS)\nkubectl logs -n kube-system -l k8s-app=kube-dns -f | grep mcp-mesh\n\n# Check service discovery metrics\ncurl http://mcp-mesh-registry:9090/metrics | grep discovery\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#debug-discovery-issues","title":"Debug Discovery Issues","text":"<pre><code># Test service discovery from debug pod\nkubectl run -it --rm debug --image=nicolaka/netshoot -n mcp-mesh -- bash\n\n# Inside debug pod:\n# DNS tests\nnslookup mcp-mesh-registry\ndig mcp-mesh-registry.mcp-mesh.svc.cluster.local\nhost weather-agent\n\n# Network connectivity\nping mcp-mesh-registry\ntelnet mcp-mesh-registry 8080\ncurl http://mcp-mesh-registry:8080/health\n\n# Trace network path\ntraceroute mcp-mesh-registry\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"04-kubernetes-basics/04-service-discovery/#issue-1-service-name-not-auto-detected","title":"Issue 1: Service Name Not Auto-Detected","text":"<p>Symptoms: SERVICE_NAME environment variable is empty or incorrect</p> <p>Cause: Missing or incorrect label configuration</p> <p>Solution:</p> <pre><code># Ensure correct label structure\nmetadata:\n  labels:\n    app.kubernetes.io/name: mcp-mesh-hello-world # \u2190 Must match service name\n    app.kubernetes.io/component: agent\nspec:\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: mcp-mesh-hello-world # \u2190 Critical: Must be identical\n        app.kubernetes.io/component: agent\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#issue-2-service-discovery-dns-failures","title":"Issue 2: Service Discovery DNS Failures","text":"<p>Symptoms: Can't resolve service names like \"mcp-mesh-registry\"</p> <p>Cause: DNS configuration or service naming issues</p> <p>Solution:</p> <pre><code># Fix DNS configuration\nspec:\n  dnsPolicy: ClusterFirst\n  dnsConfig:\n    options:\n      - name: ndots\n        value: \"1\"\n      - name: single-request-reopen\n# Verify service names match exactly:\n# Service: metadata.name: mcp-mesh-hello-world\n# Deployment: app.kubernetes.io/name: mcp-mesh-hello-world\n</code></pre>"},{"location":"04-kubernetes-basics/04-service-discovery/#issue-3-registry-connection-failures","title":"Issue 3: Registry Connection Failures","text":"<p>Symptoms: Agents can't connect to \"http://mcp-mesh-registry:8000\"</p> <p>Cause: Registry service not ready or wrong configuration</p> <p>Solution:</p> <pre><code># Verify registry service configuration matches examples\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-agent-config\n  namespace: mcp-mesh\ndata:\n  REGISTRY_HOST: \"mcp-mesh-registry\" # \u2190 Must match service name\n  REGISTRY_PORT: \"8000\" # \u2190 Must match service port\n  MCP_MESH_REGISTRY_URL: \"http://mcp-mesh-registry:8000\"\n\n# Add init container to wait for registry\nspec:\n  initContainers:\n    - name: wait-for-registry\n      image: busybox:1.35\n      command: [\"sh\", \"-c\"]\n      args:\n        - |\n          until nc -z mcp-mesh-registry 8000; do\n            echo \"Waiting for registry...\"\n            sleep 2\n          done\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"04-kubernetes-basics/04-service-discovery/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>DNS TTL: Kubernetes DNS caching can delay updates</li> <li>Service Types: ExternalName services don't work with all discovery methods</li> <li>Network Policies: Can block discovery traffic</li> <li>Pod DNS: Not available during init containers</li> </ul>"},{"location":"04-kubernetes-basics/04-service-discovery/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add mDNS discovery option</li> <li> Document Consul integration</li> <li> Add service mesh examples (Linkerd)</li> <li> Create discovery performance benchmarks</li> <li> Add multi-cluster discovery</li> </ul>"},{"location":"04-kubernetes-basics/04-service-discovery/#summary","title":"Summary","text":"<p>You now understand service discovery in Kubernetes for MCP Mesh:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 SERVICE_NAME auto-detection: Uses <code>metadata.labels['app.kubernetes.io/name']</code> from pod labels</li> <li>\ud83d\udd11 Standard service naming: Services named like <code>mcp-mesh-hello-world</code>, <code>mcp-mesh-system-agent</code></li> <li>\ud83d\udd11 Port standardization: Agents use port 8080, registry uses port 8000</li> <li>\ud83d\udd11 ConfigMap-based registry config: Host and port configurable via <code>mcp-agent-config</code></li> <li>\ud83d\udd11 Automatic service creation: Each agent deployment includes matching service</li> <li>\ud83d\udd11 Field reference injection: Namespace and service name injected from Kubernetes metadata</li> </ul>"},{"location":"04-kubernetes-basics/04-service-discovery/#next-steps","title":"Next Steps","text":"<p>Let's troubleshoot common Kubernetes deployment issues.</p> <p>Continue to Troubleshooting K8s Deployments \u2192</p> <p>\ud83d\udca1 Tip: Use <code>kubectl exec -it &lt;pod&gt; -- cat /etc/resolv.conf</code> to check DNS configuration inside pods</p> <p>\ud83d\udcda Reference: Kubernetes DNS Documentation</p> <p>\ud83e\uddea Try It: Implement a custom service discovery mechanism that combines Kubernetes services with MCP Mesh capabilities</p>"},{"location":"04-kubernetes-basics/05-troubleshooting/","title":"Troubleshooting K8s Deployments","text":"<p>Comprehensive guide to diagnosing and fixing common MCP Mesh deployment issues on Kubernetes</p>"},{"location":"04-kubernetes-basics/05-troubleshooting/#overview","title":"Overview","text":"<p>This troubleshooting guide addresses the most common issues encountered when deploying MCP Mesh on Kubernetes. Each issue includes symptoms, diagnostic steps, root cause analysis, and proven solutions. We'll cover pod failures, networking issues, storage problems, and performance bottlenecks.</p>"},{"location":"04-kubernetes-basics/05-troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this comprehensive diagnostic script:</p> <pre><code>#!/bin/bash\n# mcp-mesh-k8s-diagnostics.sh\n\nNAMESPACE=${1:-mcp-mesh}\n\necho \"MCP Mesh Kubernetes Diagnostics for namespace: $NAMESPACE\"\necho \"=======================================================\"\n\n# Check namespace exists\necho -e \"\\n1. Checking namespace...\"\nkubectl get namespace $NAMESPACE || {\n    echo \"ERROR: Namespace $NAMESPACE not found\"\n    exit 1\n}\n\n# Check pods\necho -e \"\\n2. Pod Status:\"\nkubectl get pods -n $NAMESPACE -o wide\necho -e \"\\nProblematic pods:\"\nkubectl get pods -n $NAMESPACE --field-selector=status.phase!=Running,status.phase!=Succeeded\n\n# Check services\necho -e \"\\n3. Service Status:\"\nkubectl get svc -n $NAMESPACE\necho -e \"\\nService endpoints:\"\nkubectl get endpoints -n $NAMESPACE\n\n# Check registry\necho -e \"\\n4. Registry Status:\"\nkubectl get statefulset,pod,svc -n $NAMESPACE -l app.kubernetes.io/name=mcp-mesh-registry\n\n# Check events\necho -e \"\\n5. Recent Events:\"\nkubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -20\n\n# Check resource usage\necho -e \"\\n6. Resource Usage:\"\nkubectl top nodes\nkubectl top pods -n $NAMESPACE\n\n# Check persistent volumes\necho -e \"\\n7. Storage:\"\nkubectl get pvc -n $NAMESPACE\n\n# Network connectivity test\necho -e \"\\n8. Network Test:\"\nkubectl run test-network --rm -it --image=busybox --restart=Never -n $NAMESPACE -- \\\n    sh -c \"nslookup mcp-mesh-registry &amp;&amp; echo 'DNS OK' || echo 'DNS FAILED'\"\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"04-kubernetes-basics/05-troubleshooting/#issue-1-pods-stuck-in-pending-state","title":"Issue 1: Pods Stuck in Pending State","text":"<p>Symptoms:</p> <pre><code>NAME                          READY   STATUS    RESTARTS   AGE\nmcp-mesh-registry-0           0/1     Pending   0          5m\nweather-agent-abc123          0/1     Pending   0          3m\n</code></pre> <p>Diagnosis:</p> <pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh\n\n# Check node resources\nkubectl describe nodes\nkubectl top nodes\n\n# Check PVC status\nkubectl get pvc -n mcp-mesh\n</code></pre> <p>Common Causes and Solutions:</p> <ol> <li>Insufficient Resources</li> </ol> <pre><code># Check resource requests\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh | grep -A10 Requests\n\n# Solution: Scale down other pods or add nodes\nkubectl scale deployment &lt;other-deployment&gt; --replicas=0 -n mcp-mesh\n\n# Or reduce resource requests\nkubectl patch deployment &lt;deployment-name&gt; -n mcp-mesh -p '\n{\n  \"spec\": {\n    \"template\": {\n      \"spec\": {\n        \"containers\": [{\n          \"name\": \"agent\",\n          \"resources\": {\n            \"requests\": {\n              \"cpu\": \"50m\",\n              \"memory\": \"64Mi\"\n            }\n          }\n        }]\n      }\n    }\n  }\n}'\n</code></pre> <ol> <li>PVC Not Bound</li> </ol> <pre><code># Check PVC status\nkubectl get pvc -n mcp-mesh\n\n# Check available storage classes\nkubectl get storageclass\n\n# Create PVC with correct storage class\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: registry-data\n  namespace: mcp-mesh\nspec:\n  accessModes: [\"ReadWriteOnce\"]\n  storageClassName: standard  # Use available class\n  resources:\n    requests:\n      storage: 5Gi\nEOF\n</code></pre> <ol> <li>Node Selector/Affinity Not Satisfied</li> </ol> <pre><code># Check node labels\nkubectl get nodes --show-labels\n\n# Remove node selector temporarily\nkubectl patch deployment &lt;deployment-name&gt; -n mcp-mesh --type='json' -p='[\n  {\"op\": \"remove\", \"path\": \"/spec/template/spec/nodeSelector\"}\n]'\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#issue-2-pods-in-crashloopbackoff","title":"Issue 2: Pods in CrashLoopBackOff","text":"<p>Symptoms:</p> <pre><code>NAME                          READY   STATUS             RESTARTS   AGE\nanalytics-agent-xyz789        0/1     CrashLoopBackOff   5          10m\n</code></pre> <p>Diagnosis:</p> <pre><code># Check logs from current run\nkubectl logs &lt;pod-name&gt; -n mcp-mesh\n\n# Check logs from previous run\nkubectl logs &lt;pod-name&gt; -n mcp-mesh --previous\n\n# Check container exit code\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh | grep -A10 \"Last State\"\n</code></pre> <p>Common Causes and Solutions:</p> <ol> <li>Missing Environment Variables</li> </ol> <pre><code># Check current env vars\nkubectl exec &lt;pod-name&gt; -n mcp-mesh -- env\n\n# Add missing variables\nkubectl set env deployment/&lt;deployment-name&gt; \\\n  MCP_MESH_REGISTRY_URL=http://mcp-mesh-registry:8000 \\\n  -n mcp-mesh\n</code></pre> <ol> <li>Registry Connection Failed</li> </ol> <pre><code># Add init container to wait for registry\nspec:\n  initContainers:\n    - name: wait-for-registry\n      image: busybox:1.35\n      command: [\"sh\", \"-c\"]\n      args:\n        - |\n          until nc -z mcp-mesh-registry 8000; do\n            echo \"Waiting for registry...\"\n            sleep 2\n          done\n</code></pre> <ol> <li>Permission Errors <pre><code># Fix file permissions\nspec:\n  securityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n  containers:\n    - name: agent\n      securityContext:\n        allowPrivilegeEscalation: false\n        runAsNonRoot: true\n</code></pre></li> </ol>"},{"location":"04-kubernetes-basics/05-troubleshooting/#issue-3-service-discovery-not-working","title":"Issue 3: Service Discovery Not Working","text":"<p>Symptoms:</p> <ul> <li>Agents can't find registry</li> <li>\"connection refused\" errors</li> <li>DNS resolution failures</li> </ul> <p>Diagnosis:</p> <pre><code># Test DNS from pod\nkubectl exec -it &lt;pod-name&gt; -n mcp-mesh -- nslookup mcp-mesh-registry\n\n# Check service endpoints\nkubectl get endpoints mcp-mesh-registry -n mcp-mesh\n\n# Test connectivity\nkubectl exec -it &lt;pod-name&gt; -n mcp-mesh -- wget -O- http://mcp-mesh-registry:8000/health\n</code></pre> <p>Solutions:</p> <ol> <li>DNS Issues</li> </ol> <pre><code># Configure pod DNS\nspec:\n  dnsPolicy: ClusterFirst\n  dnsConfig:\n    options:\n      - name: ndots\n        value: \"1\"\n</code></pre> <ol> <li>Service Selector Mismatch</li> </ol> <pre><code># Verify labels match\nkubectl get svc mcp-mesh-registry -o yaml | grep -A5 selector\nkubectl get pods -l app.kubernetes.io/name=mcp-mesh-registry --show-labels\n</code></pre> <ol> <li>Network Policy Blocking</li> </ol> <pre><code># Check network policies\nkubectl get networkpolicy -n mcp-mesh\n\n# Temporarily disable\nkubectl delete networkpolicy --all -n mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#issue-4-high-memorycpu-usage","title":"Issue 4: High Memory/CPU Usage","text":"<p>Symptoms:</p> <ul> <li>Pods getting OOMKilled</li> <li>Slow response times</li> <li>Node pressure</li> </ul> <p>Diagnosis:</p> <pre><code># Check resource usage\nkubectl top pods -n mcp-mesh\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh | grep -A20 Containers\n\n# Check for memory leaks\nkubectl exec &lt;pod-name&gt; -n mcp-mesh -- ps aux\n</code></pre> <p>Solutions:</p> <ol> <li>Increase Resource Limits</li> </ol> <pre><code>resources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"1000m\"\n</code></pre> <ol> <li>Enable Horizontal Pod Autoscaling</li> </ol> <pre><code>kubectl autoscale deployment &lt;deployment-name&gt; \\\n  --min=2 --max=10 \\\n  --cpu-percent=70 \\\n  -n mcp-mesh\n</code></pre> <ol> <li>Optimize Application <pre><code>env:\n  - name: GOGC\n    value: \"50\" # More aggressive garbage collection\n  - name: GOMEMLIMIT\n    value: \"900MiB\" # Soft memory limit\n</code></pre></li> </ol>"},{"location":"04-kubernetes-basics/05-troubleshooting/#issue-5-persistent-volume-issues","title":"Issue 5: Persistent Volume Issues","text":"<p>Symptoms:</p> <ul> <li>Data loss after pod restart</li> <li>Permission denied errors</li> <li>Disk full errors</li> </ul> <p>Diagnosis:</p> <pre><code># Check PVC status\nkubectl get pvc -n mcp-mesh\nkubectl describe pvc &lt;pvc-name&gt; -n mcp-mesh\n\n# Check disk usage in pod\nkubectl exec &lt;pod-name&gt; -n mcp-mesh -- df -h\n</code></pre> <p>Solutions:</p> <ol> <li>Expand PVC</li> </ol> <pre><code># For expandable storage classes\nkubectl patch pvc &lt;pvc-name&gt; -n mcp-mesh -p '{\"spec\":{\"resources\":{\"requests\":{\"storage\":\"20Gi\"}}}}'\n</code></pre> <ol> <li>Fix Permissions <pre><code># Add init container to fix permissions\ninitContainers:\n  - name: fix-permissions\n    image: busybox\n    command: [\"sh\", \"-c\", \"chown -R 1000:1000 /data\"]\n    volumeMounts:\n      - name: data\n        mountPath: /data\n</code></pre></li> </ol>"},{"location":"04-kubernetes-basics/05-troubleshooting/#issue-6-image-pull-errors","title":"Issue 6: Image Pull Errors","text":"<p>Symptoms:</p> <pre><code>Failed to pull image \"mcpmesh/python-runtime:0.5\": rpc error: code = Unknown desc = Error response from daemon: pull access denied\n</code></pre> <p>Solutions:</p> <ol> <li>For Minikube Local Images</li> </ol> <pre><code># Use Minikube's Docker\neval $(minikube docker-env)\ndocker build -t mcp-mesh/agent:0.2 .\n\n# Set imagePullPolicy\nkubectl patch deployment &lt;deployment-name&gt; -n mcp-mesh -p '\n{\n  \"spec\": {\n    \"template\": {\n      \"spec\": {\n        \"containers\": [{\n          \"name\": \"agent\",\n          \"imagePullPolicy\": \"Never\"\n        }]\n      }\n    }\n  }\n}'\n</code></pre> <ol> <li>For Private Registry</li> </ol> <pre><code># Create pull secret\nkubectl create secret docker-registry regcred \\\n  --docker-server=myregistry.io \\\n  --docker-username=user \\\n  --docker-password=pass \\\n  --docker-email=email@example.com \\\n  -n mcp-mesh\n\n# Add to deployment\nkubectl patch deployment &lt;deployment-name&gt; -n mcp-mesh -p '\n{\n  \"spec\": {\n    \"template\": {\n      \"spec\": {\n        \"imagePullSecrets\": [{\"name\": \"regcred\"}]\n      }\n    }\n  }\n}'\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#performance-troubleshooting","title":"Performance Troubleshooting","text":""},{"location":"04-kubernetes-basics/05-troubleshooting/#slow-agent-startup","title":"Slow Agent Startup","text":"<p>Diagnosis:</p> <pre><code># Check startup time\nkubectl logs &lt;pod-name&gt; -n mcp-mesh | grep -E \"started|ready\"\n\n# Profile startup\nkubectl exec &lt;pod-name&gt; -n mcp-mesh -- python -m cProfile -o profile.stats agent.py\n</code></pre> <p>Solutions:</p> <ol> <li>Add startup probe with longer timeout</li> <li>Optimize imports and initialization</li> <li>Use init containers for pre-warming</li> </ol>"},{"location":"04-kubernetes-basics/05-troubleshooting/#high-latency-between-agents","title":"High Latency Between Agents","text":"<p>Diagnosis:</p> <pre><code># Test network latency\nkubectl exec -it &lt;pod-name&gt; -n mcp-mesh -- ping &lt;other-pod-ip&gt;\n\n# Check service mesh metrics (if using Istio)\nkubectl exec -it &lt;pod-name&gt; -c istio-proxy -n mcp-mesh -- curl localhost:15000/stats/prometheus\n</code></pre> <p>Solutions:</p> <ol> <li>Use node affinity to colocate related agents</li> <li>Enable pod topology spread constraints</li> <li>Optimize serialization/deserialization</li> </ol>"},{"location":"04-kubernetes-basics/05-troubleshooting/#debugging-tools-and-commands","title":"Debugging Tools and Commands","text":""},{"location":"04-kubernetes-basics/05-troubleshooting/#essential-kubectl-commands","title":"Essential kubectl Commands","text":"<pre><code># Get comprehensive pod info\nkubectl get pod &lt;pod-name&gt; -n mcp-mesh -o yaml\n\n# Watch pod status changes\nkubectl get pods -n mcp-mesh -w\n\n# Get all resources in namespace\nkubectl get all -n mcp-mesh\n\n# Describe problematic resources\nkubectl describe pod/deployment/service &lt;name&gt; -n mcp-mesh\n\n# Check RBAC permissions\nkubectl auth can-i --list --namespace=mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#advanced-debugging","title":"Advanced Debugging","text":"<pre><code># Enable verbose logging\nkubectl set env deployment/&lt;deployment-name&gt; LOG_LEVEL=DEBUG -n mcp-mesh\n\n# Port forward for direct access\nkubectl port-forward pod/&lt;pod-name&gt; 8080:8080 -n mcp-mesh\n\n# Copy files from pod\nkubectl cp &lt;pod-name&gt;:/path/to/file ./local-file -n mcp-mesh\n\n# Run debug container\nkubectl debug &lt;pod-name&gt; -it --image=busybox -n mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#monitoring-commands","title":"Monitoring Commands","text":"<pre><code># Real-time resource monitoring\nwatch -n 2 'kubectl top pods -n mcp-mesh'\n\n# Check cluster events\nkubectl get events -n mcp-mesh --sort-by='.lastTimestamp' -w\n\n# View audit logs (if enabled)\nkubectl logs -n kube-system -l component=kube-apiserver | grep mcp-mesh\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"04-kubernetes-basics/05-troubleshooting/#emergency-pod-recovery","title":"Emergency Pod Recovery","text":"<pre><code>#!/bin/bash\n# emergency-recovery.sh\n\nNAMESPACE=mcp-mesh\n\necho \"Starting emergency recovery...\"\n\n# Delete stuck pods\nkubectl delete pods --field-selector=status.phase=Failed -n $NAMESPACE\nkubectl delete pods --field-selector=status.phase=Unknown -n $NAMESPACE\n\n# Restart all deployments\nkubectl rollout restart deployment -n $NAMESPACE\n\n# Force delete stuck PVCs\nkubectl patch pvc &lt;pvc-name&gt; -n $NAMESPACE -p '{\"metadata\":{\"finalizers\":null}}'\n\n# Reset failed jobs\nkubectl delete jobs --field-selector=status.successful=0 -n $NAMESPACE\n\necho \"Recovery complete. Checking status...\"\nkubectl get all -n $NAMESPACE\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#data-recovery","title":"Data Recovery","text":"<pre><code># Backup registry data\nkubectl exec mcp-mesh-registry-0 -n mcp-mesh -- \\\n  tar czf /tmp/backup.tar.gz /data\n\nkubectl cp mcp-mesh-registry-0:/tmp/backup.tar.gz ./registry-backup.tar.gz -n mcp-mesh\n\n# Restore registry data\nkubectl cp ./registry-backup.tar.gz mcp-mesh-registry-0:/tmp/backup.tar.gz -n mcp-mesh\nkubectl exec mcp-mesh-registry-0 -n mcp-mesh -- \\\n  tar xzf /tmp/backup.tar.gz -C /\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#prevention-strategies","title":"Prevention Strategies","text":""},{"location":"04-kubernetes-basics/05-troubleshooting/#resource-management","title":"Resource Management","text":"<pre><code># Set up ResourceQuota\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: mcp-mesh-quota\n  namespace: mcp-mesh\nspec:\n  hard:\n    requests.cpu: \"10\"\n    requests.memory: 20Gi\n    persistentvolumeclaims: \"10\"\n    pods: \"50\"\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#pod-disruption-budgets","title":"Pod Disruption Budgets","text":"<pre><code># Ensure availability during updates\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: registry-pdb\n  namespace: mcp-mesh\nspec:\n  minAvailable: 2\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: mcp-mesh-registry\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#monitoring-setup","title":"Monitoring Setup","text":"<pre><code># ServiceMonitor for Prometheus\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: mcp-mesh-agents\n  namespace: mcp-mesh\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: agent\n  endpoints:\n    - port: metrics\n      interval: 30s\n      path: /metrics\n</code></pre>"},{"location":"04-kubernetes-basics/05-troubleshooting/#getting-help","title":"Getting Help","text":"<p>If these solutions don't resolve your issue:</p> <ol> <li>Collect Diagnostics:</li> </ol> <pre><code>kubectl cluster-info dump --namespace=mcp-mesh &gt; cluster-dump.txt\n</code></pre> <ol> <li>Check MCP Mesh Logs:</li> </ol> <pre><code>kubectl logs -l app.kubernetes.io/part-of=mcp-mesh -n mcp-mesh &gt; mcp-mesh-logs.txt\n</code></pre> <ol> <li>Community Resources:</li> <li>GitHub Issues: https://github.com/dhyansraj/mcp-mesh/issues</li> <li>Kubernetes Slack: #mcp-mesh channel</li> </ol> <p>\ud83d\udca1 Tip: Always check <code>kubectl get events -n mcp-mesh</code> first - most issues are explained there</p> <p>\ud83d\udcda Reference: Kubernetes Troubleshooting Guide</p> <p>\ud83d\udd0d Debug Mode: Set <code>MCP_MESH_DEBUG=true</code> in pod environment for verbose logging</p>"},{"location":"06-helm-deployment/01-understanding-charts/","title":"Understanding MCP Mesh Helm Charts","text":"<p>Learn the structure and components of MCP Mesh Helm charts</p>"},{"location":"06-helm-deployment/01-understanding-charts/#overview","title":"Overview","text":"<p>MCP Mesh provides two primary Helm charts: <code>mcp-mesh-registry</code> for the central registry service and <code>mcp-mesh-agent</code> for deploying agents. This guide explains the chart structure, templates, values, and how to use them effectively. Understanding these charts is essential for customizing deployments and creating your own agent charts. We'll explore each component, explain the templating patterns used, and show how to extend the charts for your specific needs.</p>"},{"location":"06-helm-deployment/01-understanding-charts/#key-concepts","title":"Key Concepts","text":"<ul> <li>Chart Structure: Standard Helm chart layout and files</li> <li>Templates: Go templating for Kubernetes manifests</li> <li>Values: Configuration options and defaults</li> <li>Helpers: Reusable template functions</li> <li>Dependencies: Chart relationships and requirements</li> </ul>"},{"location":"06-helm-deployment/01-understanding-charts/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"06-helm-deployment/01-understanding-charts/#step-1-explore-chart-structure","title":"Step 1: Explore Chart Structure","text":"<p>Both MCP Mesh charts follow standard Helm conventions:</p> <pre><code>mcp-mesh-registry/\n\u251c\u2500\u2500 Chart.yaml              # Chart metadata\n\u251c\u2500\u2500 values.yaml             # Default configuration\n\u251c\u2500\u2500 templates/              # Kubernetes manifests\n\u2502   \u251c\u2500\u2500 _helpers.tpl        # Template helpers\n\u2502   \u251c\u2500\u2500 statefulset.yaml    # \ud83c\udfaf StatefulSet (not Deployment)\n\u2502   \u251c\u2500\u2500 service.yaml        # Service definition\n\u2502   \u251c\u2500\u2500 service-headless.yaml  # \ud83c\udfaf Headless service for StatefulSet\n\u2502   \u251c\u2500\u2500 configmap.yaml      # Configuration\n\u2502   \u251c\u2500\u2500 secret.yaml         # Sensitive data\n\u2502   \u251c\u2500\u2500 ingress.yaml        # Ingress rules\n\u2502   \u251c\u2500\u2500 hpa.yaml            # Autoscaling\n\u2502   \u2514\u2500\u2500 NOTES.txt           # Post-install notes\n\u2514\u2500\u2500 README.md              # Chart documentation\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#step-2-registry-chart-deep-dive","title":"Step 2: Registry Chart Deep Dive","text":"<p>\ud83c\udfaf Updated: The registry chart now uses StatefulSet (matches working K8s examples) for data persistence and proper service discovery:</p> <pre><code># mcp-mesh-registry/templates/statefulset.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: {% raw %}{{ include \"mcp-mesh-registry.fullname\" . }}{% endraw %}\n  labels:\n    {% raw %}{{- include \"mcp-mesh-registry.labels\" . | nindent 4 }}{% endraw %}\nspec:\n  serviceName: {% raw %}{{ include \"mcp-mesh-registry.fullname\" . }}{% endraw %}-headless\n  replicas: {% raw %}{{ .Values.replicaCount }}{% endraw %}\n  selector:\n    matchLabels:\n      {% raw %}{{- include \"mcp-mesh-registry.selectorLabels\" . | nindent 6 }}{% endraw %}\n  template:\n    metadata:\n      annotations:\n        checksum/config: {% raw %}{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}{% endraw %}\n        {% raw %}{{- with .Values.podAnnotations }}{% endraw %}\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n      labels:\n        {% raw %}{{- include \"mcp-mesh-registry.selectorLabels\" . | nindent 8 }}{% endraw %}\n    spec:\n      serviceAccountName: {% raw %}{{ include \"mcp-mesh-registry.serviceAccountName\" . }}{% endraw %}\n      securityContext:\n        {% raw %}{{- toYaml .Values.podSecurityContext | nindent 8 }}{% endraw %}\n      containers:\n      - name: {% raw %}{{ .Chart.Name }}{% endraw %}\n        securityContext:\n          {% raw %}{{- toYaml .Values.securityContext | nindent 12 }}{% endraw %}\n        image: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag | default .Chart.AppVersion }}{% endraw %}\"\n        imagePullPolicy: {% raw %}{{ .Values.image.pullPolicy }}{% endraw %}\n        command: [\"/app/bin/registry\"]  # \ud83c\udfaf Matches working examples\n        ports:\n        - name: http\n          containerPort: {% raw %}{{ .Values.registry.port }}{% endraw %}  # \ud83c\udfaf Default 8000\n          protocol: TCP\n        - name: metrics\n          containerPort: 9090\n          protocol: TCP\n        env:\n        # \ud83c\udfaf Pod information for registry\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        {% raw %}{{- if ne .Values.registry.database.type \"sqlite\" }}{% endraw %}\n        - name: DATABASE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {% raw %}{{ include \"mcp-mesh-registry.fullname\" . }}{% endraw %}-secret\n              key: database-password\n        {% raw %}{{- end }}{% endraw %}\n        envFrom:\n        - configMapRef:\n            name: {% raw %}{{ include \"mcp-mesh-registry.fullname\" . }}{% endraw %}-config  # \ud83c\udfaf Updated naming\n        livenessProbe:\n          httpGet:\n            path: /health  # \ud83c\udfaf Consistent health endpoint\n            port: http\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health  # \ud83c\udfaf Updated to match working examples\n            port: http\n          initialDelaySeconds: 10\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        startupProbe:\n          httpGet:\n            path: /health\n            port: http\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 30\n        resources:\n          {% raw %}{{- toYaml .Values.resources | nindent 12 }}{% endraw %}\n        volumeMounts:\n        - name: data\n          mountPath: /data\n        {% raw %}{{- if .Values.extraVolumeMounts }}{% endraw %}\n        {% raw %}{{- toYaml .Values.extraVolumeMounts | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.nodeSelector }}{% endraw %}\n      nodeSelector:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.affinity }}{% endraw %}\n      affinity:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.tolerations }}{% endraw %}\n      tolerations:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n  {% raw %}{{- if .Values.persistence.enabled }}{% endraw %}\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: {% raw %}{{ .Values.persistence.accessModes }}{% endraw %}\n      storageClassName: {% raw %}{{ .Values.persistence.storageClassName }}{% endraw %}\n      resources:\n        requests:\n          storage: {% raw %}{{ .Values.persistence.size }}{% endraw %}\n  {% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#step-3-agent-chart-deep-dive","title":"Step 3: Agent Chart Deep Dive","text":"<p>The agent chart is more flexible, supporting various agent configurations:</p> <pre><code># mcp-mesh-agent/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n  labels:\n    {% raw %}{{- include \"mcp-mesh-agent.labels\" . | nindent 4 }}{% endraw %}\nspec:\n  replicas: {% raw %}{{ .Values.replicaCount }}{% endraw %}\n  selector:\n    matchLabels:\n      {% raw %}{{- include \"mcp-mesh-agent.selectorLabels\" . | nindent 6 }}{% endraw %}\n  template:\n    metadata:\n      annotations:\n        {% raw %}{{- if .Values.agent.configMap }}{% endraw %}\n        checksum/config: {% raw %}{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- with .Values.podAnnotations }}{% endraw %}\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n      labels:\n        {% raw %}{{- include \"mcp-mesh-agent.selectorLabels\" . | nindent 8 }}{% endraw %}\n        {% raw %}{{- with .Values.agent.labels }}{% endraw %}\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n    spec:\n      serviceAccountName: {% raw %}{{ include \"mcp-mesh-agent.serviceAccountName\" . }}{% endraw %}\n      securityContext:\n        {% raw %}{{- toYaml .Values.podSecurityContext | nindent 8 }}{% endraw %}\n      {% raw %}{{- if .Values.agent.initContainers }}{% endraw %}\n      initContainers:\n        {% raw %}{{- toYaml .Values.agent.initContainers | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      containers:\n      - name: {% raw %}{{ .Chart.Name }}{% endraw %}\n        securityContext:\n          {% raw %}{{- toYaml .Values.securityContext | nindent 12 }}{% endraw %}\n        image: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag | default .Chart.AppVersion }}{% endraw %}\"\n        imagePullPolicy: {% raw %}{{ .Values.image.pullPolicy }}{% endraw %}\n        command: [\"python\", \"/app/agent.py\"]  # \ud83c\udfaf Matches working examples\n        ports:\n        - name: http\n          containerPort: {% raw %}{{ .Values.agent.http.port | default 8080 }}{% endraw %}  # \ud83c\udfaf Standard port 8080\n          protocol: TCP\n        {% raw %}{{- if .Values.metrics.enabled }}{% endraw %}\n        - name: metrics\n          containerPort: 9090\n          protocol: TCP\n        {% raw %}{{- end }}{% endraw %}\n        env:\n        - name: AGENT_NAME\n          value: {% raw %}{{ .Values.agent.name | quote }}{% endraw %}\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: MCP_MESH_REGISTRY_URL\n          value: {% raw %}{{ .Values.agent.registryUrl | quote }}{% endraw %}\n        {% raw %}{{- if .Values.agent.capabilities }}{% endraw %}\n        - name: MCP_MESH_CAPABILITIES\n          value: {% raw %}{{ .Values.agent.capabilities | join \",\" | quote }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- if .Values.agent.dependencies }}{% endraw %}\n        - name: MCP_MESH_DEPENDENCIES\n          value: {% raw %}{{ .Values.agent.dependencies | join \",\" | quote }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- range $key, $value := .Values.agent.env }}{% endraw %}\n        - name: {% raw %}{{ $key }}{% endraw %}\n          value: {% raw %}{{ $value | quote }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- if or .Values.agent.configMap .Values.agent.secret }}{% endraw %}\n        envFrom:\n        {% raw %}{{- if .Values.agent.configMap }}{% endraw %}\n        - configMapRef:\n            name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- if .Values.agent.secret }}{% endraw %}\n        - secretRef:\n            name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- if .Values.agent.livenessProbe }}{% endraw %}\n        livenessProbe:\n          {% raw %}{{- toYaml .Values.agent.livenessProbe | nindent 10 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- if .Values.agent.readinessProbe }}{% endraw %}\n        readinessProbe:\n          {% raw %}{{- toYaml .Values.agent.readinessProbe | nindent 10 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n        resources:\n          {% raw %}{{- toYaml .Values.resources | nindent 12 }}{% endraw %}\n        {% raw %}{{- if .Values.agent.volumeMounts }}{% endraw %}\n        volumeMounts:\n          {% raw %}{{- toYaml .Values.agent.volumeMounts | nindent 10 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- if .Values.agent.volumes }}{% endraw %}\n      volumes:\n        {% raw %}{{- toYaml .Values.agent.volumes | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#step-4-understanding-template-helpers","title":"Step 4: Understanding Template Helpers","text":"<p>Helper functions provide consistency across templates:</p> <pre><code># templates/_helpers.tpl\n{{/*\nExpand the name of the chart.\n*/}}\n{% raw %}{{- define \"mcp-mesh-registry.name\" -}}{% endraw %}\n{% raw %}{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n{{/*\nCreate a default fully qualified app name.\n*/}}\n{% raw %}{{- define \"mcp-mesh-registry.fullname\" -}}{% endraw %}\n{% raw %}{{- if .Values.fullnameOverride }}{% endraw %}\n{% raw %}{{- .Values.fullnameOverride | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- else }}{% endraw %}\n{% raw %}{{- $name := default .Chart.Name .Values.nameOverride }}{% endraw %}\n{% raw %}{{- if contains $name .Release.Name }}{% endraw %}\n{% raw %}{{- .Release.Name | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- else }}{% endraw %}\n{% raw %}{{- printf \"%s-%s\" .Release.Name $name | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n{{/*\nCommon labels\n*/}}\n{% raw %}{{- define \"mcp-mesh-registry.labels\" -}}{% endraw %}\nhelm.sh/chart: {% raw %}{{ include \"mcp-mesh-registry.chart\" . }}{% endraw %}\n{% raw %}{{ include \"mcp-mesh-registry.selectorLabels\" . }}{% endraw %}\n{% raw %}{{- if .Chart.AppVersion }}{% endraw %}\napp.kubernetes.io/version: {% raw %}{{ .Chart.AppVersion | quote }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\napp.kubernetes.io/managed-by: {% raw %}{{ .Release.Service }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n{{/*\nSelector labels\n*/}}\n{% raw %}{{- define \"mcp-mesh-registry.selectorLabels\" -}}{% endraw %}\napp.kubernetes.io/name: {% raw %}{{ include \"mcp-mesh-registry.name\" . }}{% endraw %}\napp.kubernetes.io/instance: {% raw %}{{ .Release.Name }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#step-5-values-file-structure","title":"Step 5: Values File Structure","text":"<p>Understanding the values structure helps with customization:</p> <pre><code># values.yaml structure\n# Global settings\nglobal:\n  imageRegistry: \"\"\n  imagePullSecrets: []\n\n# Image configuration (updated to match working examples)\nimage:\n  repository: mcp-mesh-base  # \ud83c\udfaf Updated from mcp-mesh/registry\n  tag: \"0.5.6\"  # \ud83c\udfaf Updated for local development\n  pullPolicy: Never  # \ud83c\udfaf For local development\n\n# Deployment settings\nreplicaCount: 1\nupdateStrategy:\n  type: RollingUpdate\n\n# Pod configuration\npodAnnotations: {}\npodSecurityContext:\n  runAsNonRoot: true\n  runAsUser: 65534\n\n# Container configuration\nsecurityContext:\n  capabilities:\n    drop:\n      - ALL\n  readOnlyRootFilesystem: true\n\n# Service configuration (updated ports)\nservice:\n  type: ClusterIP\n  port: 8000  # \ud83c\udfaf Registry uses port 8000\n  annotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"9090\"\n    prometheus.io/path: \"/metrics\"\n\n# Ingress configuration\ningress:\n  enabled: false\n  className: nginx\n  hosts:\n    - host: mcp-mesh.example.com\n      paths:\n        - path: /\n          pathType: Prefix\n\n# Resource limits\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n\n# Autoscaling\nautoscaling:\n  enabled: false\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 80\n\n# Registry-specific configuration (updated to match working examples)\nregistry:\n  host: \"0.0.0.0\"\n  port: 8000  # \ud83c\udfaf Updated from 8080 to 8000\n  database:\n    type: postgres  # \ud83c\udfaf Default to postgres like working examples\n    host: \"mcp-mesh-postgres\"\n    port: 5432\n    name: \"mcpmesh\"\n    username: \"mcpmesh\"\n    path: /data/registry.db  # For SQLite fallback\n\n# Agent-specific configuration (updated to match working examples)\nagent:\n  name: \"hello-world\"  # \ud83c\udfaf Default agent name\n  script: \"/app/agent.py\"  # \ud83c\udfaf Updated path\n  http:\n    enabled: true\n    port: 8080  # \ud83c\udfaf Standard agent port\n    host: \"0.0.0.0\"\n  capabilities:\n    - greeting\n    - translation\n  dependencies:\n    - dictionary-service\n    - cache-service\n\n# Registry configuration for agents\nregistry:\n  host: \"mcp-mesh-registry\"\n  port: \"8000\"\n  url: \"http://mcp-mesh-registry:8000\"\n\n# Mesh configuration\nmesh:\n  enabled: true\n  debug: false\n  logLevel: \"INFO\"\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#configuration-options","title":"Configuration Options","text":"Section Key Description Default (Updated) <code>image</code> <code>repository</code> Container image mcp-mesh-base <code>image</code> <code>tag</code> Image version 0.5 <code>image</code> <code>pullPolicy</code> Pull policy Never <code>replicaCount</code> - Number of replicas 1 <code>service</code> <code>type</code> Service type ClusterIP <code>service</code> <code>port</code> Service port 8000 (registry) <code>agent.http</code> <code>port</code> Agent HTTP port 8080 (agents) <code>persistence</code> <code>enabled</code> Enable PVC true <code>persistence</code> <code>size</code> Volume size 5Gi"},{"location":"06-helm-deployment/01-understanding-charts/#examples","title":"Examples","text":""},{"location":"06-helm-deployment/01-understanding-charts/#example-1-custom-agent-chart","title":"Example 1: Custom Agent Chart","text":"<p>Create your own agent chart based on mcp-mesh-agent:</p> <pre><code># my-weather-agent/Chart.yaml\napiVersion: v2\nname: weather-agent\ndescription: Weather service agent for MCP Mesh\ntype: application\nversion: 1.0.0\nappVersion: \"1.0.0\"\ndependencies:\n  - name: mcp-mesh-agent\n    version: \"0.5.6\"\n    repository: \"https://charts.mcp-mesh.io\"\n</code></pre> <p>Override values:</p> <pre><code># my-weather-agent/values.yaml (updated to match new chart structure)\nmcp-mesh-agent:\n  agent:\n    name: weather-service\n    http:\n      enabled: true\n      port: 8080\n    capabilities:\n      - weather_forecast\n      - weather_history\n    dependencies:\n      - location_service\n  registry:\n    host: \"mcp-mesh-registry\"\n    port: \"8000\"\n  mesh:\n    enabled: true\n    logLevel: \"INFO\"\n  env:\n    API_KEY: \"your-weather-api-key\"\n    CACHE_TTL: \"3600\"\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#example-2-template-customization","title":"Example 2: Template Customization","text":"<p>Add custom templates to extend functionality:</p> <pre><code># templates/custom-job.yaml\n{% raw %}{{- if .Values.agent.migrations.enabled }}{% endraw %}\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}-migrate\n  annotations:\n    \"helm.sh/hook\": pre-upgrade\n    \"helm.sh/hook-weight\": \"-1\"\nspec:\n  template:\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: migrate\n        image: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag }}{% endraw %}\"\n        command: [\"python\", \"-m\", \"migrations.run\"]\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n              key: database-url\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#best-practices","title":"Best Practices","text":"<ol> <li>Use Subchart Pattern: Create specific charts that depend on base charts</li> <li>Template Everything: Avoid hardcoded values in templates</li> <li>Validate Values: Use JSON schema for values validation</li> <li>Document Options: Include comprehensive values documentation</li> <li>Test Templates: Use <code>helm template</code> to verify output</li> </ol>"},{"location":"06-helm-deployment/01-understanding-charts/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"06-helm-deployment/01-understanding-charts/#pitfall-1-incorrect-indentation","title":"Pitfall 1: Incorrect Indentation","text":"<p>Problem: YAML indentation errors in templates</p> <p>Solution: Use nindent for consistent indentation:</p> <pre><code>labels: { { - include \"mcp-mesh-agent.labels\" . | nindent 4 } }\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#pitfall-2-missing-quotes","title":"Pitfall 2: Missing Quotes","text":"<p>Problem: Special characters breaking YAML</p> <p>Solution: Always quote string values:</p> <pre><code>- name: { { .Values.name | quote } }\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#testing","title":"Testing","text":""},{"location":"06-helm-deployment/01-understanding-charts/#template-testing","title":"Template Testing","text":"<pre><code># Test template rendering\nhelm template my-release ./mcp-mesh-registry \\\n  --values values-test.yaml \\\n  --debug\n\n# Validate against Kubernetes\nhelm template my-release ./mcp-mesh-registry | kubectl apply --dry-run=client -f -\n\n# Use kubeval for validation\nhelm template my-release ./mcp-mesh-registry | kubeval\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#unit-testing-with-helm","title":"Unit Testing with Helm","text":"<pre><code># tests/deployment_test.yaml\nsuite: test deployment\ntemplates:\n  - deployment.yaml\ntests:\n  - it: should create deployment with correct replicas\n    set:\n      replicaCount: 3\n    asserts:\n      - equal:\n          path: spec.replicas\n          value: 3\n\n  - it: should have correct image\n    set:\n      image.repository: custom/image\n      image.tag: v2.0.0\n    asserts:\n      - equal:\n          path: spec.template.spec.containers[0].image\n          value: custom/image:v2.0.0\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"06-helm-deployment/01-understanding-charts/#debug-helm-installations","title":"Debug Helm Installations","text":"<pre><code># Get release values\nhelm get values my-release -n mcp-mesh\n\n# Get generated manifests\nhelm get manifest my-release -n mcp-mesh\n\n# Debug installation issues\nhelm install my-release ./mcp-mesh-registry \\\n  --debug \\\n  --dry-run\n\n# Check hooks\nhelm get hooks my-release -n mcp-mesh\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#monitor-chart-usage","title":"Monitor Chart Usage","text":"<pre><code># List all releases\nhelm list -A\n\n# Get release history\nhelm history my-release -n mcp-mesh\n\n# Check release status\nhelm status my-release -n mcp-mesh\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"06-helm-deployment/01-understanding-charts/#issue-1-template-function-not-found","title":"Issue 1: Template Function Not Found","text":"<p>Symptoms: <code>function \"x\" not defined</code></p> <p>Cause: Missing or incorrectly named helper</p> <p>Solution:</p> <pre><code># Ensure helper is defined in _helpers.tpl\n{% raw %}{{- define \"mcp-mesh-agent.name\" -}}{% endraw %}\n{% raw %}{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n# Use correct name in template\n{% raw %}{{ include \"mcp-mesh-agent.name\" . }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/01-understanding-charts/#issue-2-values-not-propagating","title":"Issue 2: Values Not Propagating","text":"<p>Symptoms: Default values used instead of custom values</p> <p>Cause: Incorrect values path or missing defaults</p> <p>Solution:</p> <pre><code># Use default function\nvalue: {% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}\n\n# Check values path\nhelm get values my-release -n mcp-mesh\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"06-helm-deployment/01-understanding-charts/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>ConfigMap Size: Limited to 1MB for values</li> <li>Template Complexity: Go templates can be hard to debug</li> <li>CRD Handling: CRDs need special treatment in Helm 3</li> <li>Nested Dependencies: Limited to one level of dependencies</li> </ul>"},{"location":"06-helm-deployment/01-understanding-charts/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add JSON schema for values validation</li> <li> Create chart testing CI pipeline</li> <li> Add more helper functions</li> <li> Document advanced templating patterns</li> <li> Create chart development guide</li> </ul>"},{"location":"06-helm-deployment/01-understanding-charts/#summary","title":"Summary","text":"<p>You now understand the updated structure and components of MCP Mesh Helm charts:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Registry chart: Uses StatefulSet with port 8000, matches working K8s examples</li> <li>\ud83d\udd11 Agent chart: Includes automatic service discovery from <code>app.kubernetes.io/name</code> labels</li> <li>\ud83d\udd11 Service discovery: Auto-detects SERVICE_NAME and NAMESPACE from Kubernetes metadata</li> <li>\ud83d\udd11 Image consistency: Both charts use <code>mcp-mesh-base:0.2</code> with <code>Never</code> pull policy</li> <li>\ud83d\udd11 Port standardization: Registry=8000, Agents=8080</li> <li>\ud83d\udd11 Health endpoints: All use <code>/health</code> for startup, liveness, and readiness probes</li> </ul>"},{"location":"06-helm-deployment/01-understanding-charts/#next-steps","title":"Next Steps","text":"<p>Let's create a platform umbrella chart to deploy everything together.</p> <p>Continue to Platform Umbrella Chart \u2192</p> <p>\ud83d\udca1 Tip: Use <code>helm lint</code> to check your charts for common issues before deployment</p> <p>\ud83d\udcda Reference: Helm Chart Best Practices</p> <p>\ud83e\uddea Try It: Create a custom chart for your agent that extends the base mcp-mesh-agent chart</p>"},{"location":"06-helm-deployment/02-umbrella-chart/","title":"Multi-Agent Deployment","text":"<p>Deploy multiple MCP Mesh agents with the registry using individual charts</p>"},{"location":"06-helm-deployment/02-umbrella-chart/#overview","title":"Overview","text":"<p>While MCP Mesh doesn't currently have an umbrella chart, you can deploy multiple agents alongside the registry using the individual charts. This guide shows how to deploy a complete platform using the existing <code>mcp-mesh-registry</code> and <code>mcp-mesh-agent</code> charts, and provides a template for creating your own umbrella chart.</p> <p>We'll show how to deploy the registry and multiple agents systematically, and then show how to create an umbrella chart for automated deployment.</p>"},{"location":"06-helm-deployment/02-umbrella-chart/#key-concepts","title":"Key Concepts","text":"<ul> <li>Multi-Chart Deployment: Using individual charts to build a platform</li> <li>Dependency Management: Deploying components in the correct order</li> <li>Value Consistency: Ensuring compatible configuration across charts</li> <li>Service Discovery: Connecting agents to the registry</li> <li>Chart Aliases: Deploying multiple instances of the same chart</li> </ul>"},{"location":"06-helm-deployment/02-umbrella-chart/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"06-helm-deployment/02-umbrella-chart/#step-1-deploy-the-registry-first","title":"Step 1: Deploy the Registry First","text":"<p>Start by deploying the registry service:</p> <pre><code># From the project root/helm directory\ncd helm\n\n# Create namespace\nkubectl create namespace mcp-mesh\n\n# Deploy the registry\nhelm install mcp-registry ./mcp-mesh-registry \\\n  --namespace mcp-mesh \\\n  --values values-registry.yaml\n\n# Wait for registry to be ready\nkubectl wait --for=condition=available deployment/mcp-registry \\\n  -n mcp-mesh --timeout=300s\n\n# Verify registry is running\nkubectl get pods -n mcp-mesh -l app.kubernetes.io/name=mcp-mesh-registry\n</code></pre> <p>Create registry values file:</p> <pre><code># values-registry.yaml\nreplicaCount: 1\n\nimage:\n  repository: mcp-mesh-base\n  tag: \"0.5\"\n  pullPolicy: Never\n\nservice:\n  port: 8000\n\nregistry:\n  host: \"0.0.0.0\"\n  port: 8000\n  database:\n    type: sqlite\n    path: /data/registry.db\n\npersistence:\n  enabled: true\n  size: 5Gi\n\nresources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"500m\"\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#step-2-deploy-multiple-agents","title":"Step 2: Deploy Multiple Agents","text":"<p>Deploy various agents that connect to the registry:</p> <pre><code># Deploy hello-world agent\nhelm install hello-world-agent ./mcp-mesh-agent \\\n  --namespace mcp-mesh \\\n  --values values-hello-world.yaml\n\n# Deploy system agent\nhelm install system-agent ./mcp-mesh-agent \\\n  --namespace mcp-mesh \\\n  --values values-system.yaml\n\n# Deploy weather agent\nhelm install weather-agent ./mcp-mesh-agent \\\n  --namespace mcp-mesh \\\n  --values values-weather.yaml\n\n# Verify all agents are running\nkubectl get pods -n mcp-mesh\n</code></pre> <p>Create agent values files:</p> <pre><code># values-hello-world.yaml\nagent:\n  name: hello-world-agent\n  script: hello_world.py\n  http:\n    port: 8080\n  registryUrl: \"http://mcp-registry-mcp-mesh-registry:8000\"\n  capabilities:\n    - greeting\n    - translation\n\nimage:\n  repository: mcp-mesh-base\n  tag: \"0.5\"\n  pullPolicy: Never\n\nresources:\n  requests:\n    memory: \"128Mi\"\n    cpu: \"50m\"\n  limits:\n    memory: \"256Mi\"\n    cpu: \"100m\"\n</code></pre> <pre><code># values-system.yaml\nagent:\n  name: system-agent\n  script: system_agent.py\n  http:\n    port: 8080\n  registryUrl: \"http://mcp-registry-mcp-mesh-registry:8000\"\n  capabilities:\n    - file_operations\n    - system_info\n\nimage:\n  repository: mcp-mesh-base\n  tag: \"0.5\"\n  pullPolicy: Never\n\nresources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"512Mi\"\n    cpu: \"200m\"\n</code></pre> <pre><code># values-weather.yaml\nagent:\n  name: weather-agent\n  script: weather_agent.py\n  http:\n    port: 8080\n  registryUrl: \"http://mcp-registry-mcp-mesh-registry:8000\"\n  capabilities:\n    - weather_forecast\n    - weather_current\n  dependencies:\n    - location_service\n\nimage:\n  repository: mcp-mesh-base\n  tag: \"0.5\"\n  pullPolicy: Never\n\nenv:\n  WEATHER_API_KEY: \"your-api-key\"\n  CACHE_TTL: \"300\"\n\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n\nresources:\n  requests:\n    memory: \"128Mi\"\n    cpu: \"50m\"\n  limits:\n    memory: \"512Mi\"\n    cpu: \"200m\"\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#step-3-create-an-umbrella-chart-optional","title":"Step 3: Create an Umbrella Chart (Optional)","text":"<p>For future use, you can create an umbrella chart to deploy everything together:</p> <pre><code># Create umbrella chart directory\nmkdir mcp-mesh-platform\ncd mcp-mesh-platform\n\n# Create Chart.yaml\ncat &gt; Chart.yaml &lt;&lt; 'EOF'\napiVersion: v2\nname: mcp-mesh-platform\ndescription: Complete MCP Mesh platform deployment\ntype: application\nversion: 1.0.0\nappVersion: \"1.0.0\"\nkeywords:\n  - mcp-mesh\n  - platform\n  - microservices\n\ndependencies:\n  # Core registry\n  - name: mcp-mesh-registry\n    version: \"0.5.6\"\n    repository: \"file://../mcp-mesh-registry\"\n    condition: registry.enabled\n\n  # Agents using aliases for multiple instances\n  - name: mcp-mesh-agent\n    version: \"0.5.6\"\n    repository: \"file://../mcp-mesh-agent\"\n    alias: hello-world-agent\n    condition: agents.helloWorld.enabled\n\n  - name: mcp-mesh-agent\n    version: \"0.5.6\"\n    repository: \"file://../mcp-mesh-agent\"\n    alias: system-agent\n    condition: agents.system.enabled\n\n  - name: mcp-mesh-agent\n    version: \"0.5.6\"\n    repository: \"file://../mcp-mesh-agent\"\n    alias: weather-agent\n    condition: agents.weather.enabled\nEOF\n</code></pre> <p>Create umbrella chart values:</p> <pre><code># values.yaml\n# Global settings\nglobal:\n  imageRegistry: \"\"\n  namespace: mcp-mesh\n\n# Registry configuration\nregistry:\n  enabled: true\n\nmcp-mesh-registry:\n  replicaCount: 1\n  image:\n    repository: mcp-mesh-base\n    tag: \"0.5.6\"\n    pullPolicy: Never\n  service:\n    port: 8000\n  persistence:\n    enabled: true\n    size: 5Gi\n\n# Agent configurations\nagents:\n  helloWorld:\n    enabled: true\n  system:\n    enabled: true\n  weather:\n    enabled: true\n\nhello-world-agent:\n  agent:\n    name: hello-world-agent\n    script: hello_world.py\n    registryUrl: \"http://mcp-mesh-platform-mcp-mesh-registry:8000\"\n    capabilities:\n      - greeting\n      - translation\n  image:\n    repository: mcp-mesh-base\n    tag: \"0.5.6\"\n    pullPolicy: Never\n\nsystem-agent:\n  agent:\n    name: system-agent\n    script: system_agent.py\n    registryUrl: \"http://mcp-mesh-platform-mcp-mesh-registry:8000\"\n    capabilities:\n      - file_operations\n      - system_info\n  image:\n    repository: mcp-mesh-base\n    tag: \"0.5.6\"\n    pullPolicy: Never\n\nweather-agent:\n  agent:\n    name: weather-agent\n    script: weather_agent.py\n    registryUrl: \"http://mcp-mesh-platform-mcp-mesh-registry:8000\"\n    capabilities:\n      - weather_forecast\n      - weather_current\n  image:\n    repository: mcp-mesh-base\n    tag: \"0.5.6\"\n    pullPolicy: Never\n  env:\n    WEATHER_API_KEY: \"your-api-key\"\n  autoscaling:\n    enabled: true\n    minReplicas: 2\n    maxReplicas: 10\n</code></pre> <p>Deploy the platform:</p> <pre><code># Update dependencies\nhelm dependency update ./mcp-mesh-platform\n\n# Deploy the complete platform\nhelm install mcp-platform ./mcp-mesh-platform \\\n  --namespace mcp-mesh \\\n  --create-namespace\n</code></pre> <p>Platform-wide labels */}} {% raw %}{{- define \"mcp-mesh-platform.labels\" -}}{% endraw %} app.kubernetes.io/part-of: mcp-mesh-platform app.kubernetes.io/managed-by: {% raw %}{{ .Release.Service }}{% endraw %} helm.sh/chart: {% raw %}{{ include \"mcp-mesh-platform.chart\" . }}{% endraw %} {% raw %}{{- end }}{% endraw %}</p> <p>{{/* Registry URL for agents */}} {% raw %}{{- define \"mcp-mesh-platform.registryUrl\" -}}{% endraw %} {% raw %}{{- if .Values.registry.externalUrl -}}{% endraw %} {% raw %}{{- .Values.registry.externalUrl -}}{% endraw %} {% raw %}{{- else -}}{% endraw %} http://{% raw %}{{ .Release.Name }}{% endraw %}-mcp-mesh-registry:{% raw %}{{ .Values.registry.service.port | default 8080 }}{% endraw %} {% raw %}{{- end -}}{% endraw %} {% raw %}{{- end }}{% endraw %}</p> <p>{{/* Database connection string */}} {% raw %}{{- define \"mcp-mesh-platform.databaseUrl\" -}}{% endraw %} {% raw %}{{- if .Values.postgresql.enabled -}}{% endraw %} postgresql://{% raw %}{{ .Values.global.postgresql.auth.username | default \"postgres\" }}{% endraw %}:{% raw %}{{ .Values.global.postgresql.auth.postgresPassword }}{% endraw %}@{% raw %}{{ .Release.Name }}{% endraw %}-postgresql:5432/{% raw %}{{ .Values.global.postgresql.auth.database }}{% endraw %} {% raw %}{{- else -}}{% endraw %} {% raw %}{{- required \"External database URL required when postgresql.enabled=false\" .Values.registry.database.externalUrl -}}{% endraw %} {% raw %}{{- end -}}{% endraw %} {% raw %}{{- end }}{% endraw %}</p> <pre><code>### Step 4: Add Platform-Level Resources\n\nCreate additional resources for the platform:\n\n```yaml\n# templates/namespace.yaml\n{% raw %}{{- if .Values.createNamespace }}{% endraw %}\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: {% raw %}{{ .Release.Namespace }}{% endraw %}\n  labels:\n    {% raw %}{{- include \"mcp-mesh-platform.labels\" . | nindent 4 }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n---\n# templates/resourcequota.yaml\n{% raw %}{{- if .Values.resourceQuota.enabled }}{% endraw %}\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: {% raw %}{{ .Release.Name }}{% endraw %}-quota\n  namespace: {% raw %}{{ .Release.Namespace }}{% endraw %}\nspec:\n  hard:\n    {% raw %}{{- toYaml .Values.resourceQuota.hard | nindent 4 }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n---\n# templates/networkpolicy.yaml\n{% raw %}{{- if .Values.networkPolicies.enabled }}{% endraw %}\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: {% raw %}{{ .Release.Name }}{% endraw %}-default-deny\n  namespace: {% raw %}{{ .Release.Namespace }}{% endraw %}\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  egress:\n  # Allow DNS\n  - to:\n    - namespaceSelector: {}\n      podSelector:\n        matchLabels:\n          k8s-app: kube-dns\n    ports:\n    - protocol: UDP\n      port: 53\n  # Allow intra-namespace\n  {% raw %}{{- if .Values.networkPolicies.allowIntraNamespace }}{% endraw %}\n  - to:\n    - podSelector: {}\n  {% raw %}{{- end }}{% endraw %}\n  ingress:\n  # Allow from allowed namespaces\n  {% raw %}{{- range .Values.networkPolicies.allowedNamespaces }}{% endraw %}\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: {% raw %}{{ . }}{% endraw %}\n  {% raw %}{{- end }}{% endraw %}\n  # Allow intra-namespace\n  {% raw %}{{- if .Values.networkPolicies.allowIntraNamespace }}{% endraw %}\n  - from:\n    - podSelector: {}\n  {% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#step-5-create-deployment-scripts","title":"Step 5: Create Deployment Scripts","text":"<p>Add convenient deployment scripts:</p> <pre><code># templates/NOTES.txt\n{% raw %}{{- $registryUrl := include \"mcp-mesh-platform.registryUrl\" . -}}{% endraw %}\nMCP Mesh Platform has been deployed!\n\nRegistry URL: {% raw %}{{ $registryUrl }}{% endraw %}\n\nTo access the services:\n\n1. Registry:\n   {% raw %}{{- if .Values.registry.ingress.enabled }}{% endraw %}\n   URL: http://{% raw %}{{ (index .Values.registry.ingress.hosts 0).host }}{% endraw %}\n   {% raw %}{{- else }}{% endraw %}\n   kubectl port-forward -n {% raw %}{{ .Release.Namespace }}{% endraw %} svc/{% raw %}{{ .Release.Name }}{% endraw %}-mcp-mesh-registry 8080:8080\n   {% raw %}{{- end }}{% endraw %}\n\n2. Grafana Dashboard:\n   {% raw %}{{- if .Values.monitoring.grafana.enabled }}{% endraw %}\n   kubectl port-forward -n {% raw %}{{ .Release.Namespace }}{% endraw %} svc/{% raw %}{{ .Release.Name }}{% endraw %}-grafana 3000:80\n   Username: admin\n   Password: {% raw %}{{ .Values.monitoring.grafana.adminPassword }}{% endraw %}\n   {% raw %}{{- end }}{% endraw %}\n\n3. Prometheus:\n   {% raw %}{{- if .Values.monitoring.prometheus.enabled }}{% endraw %}\n   kubectl port-forward -n {% raw %}{{ .Release.Namespace }}{% endraw %} svc/{% raw %}{{ .Release.Name }}{% endraw %}-prometheus-server 9090:80\n   {% raw %}{{- end }}{% endraw %}\n\nDeployed Agents:\n{% raw %}{{- if .Values.agents.weather.enabled }}{% endraw %}\n- Weather Agent: {% raw %}{{ .Values.agents.weather.replicaCount }}{% endraw %} replicas\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- if .Values.agents.analytics.enabled }}{% endraw %}\n- Analytics Agent: {% raw %}{{ .Values.agents.analytics.replicaCount }}{% endraw %} replicas\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- if .Values.agents.notification.enabled }}{% endraw %}\n- Notification Agent: {% raw %}{{ .Values.agents.notification.replicaCount }}{% endraw %} replicas\n{% raw %}{{- end }}{% endraw %}\n\nTo check platform status:\n  helm status {% raw %}{{ .Release.Name }}{% endraw %} -n {% raw %}{{ .Release.Namespace }}{% endraw %}\n\nTo view all platform resources:\n  kubectl get all -n {% raw %}{{ .Release.Namespace }}{% endraw %} -l app.kubernetes.io/part-of=mcp-mesh-platform\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#configuration-options","title":"Configuration Options","text":"Section Key Description Default <code>global</code> <code>imageRegistry</code> Override all image registries \"\" <code>registry</code> <code>enabled</code> Deploy registry true <code>postgresql</code> <code>enabled</code> Deploy PostgreSQL true <code>agents.*</code> <code>enabled</code> Enable specific agents varies <code>monitoring.*</code> <code>enabled</code> Enable monitoring components false"},{"location":"06-helm-deployment/02-umbrella-chart/#examples","title":"Examples","text":""},{"location":"06-helm-deployment/02-umbrella-chart/#example-1-minimal-platform-deployment","title":"Example 1: Minimal Platform Deployment","text":"<pre><code># values-minimal.yaml\n# Deploy only registry and one agent\nregistry:\n  enabled: true\n  replicaCount: 1\n  persistence:\n    enabled: false\n\npostgresql:\n  enabled: false\n\nregistry:\n  database:\n    type: sqlite\n\nagents:\n  weather:\n    enabled: true\n    replicaCount: 1\n  analytics:\n    enabled: false\n  notification:\n    enabled: false\n\nmonitoring:\n  prometheus:\n    enabled: false\n  grafana:\n    enabled: false\n</code></pre> <p>Deploy:</p> <pre><code>helm install minimal-platform ./mcp-mesh-platform -f values-minimal.yaml\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#example-2-production-platform","title":"Example 2: Production Platform","text":"<pre><code># values-production.yaml\nglobal:\n  imageRegistry: \"myregistry.io\"\n  imagePullSecrets:\n    - name: regcred\n\nregistry:\n  enabled: true\n  replicaCount: 5\n\n  persistence:\n    enabled: true\n    size: 100Gi\n    storageClass: fast-ssd\n\n  resources:\n    requests:\n      memory: \"2Gi\"\n      cpu: \"1\"\n    limits:\n      memory: \"4Gi\"\n      cpu: \"2\"\n\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - mcp-mesh-registry\n          topologyKey: kubernetes.io/hostname\n\npostgresql:\n  enabled: true\n  auth:\n    postgresPassword: \"${POSTGRES_PASSWORD}\"\n  primary:\n    persistence:\n      size: 200Gi\n      storageClass: fast-ssd\n  metrics:\n    enabled: true\n\nagents:\n  weather:\n    enabled: true\n    replicaCount: 10\n    autoscaling:\n      enabled: true\n      minReplicas: 10\n      maxReplicas: 50\n\n  analytics:\n    enabled: true\n    replicaCount: 20\n    persistence:\n      enabled: true\n      size: 1Ti\n      storageClass: standard\n\nmonitoring:\n  prometheus:\n    enabled: true\n    server:\n      persistentVolume:\n        size: 100Gi\n      retention: \"30d\"\n\n  grafana:\n    enabled: true\n    persistence:\n      enabled: true\n      size: 20Gi\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#best-practices","title":"Best Practices","text":"<ol> <li>Use Dependency Conditions: Make components optional with conditions</li> <li>Global Values: Share common configuration in global section</li> <li>Value Validation: Add schema validation for complex values</li> <li>Atomic Deployments: Use <code>--atomic</code> flag for all-or-nothing deploys</li> <li>Version Lock: Pin all dependency versions for reproducibility</li> </ol>"},{"location":"06-helm-deployment/02-umbrella-chart/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"06-helm-deployment/02-umbrella-chart/#pitfall-1-circular-dependencies","title":"Pitfall 1: Circular Dependencies","text":"<p>Problem: Charts depend on each other causing deadlock</p> <p>Solution: Design clear dependency hierarchy:</p> <pre><code># Good: Clear hierarchy\npostgresql -&gt; registry -&gt; agents\n\n# Bad: Circular dependency\nagentA -&gt; agentB -&gt; agentA\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#pitfall-2-value-conflicts","title":"Pitfall 2: Value Conflicts","text":"<p>Problem: Sub-chart values override each other</p> <p>Solution: Use proper nesting:</p> <pre><code># Correct: Each chart has its own section\nweather-agent:\n  agent:\n    name: weather\n\nanalytics-agent:\n  agent:\n    name: analytics\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#testing","title":"Testing","text":""},{"location":"06-helm-deployment/02-umbrella-chart/#test-platform-deployment","title":"Test Platform Deployment","text":"<pre><code>#!/bin/bash\n# test-platform.sh\n\nNAMESPACE=\"mcp-mesh-test\"\n\necho \"Testing platform deployment...\"\n\n# Create namespace\nkubectl create namespace $NAMESPACE\n\n# Dry run first\nhelm install test-platform ./mcp-mesh-platform \\\n  --namespace $NAMESPACE \\\n  --dry-run --debug\n\n# Install with atomic flag\nhelm install test-platform ./mcp-mesh-platform \\\n  --namespace $NAMESPACE \\\n  --atomic \\\n  --timeout 10m\n\n# Wait for all pods\nkubectl wait --for=condition=ready pod --all -n $NAMESPACE --timeout=300s\n\n# Run tests\nhelm test test-platform -n $NAMESPACE\n\n# Cleanup\nhelm uninstall test-platform -n $NAMESPACE\nkubectl delete namespace $NAMESPACE\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#validate-platform-health","title":"Validate Platform Health","text":"<pre><code># test_platform_health.py\nimport requests\nimport kubernetes\nfrom kubernetes import client, config\n\ndef test_platform_components():\n    \"\"\"Verify all platform components are healthy\"\"\"\n    config.load_kube_config()\n    v1 = client.CoreV1Api()\n\n    namespace = \"mcp-mesh\"\n\n    # Check registry\n    registry_pods = v1.list_namespaced_pod(\n        namespace,\n        label_selector=\"app.kubernetes.io/name=mcp-mesh-registry\"\n    )\n    assert len(registry_pods.items) &gt;= 1\n    assert all(p.status.phase == \"Running\" for p in registry_pods.items)\n\n    # Check agents\n    for agent in [\"weather\", \"analytics\", \"notification\"]:\n        agent_pods = v1.list_namespaced_pod(\n            namespace,\n            label_selector=f\"app.kubernetes.io/name={agent}-agent\"\n        )\n        assert len(agent_pods.items) &gt;= 1\n\n    # Check monitoring\n    prometheus_pods = v1.list_namespaced_pod(\n        namespace,\n        label_selector=\"app.kubernetes.io/name=prometheus\"\n    )\n    assert len(prometheus_pods.items) &gt;= 1\n\n    print(\"All platform components healthy!\")\n\nif __name__ == \"__main__\":\n    test_platform_components()\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"06-helm-deployment/02-umbrella-chart/#monitor-platform-deployment","title":"Monitor Platform Deployment","text":"<pre><code># Watch deployment progress\nwatch -n 2 'helm status test-platform -n mcp-mesh'\n\n# View all platform resources\nkubectl get all -n mcp-mesh -l app.kubernetes.io/part-of=mcp-mesh-platform\n\n# Check dependency status\nhelm dependency list ./mcp-mesh-platform\n\n# View rendered templates\nhelm template test-platform ./mcp-mesh-platform | less\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#debug-deployment-issues","title":"Debug Deployment Issues","text":"<pre><code># Check events\nkubectl get events -n mcp-mesh --sort-by='.lastTimestamp'\n\n# View helm release details\nhelm get all test-platform -n mcp-mesh\n\n# Check values being used\nhelm get values test-platform -n mcp-mesh\n\n# Debug specific subchart\nhelm template test-platform ./mcp-mesh-platform \\\n  --show-only charts/mcp-mesh-registry/templates/statefulset.yaml\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"06-helm-deployment/02-umbrella-chart/#issue-1-dependency-download-failures","title":"Issue 1: Dependency Download Failures","text":"<p>Symptoms: <code>Error: failed to download \"postgresql\"</code></p> <p>Cause: Repository not added or network issues</p> <p>Solution:</p> <pre><code># Add required repositories\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n\n# Update dependencies\nhelm dependency update ./mcp-mesh-platform\n</code></pre>"},{"location":"06-helm-deployment/02-umbrella-chart/#issue-2-resource-conflicts","title":"Issue 2: Resource Conflicts","text":"<p>Symptoms: <code>Error: rendered manifests contain a resource that already exists</code></p> <p>Cause: Previous installation remnants</p> <p>Solution:</p> <pre><code># Check existing resources\nkubectl get all -n mcp-mesh -l app.kubernetes.io/managed-by=Helm\n\n# Force upgrade\nhelm upgrade --install test-platform ./mcp-mesh-platform \\\n  --force \\\n  --namespace mcp-mesh\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"06-helm-deployment/02-umbrella-chart/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Large Deployments: May hit ConfigMap size limits with many agents</li> <li>Cross-Namespace: Umbrella charts work best in single namespace</li> <li>Dependency Versions: Must manually update subchart versions</li> <li>Values Complexity: Deep nesting can be hard to manage</li> </ul>"},{"location":"06-helm-deployment/02-umbrella-chart/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add backup/restore jobs to platform</li> <li> Create platform operator for dynamic agent management</li> <li> Add service mesh integration</li> <li> Document disaster recovery procedures</li> <li> Add cost optimization configurations</li> </ul>"},{"location":"06-helm-deployment/02-umbrella-chart/#summary","title":"Summary","text":"<p>You can now deploy the complete MCP Mesh platform with an umbrella chart:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Single chart deploys entire platform</li> <li>\ud83d\udd11 Dependencies managed automatically</li> <li>\ud83d\udd11 Flexible configuration through values</li> <li>\ud83d\udd11 Production-ready with monitoring included</li> </ul>"},{"location":"06-helm-deployment/02-umbrella-chart/#next-steps","title":"Next Steps","text":"<p>Let's explore customizing deployments with values files.</p> <p>Continue to Customizing Values \u2192</p> <p>\ud83d\udca1 Tip: Use <code>helm dependency build</code> instead of <code>update</code> to use local Chart.lock file for reproducible builds</p> <p>\ud83d\udcda Reference: Helm Dependencies Documentation</p> <p>\ud83e\uddea Try It: Create a custom platform chart that includes your own agents alongside the standard ones</p>"},{"location":"06-helm-deployment/03-customizing-values/","title":"Customizing Values","text":"<p>Master Helm values management for flexible MCP Mesh deployments</p>"},{"location":"06-helm-deployment/03-customizing-values/#overview","title":"Overview","text":"<p>Helm values files are the key to customizing deployments without modifying charts. This guide covers advanced techniques for managing values across environments, organizing complex configurations, using templating within values, and implementing security best practices. You'll learn how to structure values for maintainability and create reusable configuration patterns.</p> <p>Proper values management is crucial for maintaining consistent deployments across development, staging, and production environments.</p>"},{"location":"06-helm-deployment/03-customizing-values/#key-concepts","title":"Key Concepts","text":"<ul> <li>Values Hierarchy: How Helm merges multiple values files</li> <li>Value Templates: Using Go templates in values</li> <li>Environment Separation: Managing environment-specific configs</li> <li>Secrets Management: Secure handling of sensitive values</li> <li>Values Validation: Ensuring configuration correctness</li> </ul>"},{"location":"06-helm-deployment/03-customizing-values/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"06-helm-deployment/03-customizing-values/#step-1-understanding-values-precedence","title":"Step 1: Understanding Values Precedence","text":"<p>Helm merges values in a specific order (later overrides earlier):</p> <pre><code># Order of precedence (lowest to highest):\n1. Chart's default values.yaml\n2. Parent chart's values\n3. Values files (-f flag) in order\n4. Individual --set flags\n\n# Example showing precedence\nhelm install my-release ./chart \\\n  -f values-base.yaml \\           # 2nd priority\n  -f values-production.yaml \\     # 3rd priority\n  --set image.tag=v2.0.0         # Highest priority\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#step-2-structure-values-for-maintainability","title":"Step 2: Structure Values for Maintainability","text":"<p>Organize values files hierarchically:</p> <pre><code>values/\n\u251c\u2500\u2500 base/\n\u2502   \u251c\u2500\u2500 values.yaml          # Base configuration\n\u2502   \u251c\u2500\u2500 monitoring.yaml      # Monitoring settings\n\u2502   \u2514\u2500\u2500 security.yaml        # Security policies\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 development.yaml     # Dev overrides\n\u2502   \u251c\u2500\u2500 staging.yaml         # Staging overrides\n\u2502   \u2514\u2500\u2500 production.yaml      # Prod overrides\n\u251c\u2500\u2500 agents/\n\u2502   \u251c\u2500\u2500 weather.yaml         # Weather agent config\n\u2502   \u251c\u2500\u2500 analytics.yaml       # Analytics agent config\n\u2502   \u2514\u2500\u2500 notification.yaml    # Notification agent config\n\u2514\u2500\u2500 secrets/\n    \u251c\u2500\u2500 dev-secrets.yaml     # Dev secrets (encrypted)\n    \u251c\u2500\u2500 staging-secrets.yaml # Staging secrets\n    \u2514\u2500\u2500 prod-secrets.yaml    # Prod secrets\n</code></pre> <p>Base values file:</p> <pre><code># values/base/values.yaml\n# Common configuration across all environments\n\nglobal:\n  # Organization-wide settings\n  organization: \"mcp-mesh-corp\"\n  domain: \"mcp-mesh.io\"\n\n  # Common labels\n  labels:\n    team: \"platform\"\n    project: \"mcp-mesh\"\n    costCenter: \"engineering\"\n\n  # Default resource constraints\n  resources:\n    defaults:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"100m\"\n      limits:\n        memory: \"512Mi\"\n        cpu: \"500m\"\n\n# Registry defaults\nregistry:\n  enabled: true\n\n  image:\n    repository: mcp-mesh/registry\n    pullPolicy: IfNotPresent\n\n  service:\n    type: ClusterIP\n    port: 8080\n\n  persistence:\n    enabled: true\n    storageClass: \"\" # Use cluster default\n    accessMode: ReadWriteOnce\n\n  # Health check defaults\n  livenessProbe:\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 3\n\n  readinessProbe:\n    initialDelaySeconds: 5\n    periodSeconds: 5\n    timeoutSeconds: 3\n    failureThreshold: 3\n\n# Agent defaults\nagentDefaults:\n  image:\n    pullPolicy: IfNotPresent\n\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n\n  podSecurityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    fsGroup: 1000\n\n  containerSecurityContext:\n    allowPrivilegeEscalation: false\n    readOnlyRootFilesystem: true\n    capabilities:\n      drop:\n        - ALL\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#step-3-environment-specific-overrides","title":"Step 3: Environment-Specific Overrides","text":"<p>Create environment-specific values:</p> <pre><code># values/environments/development.yaml\n# Development environment overrides\n\nglobal:\n  environment: development\n\n  # Dev-specific labels\n  labels:\n    environment: dev\n    tier: non-production\n\n# Minimal resources for dev\nregistry:\n  replicaCount: 1\n\n  persistence:\n    size: 5Gi\n\n  resources:\n    requests:\n      memory: \"128Mi\"\n      cpu: \"50m\"\n    limits:\n      memory: \"256Mi\"\n      cpu: \"100m\"\n\n# Enable debug logging\nlogging:\n  level: debug\n  format: text\n\n# Simplified monitoring\nmonitoring:\n  enabled: false\n\n# Agent configurations for dev\nagents:\n  weather:\n    replicaCount: 1\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"25m\"\n    env:\n      LOG_LEVEL: \"debug\"\n      CACHE_ENABLED: \"false\"\n</code></pre> <p>Production values:</p> <pre><code># values/environments/production.yaml\n# Production environment overrides\n\nglobal:\n  environment: production\n\n  labels:\n    environment: prod\n    tier: production\n    compliance: \"pci-dss\"\n\n# HA configuration\nregistry:\n  replicaCount: 5\n\n  persistence:\n    size: 100Gi\n    storageClass: \"fast-ssd\"\n\n  resources:\n    requests:\n      memory: \"2Gi\"\n      cpu: \"1000m\"\n    limits:\n      memory: \"4Gi\"\n      cpu: \"2000m\"\n\n  # Anti-affinity for distribution\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - mcp-mesh-registry\n          topologyKey: kubernetes.io/hostname\n\n  # Production database\n  database:\n    type: postgresql\n    connectionPool:\n      min: 10\n      max: 50\n    ssl:\n      enabled: true\n      mode: require\n\n# Structured logging for production\nlogging:\n  level: info\n  format: json\n\n  # Send to centralized logging\n  outputs:\n    - type: stdout\n    - type: fluentd\n      host: fluentd.logging.svc.cluster.local\n      port: 24224\n\n# Full monitoring stack\nmonitoring:\n  enabled: true\n\n  prometheus:\n    retention: 30d\n    storageSize: 200Gi\n\n  grafana:\n    persistence:\n      enabled: true\n      size: 20Gi\n\n  alerts:\n    enabled: true\n    pagerduty:\n      enabled: true\n      serviceKey: \"${PAGERDUTY_SERVICE_KEY}\"\n\n# Production agent settings\nagents:\n  weather:\n    replicaCount: 10\n\n    autoscaling:\n      enabled: true\n      minReplicas: 10\n      maxReplicas: 50\n      metrics:\n        - type: Resource\n          resource:\n            name: cpu\n            target:\n              type: Utilization\n              averageUtilization: 70\n        - type: Resource\n          resource:\n            name: memory\n            target:\n              type: Utilization\n              averageUtilization: 80\n\n    resources:\n      requests:\n        memory: \"512Mi\"\n        cpu: \"250m\"\n      limits:\n        memory: \"1Gi\"\n        cpu: \"500m\"\n\n    # Production-grade probes\n    livenessProbe:\n      httpGet:\n        path: /health\n        port: http\n      initialDelaySeconds: 60\n      periodSeconds: 30\n      timeoutSeconds: 10\n      failureThreshold: 5\n\n    # Circuit breaker configuration\n    circuitBreaker:\n      enabled: true\n      requestVolumeThreshold: 20\n      errorThresholdPercentage: 50\n      sleepWindow: 30000\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#step-4-advanced-templating-in-values","title":"Step 4: Advanced Templating in Values","text":"<p>Use Go templates for dynamic values:</p> <pre><code># values/templates/dynamic-values.yaml\n# Dynamic value generation\n\n{% raw %}{{- $environment := .Values.global.environment | default \"development\" -}}{% endraw %}\n{% raw %}{{- $domain := .Values.global.domain | default \"local\" -}}{% endraw %}\n\n# Generate URLs based on environment\nurls:\n  registry:\n    internal: \"http://{% raw %}{{ .Release.Name }}{% endraw %}-registry.{% raw %}{{ .Release.Namespace }}{% endraw %}.svc.cluster.local:8080\"\n    external: \"https://registry.{% raw %}{{ $environment }}{% endraw %}.{% raw %}{{ $domain }}{% endraw %}\"\n\n  agents:\n    {% raw %}{{- range $name, $agent := .Values.agents }}{% endraw %}\n    {% raw %}{{ $name }}{% endraw %}:\n      internal: \"http://{% raw %}{{ $.Release.Name }}{% endraw %}-{% raw %}{{ $name }}{% endraw %}.{% raw %}{{ $.Release.Namespace }}{% endraw %}.svc.cluster.local:8080\"\n      external: \"https://{% raw %}{{ $name }}{% endraw %}.{% raw %}{{ $environment }}{% endraw %}.{% raw %}{{ $domain }}{% endraw %}\"\n    {% raw %}{{- end }}{% endraw %}\n\n# Environment-specific features\nfeatures:\n  debugMode: {% raw %}{{ eq $environment \"development\" }}{% endraw %}\n  tracing: {% raw %}{{ has $environment (list \"staging\" \"production\") }}{% endraw %}\n  profiling: {% raw %}{{ eq $environment \"development\" }}{% endraw %}\n\n# Resource multipliers by environment\nresourceMultipliers:\n  {% raw %}{{- if eq $environment \"production\" }}{% endraw %}\n  cpu: 2.0\n  memory: 2.0\n  {% raw %}{{- else if eq $environment \"staging\" }}{% endraw %}\n  cpu: 1.5\n  memory: 1.5\n  {% raw %}{{- else }}{% endraw %}\n  cpu: 0.5\n  memory: 0.5\n  {% raw %}{{- end }}{% endraw %}\n\n# Conditional configurations\n{% raw %}{{- if eq $environment \"production\" }}{% endraw %}\nbackup:\n  enabled: true\n  schedule: \"0 2 * * *\"\n  retention: 30\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#step-5-secrets-management","title":"Step 5: Secrets Management","text":"<p>Implement secure secrets handling:</p> <pre><code># values/secrets/production-secrets.yaml (encrypted with SOPS)\n# sops --encrypt --age $AGE_PUBLIC_KEY production-secrets.yaml\n\ndatabase:\n  password: ENC[AES256_GCM,data:1234567890abcdef,iv:...,tag:...,type:str]\n\nagents:\n  weather:\n    apiKey: ENC[AES256_GCM,data:weatherapi123,iv:...,tag:...,type:str]\n\n  notification:\n    smtp:\n      password: ENC[AES256_GCM,data:smtppass456,iv:...,tag:...,type:str]\n    twilio:\n      authToken: ENC[AES256_GCM,data:twiliotoken789,iv:...,tag:...,type:str]\n</code></pre> <p>Use with Helm:</p> <pre><code># Decrypt and install\nsops -d values/secrets/production-secrets.yaml | \\\n  helm install my-release ./chart \\\n    -f values/base/values.yaml \\\n    -f values/environments/production.yaml \\\n    -f -\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#configuration-options","title":"Configuration Options","text":"Technique Use Case Example Multiple <code>-f</code> Layer configurations <code>-f base.yaml -f prod.yaml</code> <code>--set</code> Override specific values <code>--set image.tag=v2.0.0</code> <code>--set-string</code> Force string type <code>--set-string port=\"8080\"</code> <code>--set-file</code> Load file content <code>--set-file tls.cert=cert.pem</code> <code>--values</code> Same as <code>-f</code> <code>--values custom.yaml</code>"},{"location":"06-helm-deployment/03-customizing-values/#examples","title":"Examples","text":""},{"location":"06-helm-deployment/03-customizing-values/#example-1-multi-region-deployment","title":"Example 1: Multi-Region Deployment","text":"<pre><code># values/regions/us-east.yaml\nglobal:\n  region: us-east-1\n  availabilityZones:\n    - us-east-1a\n    - us-east-1b\n    - us-east-1c\n\ningress:\n  enabled: true\n  annotations:\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789:certificate/abc\n  hosts:\n    - host: api.us-east.mcp-mesh.io\n      paths:\n        - path: /*\n          pathType: Prefix\n\nnodeSelector:\n  topology.kubernetes.io/region: us-east-1\n\n---\n# values/regions/eu-west.yaml\nglobal:\n  region: eu-west-1\n  availabilityZones:\n    - eu-west-1a\n    - eu-west-1b\n    - eu-west-1c\n\ningress:\n  enabled: true\n  annotations:\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:123456789:certificate/def\n  hosts:\n    - host: api.eu-west.mcp-mesh.io\n      paths:\n        - path: /*\n          pathType: Prefix\n\nnodeSelector:\n  topology.kubernetes.io/region: eu-west-1\n</code></pre> <p>Deploy to multiple regions:</p> <pre><code># US East deployment\nhelm install mcp-mesh-us-east ./chart \\\n  -f values/base/values.yaml \\\n  -f values/environments/production.yaml \\\n  -f values/regions/us-east.yaml \\\n  --namespace mcp-mesh-us-east\n\n# EU West deployment\nhelm install mcp-mesh-eu-west ./chart \\\n  -f values/base/values.yaml \\\n  -f values/environments/production.yaml \\\n  -f values/regions/eu-west.yaml \\\n  --namespace mcp-mesh-eu-west\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#example-2-feature-flags-configuration","title":"Example 2: Feature Flags Configuration","text":"<pre><code># values/features/feature-flags.yaml\nfeatureFlags:\n  # Core features\n  core:\n    newAuthSystem:\n      enabled: {% raw %}{{ eq .Values.global.environment \"development\" }}{% endraw %}\n      rolloutPercentage: 10\n\n    improvedCaching:\n      enabled: true\n      rolloutPercentage: {% raw %}{{ .Values.global.featureRollout.improvedCaching | default 50 }}{% endraw %}\n\n  # Agent-specific features\n  agents:\n    weather:\n      mlPredictions:\n        enabled: {% raw %}{{ has .Values.global.environment (list \"staging\" \"production\") }}{% endraw %}\n        modelVersion: \"2.1.0\"\n\n      premiumApi:\n        enabled: {% raw %}{{ .Values.global.environment | eq \"production\" }}{% endraw %}\n        rateLimit: 1000\n\n    analytics:\n      realtimeProcessing:\n        enabled: false\n        betaUsers:\n          - \"customer-123\"\n          - \"customer-456\"\n\n# Apply feature flags to agents\n{% raw %}{{- range $agent, $features := .Values.featureFlags.agents }}{% endraw %}\nagents:\n  {% raw %}{{ $agent }}{% endraw %}:\n    env:\n      {% raw %}{{- range $feature, $config := $features }}{% endraw %}\n      FEATURE_{% raw %}{{ $feature | upper }}{% endraw %}_ENABLED: {% raw %}{{ $config.enabled | quote }}{% endraw %}\n      {% raw %}{{- if $config.rolloutPercentage }}{% endraw %}\n      FEATURE_{% raw %}{{ $feature | upper }}{% endraw %}_ROLLOUT: {% raw %}{{ $config.rolloutPercentage | quote }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#best-practices","title":"Best Practices","text":"<ol> <li>Layer Values Files: Base \u2192 Environment \u2192 Region \u2192 Secrets</li> <li>Use Anchors: YAML anchors for repeated configurations</li> <li>Validate Values: JSON Schema validation before deployment</li> <li>Version Control: Track all values files in Git</li> <li>Document Options: Comment complex value structures</li> </ol>"},{"location":"06-helm-deployment/03-customizing-values/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"06-helm-deployment/03-customizing-values/#pitfall-1-value-type-confusion","title":"Pitfall 1: Value Type Confusion","text":"<p>Problem: Helm interprets numbers/booleans incorrectly</p> <p>Solution: Use explicit typing:</p> <pre><code># Force string\n--set-string version=\"1.10\"\n\n# In values file\nport: \"8080\"  # Quoted to ensure string\nenabled: true # Explicit boolean\ncount: 3      # Explicit number\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#pitfall-2-deep-nesting-issues","title":"Pitfall 2: Deep Nesting Issues","text":"<p>Problem: Deeply nested values are hard to override</p> <p>Solution: Flatten where possible:</p> <pre><code># Hard to override\ndatabase:\n  connection:\n    pool:\n      min: 10\n      max: 50\n\n# Better\ndatabasePoolMin: 10\ndatabasePoolMax: 50\n\n# Or use --set with dots\n--set database.connection.pool.min=20\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#testing","title":"Testing","text":""},{"location":"06-helm-deployment/03-customizing-values/#validate-values-rendering","title":"Validate Values Rendering","text":"<pre><code>#!/bin/bash\n# validate-values.sh\n\necho \"Validating values files...\"\n\n# Check YAML syntax\nfor file in values/**/*.yaml; do\n  echo \"Checking $file\"\n  yq eval '.' \"$file\" &gt; /dev/null || exit 1\ndone\n\n# Test value merging\nhelm template test-release ./chart \\\n  -f values/base/values.yaml \\\n  -f values/environments/production.yaml \\\n  --debug &gt; /tmp/rendered.yaml\n\n# Validate rendered manifests\nkubectl apply --dry-run=client -f /tmp/rendered.yaml\n\necho \"Values validation complete!\"\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#unit-test-values","title":"Unit Test Values","text":"<pre><code># test_values.py\nimport yaml\nimport pytest\n\ndef load_values(*files):\n    \"\"\"Load and merge multiple values files\"\"\"\n    result = {}\n    for file in files:\n        with open(file) as f:\n            data = yaml.safe_load(f)\n            # Simple merge (use deepmerge for production)\n            result.update(data)\n    return result\n\ndef test_production_values():\n    \"\"\"Test production values configuration\"\"\"\n    values = load_values(\n        'values/base/values.yaml',\n        'values/environments/production.yaml'\n    )\n\n    # Check critical settings\n    assert values['registry']['replicaCount'] &gt;= 3\n    assert values['registry']['persistence']['enabled'] is True\n    assert values['logging']['level'] == 'info'\n    assert values['monitoring']['enabled'] is True\n\ndef test_resource_limits():\n    \"\"\"Ensure resource limits are set\"\"\"\n    values = load_values(\n        'values/base/values.yaml',\n        'values/environments/production.yaml'\n    )\n\n    # Check registry resources\n    registry_resources = values['registry']['resources']\n    assert 'limits' in registry_resources\n    assert 'requests' in registry_resources\n    assert registry_resources['limits']['memory']\n    assert registry_resources['limits']['cpu']\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"06-helm-deployment/03-customizing-values/#debug-values-merging","title":"Debug Values Merging","text":"<pre><code># Show final values after merging\nhelm get values my-release -n mcp-mesh\n\n# Show computed values (with templates evaluated)\nhelm get values my-release -n mcp-mesh --all\n\n# Debug specific value path\nhelm template my-release ./chart \\\n  -f values1.yaml -f values2.yaml \\\n  --show-only templates/deployment.yaml | grep -A5 \"resources:\"\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#monitor-configuration-drift","title":"Monitor Configuration Drift","text":"<pre><code># Compare deployed values with files\ndiff &lt;(helm get values my-release -n mcp-mesh) values/production-deployed.yaml\n\n# Track values changes\nhelm get values my-release --revision 1 &gt; rev1-values.yaml\nhelm get values my-release --revision 2 &gt; rev2-values.yaml\ndiff rev1-values.yaml rev2-values.yaml\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"06-helm-deployment/03-customizing-values/#issue-1-values-not-applying","title":"Issue 1: Values Not Applying","text":"<p>Symptoms: Changes in values file don't affect deployment</p> <p>Cause: Cache or incorrect file path</p> <p>Solution:</p> <pre><code># Clear any cache\nrm -rf charts/ Chart.lock\n\n# Verify file path\nls -la values/production.yaml\n\n# Test with explicit path\nhelm upgrade my-release ./chart \\\n  -f $(pwd)/values/production.yaml \\\n  --debug --dry-run\n</code></pre>"},{"location":"06-helm-deployment/03-customizing-values/#issue-2-template-errors-in-values","title":"Issue 2: Template Errors in Values","text":"<p>Symptoms: <code>error converting YAML to JSON</code></p> <p>Cause: Go template syntax in values file</p> <p>Solution:</p> <pre><code># Values files don't support templating by default\n# Move templates to tpl files:\n\n# templates/values-helper.tpl\n{% raw %}{{- define \"dynamic.values\" -}}{% endraw %}\nenvironment: {% raw %}{{ .Values.global.environment }}{% endraw %}\nurl: https://{% raw %}{{ .Values.global.environment }}{% endraw %}.example.com\n{% raw %}{{- end }}{% endraw %}\n\n# Use in templates\n{% raw %}{{- $dynamicValues := include \"dynamic.values\" . | fromYaml }}{% endraw %}\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"06-helm-deployment/03-customizing-values/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Size Limits: ConfigMaps limited to 1MB</li> <li>No Templating: Values files don't support Go templates directly</li> <li>Type Coercion: YAML type inference can be problematic</li> <li>Deep Merging: Helm doesn't deep merge arrays</li> </ul>"},{"location":"06-helm-deployment/03-customizing-values/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add values schema validation</li> <li> Create values generator tool</li> <li> Document GitOps values patterns</li> <li> Add encryption key management guide</li> <li> Create values migration scripts</li> </ul>"},{"location":"06-helm-deployment/03-customizing-values/#summary","title":"Summary","text":"<p>You now understand advanced Helm values management:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Layer values files for maintainability</li> <li>\ud83d\udd11 Use environment-specific overrides</li> <li>\ud83d\udd11 Implement secure secrets management</li> <li>\ud83d\udd11 Test and validate values configurations</li> </ul>"},{"location":"06-helm-deployment/03-customizing-values/#next-steps","title":"Next Steps","text":"<p>Let's explore deploying to multiple environments.</p> <p>Continue to Multi-Environment Deployment \u2192</p> <p>\ud83d\udca1 Tip: Use <code>yq</code> tool to manipulate YAML values files programmatically: <code>yq eval '.registry.replicaCount = 5' -i values.yaml</code></p> <p>\ud83d\udcda Reference: Helm Values Files Documentation</p> <p>\ud83e\uddea Try It: Create a values inheritance hierarchy for dev\u2192staging\u2192production with proper overrides</p>"},{"location":"06-helm-deployment/04-multi-environment/","title":"Multi-Environment Deployment","text":"<p>Manage MCP Mesh deployments across development, staging, and production environments</p>"},{"location":"06-helm-deployment/04-multi-environment/#overview","title":"Overview","text":"<p>Managing deployments across multiple environments is a critical aspect of production operations. This guide shows how to structure Helm deployments for different environments, manage environment-specific configurations, handle secrets securely, and implement promotion workflows. You'll learn patterns for maintaining consistency while allowing environment-specific customizations.</p> <p>Proper multi-environment management ensures reliable deployments and reduces configuration drift between environments.</p>"},{"location":"06-helm-deployment/04-multi-environment/#key-concepts","title":"Key Concepts","text":"<ul> <li>Environment Separation: Isolating dev, staging, and production</li> <li>Configuration Inheritance: Base configs with environment overrides</li> <li>Secret Management: Environment-specific sensitive data</li> <li>Promotion Workflows: Moving changes through environments</li> <li>Environment Parity: Maintaining consistency across environments</li> </ul>"},{"location":"06-helm-deployment/04-multi-environment/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"06-helm-deployment/04-multi-environment/#step-1-environment-structure","title":"Step 1: Environment Structure","text":"<p>Organize your environments with a clear hierarchy:</p> <pre><code>environments/\n\u251c\u2500\u2500 base/                    # Shared configuration\n\u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u2514\u2500\u2500 values.yaml\n\u251c\u2500\u2500 development/\n\u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u251c\u2500\u2500 values.yaml\n\u2502   \u2514\u2500\u2500 secrets.yaml\n\u251c\u2500\u2500 staging/\n\u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u251c\u2500\u2500 values.yaml\n\u2502   \u2514\u2500\u2500 secrets.yaml\n\u2514\u2500\u2500 production/\n    \u251c\u2500\u2500 kustomization.yaml\n    \u251c\u2500\u2500 values.yaml\n    \u251c\u2500\u2500 secrets.yaml\n    \u2514\u2500\u2500 values-dr.yaml      # Disaster recovery\n\n# Helm releases structure\nreleases/\n\u251c\u2500\u2500 dev/\n\u2502   \u2514\u2500\u2500 mcp-mesh/\n\u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 mcp-mesh/\n\u2514\u2500\u2500 prod/\n    \u251c\u2500\u2500 mcp-mesh/\n    \u2514\u2500\u2500 mcp-mesh-dr/\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#step-2-base-configuration","title":"Step 2: Base Configuration","text":"<p>Create a base configuration that all environments inherit:</p> <pre><code># environments/base/values.yaml\n# Common configuration across all environments\n\nglobal:\n  # Organization settings\n  organization: \"mcp-mesh-corp\"\n  project: \"mcp-mesh\"\n\n  # Common labels\n  labels:\n    app: \"mcp-mesh\"\n    managedBy: \"helm\"\n    version: \"1.0.0\"\n\n  # Image configuration\n  imageRegistry: \"registry.mcp-mesh.io\"\n  imagePullPolicy: \"IfNotPresent\"\n\n  # Security defaults\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    fsGroup: 1000\n\n# Registry configuration\nregistry:\n  image:\n    repository: mcp-mesh/registry\n    tag: \"1.0.0\"\n\n  service:\n    type: ClusterIP\n    port: 8080\n\n  # Health checks\n  livenessProbe:\n    initialDelaySeconds: 30\n    periodSeconds: 10\n\n  readinessProbe:\n    initialDelaySeconds: 5\n    periodSeconds: 5\n\n# Agent defaults\nagentDefaults:\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n\n  securityContext:\n    allowPrivilegeEscalation: false\n    readOnlyRootFilesystem: true\n    capabilities:\n      drop:\n        - ALL\n\n# Monitoring defaults\nmonitoring:\n  metrics:\n    enabled: true\n    port: 9090\n\n  serviceMonitor:\n    interval: 30s\n    scrapeTimeout: 10s\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#step-3-development-environment","title":"Step 3: Development Environment","text":"<p>Configure development for rapid iteration:</p> <pre><code># environments/development/values.yaml\n# Development-specific overrides\n\nglobal:\n  environment: development\n\n  # Dev cluster domain\n  domain: \"dev.mcp-mesh.local\"\n\n  # Development tags\n  labels:\n    environment: \"dev\"\n    tier: \"development\"\n\n# Single instance for dev\nregistry:\n  replicaCount: 1\n\n  # Use local storage\n  persistence:\n    enabled: true\n    size: 10Gi\n    storageClass: \"standard\"\n\n  # Minimal resources\n  resources:\n    requests:\n      memory: \"128Mi\"\n      cpu: \"100m\"\n    limits:\n      memory: \"512Mi\"\n      cpu: \"500m\"\n\n  # SQLite for simplicity\n  database:\n    type: \"sqlite\"\n    path: \"/data/registry.db\"\n\n  # Enable debug logging\n  logging:\n    level: \"DEBUG\"\n    format: \"text\"\n\n# Development agents\nagents:\n  weather:\n    enabled: true\n    replicaCount: 1\n    image:\n      tag: \"0.3\" # Use 0.3 in dev\n    env:\n      LOG_LEVEL: \"DEBUG\"\n      CACHE_ENABLED: \"false\"\n      MOCK_EXTERNAL_APIS: \"true\"\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"50m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"200m\"\n\n# Simplified monitoring\nmonitoring:\n  prometheus:\n    enabled: false\n  grafana:\n    enabled: false\n\n# Dev ingress with self-signed cert\ningress:\n  enabled: true\n  className: \"nginx\"\n  hosts:\n    - host: \"mcp-mesh.dev.local\"\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - hosts:\n        - \"mcp-mesh.dev.local\"\n      secretName: mcp-mesh-dev-tls\n\n# Development features\nfeatures:\n  debugMode: true\n  mockData: true\n  rateLimit: false\n  authentication: false\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#step-4-staging-environment","title":"Step 4: Staging Environment","text":"<p>Configure staging to mirror production:</p> <pre><code># environments/staging/values.yaml\n# Staging-specific overrides\n\nglobal:\n  environment: staging\n\n  # Staging domain\n  domain: \"staging.mcp-mesh.io\"\n\n  labels:\n    environment: \"staging\"\n    tier: \"pre-production\"\n\n# Multi-replica for testing HA\nregistry:\n  replicaCount: 3\n\n  persistence:\n    enabled: true\n    size: 50Gi\n    storageClass: \"fast-ssd\"\n\n  resources:\n    requests:\n      memory: \"512Mi\"\n      cpu: \"250m\"\n    limits:\n      memory: \"1Gi\"\n      cpu: \"500m\"\n\n  # PostgreSQL for production parity\n  database:\n    type: \"postgresql\"\n    host: \"postgres-staging.mcp-mesh.io\"\n    port: 5432\n    name: \"mcp_mesh_staging\"\n    sslMode: \"require\"\n\n  # Production-like logging\n  logging:\n    level: \"INFO\"\n    format: \"json\"\n\n  # Anti-affinity for distribution\n  affinity:\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n        - weight: 100\n          podAffinityTerm:\n            labelSelector:\n              matchExpressions:\n                - key: app.kubernetes.io/name\n                  operator: In\n                  values:\n                    - mcp-mesh-registry\n            topologyKey: kubernetes.io/hostname\n\n# Staging agents\nagents:\n  weather:\n    enabled: true\n    replicaCount: 3\n    image:\n      tag: \"1.0.0-rc.1\" # Release candidate\n    env:\n      LOG_LEVEL: \"INFO\"\n      CACHE_ENABLED: \"true\"\n      CACHE_TTL: \"300\"\n      API_TIMEOUT: \"30\"\n    resources:\n      requests:\n        memory: \"256Mi\"\n        cpu: \"100m\"\n      limits:\n        memory: \"512Mi\"\n        cpu: \"250m\"\n\n    # Test autoscaling\n    autoscaling:\n      enabled: true\n      minReplicas: 3\n      maxReplicas: 10\n      targetCPUUtilizationPercentage: 70\n\n  analytics:\n    enabled: true\n    replicaCount: 2\n    persistence:\n      enabled: true\n      size: 100Gi\n\n# Full monitoring stack\nmonitoring:\n  prometheus:\n    enabled: true\n    retention: \"7d\"\n    resources:\n      requests:\n        memory: \"512Mi\"\n        cpu: \"250m\"\n\n  grafana:\n    enabled: true\n    adminPassword: \"staging-changeme\"\n    persistence:\n      enabled: true\n      size: 10Gi\n\n# Staging ingress with real cert\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-staging\"\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n  hosts:\n    - host: \"api.staging.mcp-mesh.io\"\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - hosts:\n        - \"api.staging.mcp-mesh.io\"\n      secretName: mcp-mesh-staging-tls\n\n# Staging features\nfeatures:\n  debugMode: false\n  mockData: false\n  rateLimit: true\n  authentication: true\n  canary:\n    enabled: true\n    percentage: 10\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#step-5-production-environment","title":"Step 5: Production Environment","text":"<p>Configure production for reliability and scale:</p> <pre><code># environments/production/values.yaml\n# Production-specific overrides\n\nglobal:\n  environment: production\n\n  # Production domain\n  domain: \"mcp-mesh.io\"\n\n  labels:\n    environment: \"production\"\n    tier: \"production\"\n    compliance: \"sox\"\n    dataClassification: \"confidential\"\n\n# HA configuration\nregistry:\n  replicaCount: 5\n\n  persistence:\n    enabled: true\n    size: 200Gi\n    storageClass: \"ultra-ssd\"\n\n  resources:\n    requests:\n      memory: \"2Gi\"\n      cpu: \"1000m\"\n    limits:\n      memory: \"4Gi\"\n      cpu: \"2000m\"\n\n  # Production PostgreSQL with HA\n  database:\n    type: \"postgresql\"\n    host: \"postgres-primary.mcp-mesh.io\"\n    port: 5432\n    name: \"mcp_mesh_production\"\n    sslMode: \"require\"\n    connectionPool:\n      min: 20\n      max: 100\n      idleTimeout: 300\n\n  # Production logging\n  logging:\n    level: \"INFO\"\n    format: \"json\"\n    outputs:\n      - type: \"stdout\"\n      - type: \"syslog\"\n        host: \"syslog.mcp-mesh.io\"\n        port: 514\n\n  # Strict anti-affinity\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - mcp-mesh-registry\n          topologyKey: kubernetes.io/hostname\n\n  # Pod disruption budget\n  podDisruptionBudget:\n    enabled: true\n    minAvailable: 3\n\n# Production agents\nagents:\n  weather:\n    enabled: true\n    replicaCount: 10\n    image:\n      tag: \"1.0.0\"\n\n    # Production configuration\n    env:\n      LOG_LEVEL: \"INFO\"\n      CACHE_ENABLED: \"true\"\n      CACHE_TTL: \"3600\"\n      API_TIMEOUT: \"10\"\n      CIRCUIT_BREAKER_ENABLED: \"true\"\n      RATE_LIMIT_PER_MINUTE: \"1000\"\n\n    # Production resources\n    resources:\n      requests:\n        memory: \"1Gi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"2Gi\"\n        cpu: \"1000m\"\n\n    # Production autoscaling\n    autoscaling:\n      enabled: true\n      minReplicas: 10\n      maxReplicas: 100\n      targetCPUUtilizationPercentage: 60\n      targetMemoryUtilizationPercentage: 70\n      behavior:\n        scaleUp:\n          stabilizationWindowSeconds: 60\n          policies:\n            - type: Percent\n              value: 100\n              periodSeconds: 60\n            - type: Pods\n              value: 5\n              periodSeconds: 60\n        scaleDown:\n          stabilizationWindowSeconds: 300\n          policies:\n            - type: Percent\n              value: 10\n              periodSeconds: 60\n\n    # Production probes\n    livenessProbe:\n      httpGet:\n        path: /health\n        port: http\n      initialDelaySeconds: 60\n      periodSeconds: 30\n      timeoutSeconds: 10\n      failureThreshold: 5\n\n    readinessProbe:\n      httpGet:\n        path: /ready\n        port: http\n      initialDelaySeconds: 10\n      periodSeconds: 10\n      timeoutSeconds: 5\n      failureThreshold: 3\n\n  analytics:\n    enabled: true\n    replicaCount: 20\n    persistence:\n      enabled: true\n      size: 5Ti\n      storageClass: \"ultra-ssd\"\n\n    # Analytics-specific config\n    streaming:\n      enabled: true\n      kafka:\n        brokers:\n          - \"kafka-1.mcp-mesh.io:9092\"\n          - \"kafka-2.mcp-mesh.io:9092\"\n          - \"kafka-3.mcp-mesh.io:9092\"\n\n# Production monitoring\nmonitoring:\n  prometheus:\n    enabled: true\n    retention: \"90d\"\n    storageSize: 1Ti\n    replicas: 3\n\n    # Remote write for long-term storage\n    remoteWrite:\n      - url: \"https://metrics.mcp-mesh.io/api/v1/write\"\n        writeRelabelConfigs:\n          - sourceLabels: [__name__]\n            regex: \"go_.*\"\n            action: drop\n\n  grafana:\n    enabled: true\n    replicas: 3\n    persistence:\n      enabled: true\n      size: 50Gi\n\n    # LDAP authentication\n    ldap:\n      enabled: true\n      host: \"ldap.mcp-mesh.io\"\n      port: 636\n      useSSL: true\n\n  alertmanager:\n    enabled: true\n    replicas: 3\n\n    # Alert routing\n    config:\n      route:\n        receiver: \"default\"\n        routes:\n          - receiver: \"critical\"\n            matchers:\n              - severity = \"critical\"\n          - receiver: \"warning\"\n            matchers:\n              - severity = \"warning\"\n\n      receivers:\n        - name: \"default\"\n          slackConfigs:\n            - apiURL: \"${SLACK_WEBHOOK_URL}\"\n              channel: \"#alerts\"\n\n        - name: \"critical\"\n          pagerdutyConfigs:\n            - serviceKey: \"${PAGERDUTY_SERVICE_KEY}\"\n          slackConfigs:\n            - apiURL: \"${SLACK_WEBHOOK_URL}\"\n              channel: \"#alerts-critical\"\n\n# Production ingress with WAF\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    nginx.ingress.kubernetes.io/rate-limit: \"1000\"\n    nginx.ingress.kubernetes.io/ssl-protocols: \"TLSv1.2 TLSv1.3\"\n    nginx.ingress.kubernetes.io/ssl-ciphers: \"ECDHE+AESGCM:ECDHE+AES256:!aNULL\"\n    nginx.ingress.kubernetes.io/enable-modsecurity: \"true\"\n    nginx.ingress.kubernetes.io/enable-owasp-core-rules: \"true\"\n  hosts:\n    - host: \"api.mcp-mesh.io\"\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - hosts:\n        - \"api.mcp-mesh.io\"\n      secretName: mcp-mesh-production-tls\n\n# Production features\nfeatures:\n  debugMode: false\n  mockData: false\n  rateLimit: true\n  authentication: true\n  audit:\n    enabled: true\n    retention: \"7y\"\n  backup:\n    enabled: true\n    schedule: \"0 2 * * *\"\n    retention: 30\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#step-6-secret-management","title":"Step 6: Secret Management","text":"<p>Implement secure secret handling per environment:</p> <pre><code># Structure for secrets\nsecrets/\n\u251c\u2500\u2500 development/\n\u2502   \u251c\u2500\u2500 database-secret.yaml\n\u2502   \u2514\u2500\u2500 api-keys.yaml\n\u251c\u2500\u2500 staging/\n\u2502   \u251c\u2500\u2500 database-secret.yaml\n\u2502   \u251c\u2500\u2500 api-keys.yaml\n\u2502   \u2514\u2500\u2500 certificates.yaml\n\u2514\u2500\u2500 production/\n    \u251c\u2500\u2500 database-secret.yaml\n    \u251c\u2500\u2500 api-keys.yaml\n    \u251c\u2500\u2500 certificates.yaml\n    \u2514\u2500\u2500 backup-credentials.yaml\n</code></pre> <p>Use Sealed Secrets or SOPS:</p> <pre><code># secrets/production/database-secret.yaml (encrypted with SOPS)\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mcp-mesh-database\n  namespace: mcp-mesh\ntype: Opaque\ndata:\n  username: ENC[AES256_GCM,data:postgres_prod,iv:...,tag:...,type:str]\n  password: ENC[AES256_GCM,data:supersecret123,iv:...,tag:...,type:str]\n  connection-string: ENC[AES256_GCM,data:postgresql://...,iv:...,tag:...,type:str]\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#step-7-deployment-scripts","title":"Step 7: Deployment Scripts","text":"<p>Create environment-specific deployment scripts:</p> <pre><code>#!/bin/bash\n# deploy.sh - Environment deployment script\n\nset -euo pipefail\n\nENVIRONMENT=\"${1:-}\"\nACTION=\"${2:-install}\"\nNAMESPACE=\"mcp-mesh-${ENVIRONMENT}\"\n\nif [[ -z \"$ENVIRONMENT\" ]]; then\n  echo \"Usage: $0 &lt;environment&gt; [action]\"\n  echo \"Environments: dev, staging, prod\"\n  echo \"Actions: install, upgrade, diff, rollback\"\n  exit 1\nfi\n\n# Validate environment\nif [[ ! -d \"environments/${ENVIRONMENT}\" ]]; then\n  echo \"Error: Unknown environment '${ENVIRONMENT}'\"\n  exit 1\nfi\n\n# Set environment-specific values\ncase \"$ENVIRONMENT\" in\n  dev|development)\n    ENVIRONMENT=\"development\"\n    VALUES_FILES=\"-f environments/base/values.yaml -f environments/development/values.yaml\"\n    HELM_ARGS=\"--timeout 5m\"\n    ;;\n  staging)\n    VALUES_FILES=\"-f environments/base/values.yaml -f environments/staging/values.yaml\"\n    HELM_ARGS=\"--timeout 10m --atomic\"\n    ;;\n  prod|production)\n    VALUES_FILES=\"-f environments/base/values.yaml -f environments/production/values.yaml\"\n    HELM_ARGS=\"--timeout 15m --atomic --wait\"\n    # Require confirmation for production\n    read -p \"Deploy to PRODUCTION? Type 'yes' to confirm: \" confirm\n    if [[ \"$confirm\" != \"yes\" ]]; then\n      echo \"Deployment cancelled\"\n      exit 1\n    fi\n    ;;\nesac\n\n# Decrypt secrets if using SOPS\nif command -v sops &amp;&gt; /dev/null; then\n  echo \"Decrypting secrets for ${ENVIRONMENT}...\"\n  SECRETS_FILE=\"/tmp/secrets-${ENVIRONMENT}.yaml\"\n  sops -d \"secrets/${ENVIRONMENT}/secrets.yaml\" &gt; \"$SECRETS_FILE\"\n  VALUES_FILES=\"${VALUES_FILES} -f ${SECRETS_FILE}\"\n  trap \"rm -f ${SECRETS_FILE}\" EXIT\nfi\n\n# Execute action\ncase \"$ACTION\" in\n  install)\n    echo \"Installing MCP Mesh in ${ENVIRONMENT}...\"\n    helm install mcp-mesh ./mcp-mesh-platform \\\n      --namespace \"$NAMESPACE\" \\\n      --create-namespace \\\n      $VALUES_FILES \\\n      $HELM_ARGS\n    ;;\n\n  upgrade)\n    echo \"Upgrading MCP Mesh in ${ENVIRONMENT}...\"\n    helm upgrade mcp-mesh ./mcp-mesh-platform \\\n      --namespace \"$NAMESPACE\" \\\n      $VALUES_FILES \\\n      $HELM_ARGS\n    ;;\n\n  diff)\n    echo \"Showing diff for ${ENVIRONMENT}...\"\n    helm diff upgrade mcp-mesh ./mcp-mesh-platform \\\n      --namespace \"$NAMESPACE\" \\\n      $VALUES_FILES\n    ;;\n\n  rollback)\n    echo \"Rolling back MCP Mesh in ${ENVIRONMENT}...\"\n    REVISION=\"${3:-}\"\n    if [[ -z \"$REVISION\" ]]; then\n      echo \"Error: Revision number required for rollback\"\n      echo \"Usage: $0 $ENVIRONMENT rollback &lt;revision&gt;\"\n      helm history mcp-mesh -n \"$NAMESPACE\"\n      exit 1\n    fi\n    helm rollback mcp-mesh \"$REVISION\" \\\n      --namespace \"$NAMESPACE\" \\\n      --wait\n    ;;\n\n  *)\n    echo \"Error: Unknown action '$ACTION'\"\n    exit 1\n    ;;\nesac\n\necho \"Deployment complete!\"\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#configuration-options","title":"Configuration Options","text":"Environment Replicas Resources Storage Features Development 1 Minimal 10Gi Debug, Mock Staging 3 Medium 50Gi Full monitoring Production 5+ High 200Gi+ HA, Backup, Audit"},{"location":"06-helm-deployment/04-multi-environment/#examples","title":"Examples","text":""},{"location":"06-helm-deployment/04-multi-environment/#example-1-progressive-deployment","title":"Example 1: Progressive Deployment","text":"<p>Deploy changes through environments:</p> <pre><code># 1. Deploy to development\n./deploy.sh dev upgrade\n\n# 2. Run tests\nkubectl run test-pod --rm -it --image=curlimages/curl -- \\\n  curl http://mcp-mesh-registry.mcp-mesh-dev:8080/health\n\n# 3. Deploy to staging\n./deploy.sh staging upgrade\n\n# 4. Run smoke tests\n./scripts/smoke-tests.sh staging\n\n# 5. Deploy to production (canary)\nhelm upgrade mcp-mesh ./mcp-mesh-platform \\\n  --namespace mcp-mesh-prod \\\n  -f environments/base/values.yaml \\\n  -f environments/production/values.yaml \\\n  --set agents.weather.canary.enabled=true \\\n  --set agents.weather.canary.percentage=10\n\n# 6. Monitor canary\n./scripts/monitor-canary.sh\n\n# 7. Full production deployment\n./deploy.sh prod upgrade\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#example-2-environment-specific-features","title":"Example 2: Environment-Specific Features","text":"<p>Enable features per environment:</p> <pre><code># Feature flags template\n{% raw %}{{- define \"features\" -}}{% endraw %}\n{% raw %}{{- $env := .Values.global.environment | default \"development\" -}}{% endraw %}\nfeatures:\n  # Development features\n  {% raw %}{{- if eq $env \"development\" }}{% endraw %}\n  debugEndpoints: true\n  mockExternalServices: true\n  unlimitedRateLimit: true\n  {% raw %}{{- end }}{% endraw %}\n\n  # Staging features\n  {% raw %}{{- if eq $env \"staging\" }}{% endraw %}\n  canaryDeployment: true\n  abTesting: true\n  syntheticMonitoring: true\n  {% raw %}{{- end }}{% endraw %}\n\n  # Production features\n  {% raw %}{{- if eq $env \"production\" }}{% endraw %}\n  auditLogging: true\n  complianceMode: true\n  disasterRecovery: true\n  {% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#best-practices","title":"Best Practices","text":"<ol> <li>Environment Parity: Keep environments as similar as possible</li> <li>Progressive Rollout: Always deploy dev \u2192 staging \u2192 production</li> <li>Secret Rotation: Regularly rotate secrets per environment</li> <li>Resource Sizing: Right-size resources per environment load</li> <li>Monitoring Coverage: Full monitoring even in non-production</li> </ol>"},{"location":"06-helm-deployment/04-multi-environment/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"06-helm-deployment/04-multi-environment/#pitfall-1-configuration-drift","title":"Pitfall 1: Configuration Drift","text":"<p>Problem: Environments diverge over time</p> <p>Solution: Use GitOps and automation:</p> <pre><code># .github/workflows/sync-environments.yml\nname: Sync Environments\non:\n  push:\n    paths:\n      - \"environments/**\"\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to Dev\n        run: ./deploy.sh dev upgrade\n      - name: Deploy to Staging\n        run: ./deploy.sh staging upgrade\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#pitfall-2-secret-leakage","title":"Pitfall 2: Secret Leakage","text":"<p>Problem: Secrets exposed in values files</p> <p>Solution: Always encrypt secrets:</p> <pre><code># Never commit plain secrets\necho \"secrets*.yaml\" &gt;&gt; .gitignore\n\n# Use SOPS to encrypt\nsops -e secrets/production/api-keys.yaml &gt; secrets/production/api-keys.enc.yaml\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#testing","title":"Testing","text":""},{"location":"06-helm-deployment/04-multi-environment/#environment-validation","title":"Environment Validation","text":"<pre><code>#!/bin/bash\n# validate-environment.sh\n\nENVIRONMENT=$1\n\necho \"Validating ${ENVIRONMENT} environment...\"\n\n# Check all pods are running\nkubectl get pods -n \"mcp-mesh-${ENVIRONMENT}\" -o json | \\\n  jq -r '.items[] | select(.status.phase != \"Running\") | .metadata.name' | \\\n  grep -q . &amp;&amp; echo \"ERROR: Some pods not running\" &amp;&amp; exit 1\n\n# Check endpoints\nENDPOINTS=(\n  \"mcp-mesh-registry:8080/health\"\n  \"weather-agent:8080/health\"\n  \"analytics-agent:8080/health\"\n)\n\nfor endpoint in \"${ENDPOINTS[@]}\"; do\n  kubectl run curl-test --rm -it --image=curlimages/curl -- \\\n    curl -f \"http://${endpoint}\" || exit 1\ndone\n\necho \"Environment validation passed!\"\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#promotion-testing","title":"Promotion Testing","text":"<pre><code># test_promotion.py\nimport subprocess\nimport json\nimport time\n\ndef get_deployment_version(namespace, deployment):\n    \"\"\"Get current deployment version\"\"\"\n    cmd = f\"kubectl get deployment {deployment} -n {namespace} -o json\"\n    result = subprocess.run(cmd.split(), capture_output=True, text=True)\n    data = json.loads(result.stdout)\n    return data['spec']['template']['spec']['containers'][0]['image'].split(':')[-1]\n\ndef test_promotion_flow():\n    \"\"\"Test version promotion through environments\"\"\"\n    environments = ['dev', 'staging', 'prod']\n    deployment = 'mcp-mesh-registry'\n\n    versions = {}\n    for env in environments:\n        namespace = f\"mcp-mesh-{env}\"\n        versions[env] = get_deployment_version(namespace, deployment)\n        print(f\"{env}: {versions[env]}\")\n\n    # Verify progressive promotion\n    assert versions['prod'] &lt;= versions['staging'] &lt;= versions['dev']\n    print(\"Promotion flow validated!\")\n\nif __name__ == \"__main__\":\n    test_promotion_flow()\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"06-helm-deployment/04-multi-environment/#monitor-deployments-across-environments","title":"Monitor Deployments Across Environments","text":"<pre><code># Get deployment status across all environments\nfor env in dev staging prod; do\n  echo \"=== $env ===\"\n  helm status mcp-mesh -n \"mcp-mesh-$env\" --show-desc\ndone\n\n# Compare configurations\nhelm get values mcp-mesh -n mcp-mesh-dev &gt; /tmp/dev.yaml\nhelm get values mcp-mesh -n mcp-mesh-staging &gt; /tmp/staging.yaml\ndiff /tmp/dev.yaml /tmp/staging.yaml\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#environment-health-dashboard","title":"Environment Health Dashboard","text":"<pre><code># Grafana dashboard for multi-environment\n{\n  \"dashboard\":\n    {\n      \"title\": \"MCP Mesh Multi-Environment\",\n      \"panels\":\n        [\n          {\n            \"title\": \"Deployments by Environment\",\n            \"targets\":\n              [{ \"expr\": 'count by (environment) (up{job=\"mcp-mesh\"})' }],\n          },\n          {\n            \"title\": \"Error Rates by Environment\",\n            \"targets\":\n              [\n                {\n                  \"expr\": 'rate(http_requests_total{status=~\"5..\"}[5m]) by (environment)',\n                },\n              ],\n          },\n        ],\n    },\n}\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"06-helm-deployment/04-multi-environment/#issue-1-environment-mismatch","title":"Issue 1: Environment Mismatch","text":"<p>Symptoms: Wrong configuration in environment</p> <p>Cause: Values file precedence issue</p> <p>Solution:</p> <pre><code># Debug values precedence\nhelm template mcp-mesh ./mcp-mesh-platform \\\n  -f environments/base/values.yaml \\\n  -f environments/production/values.yaml \\\n  --debug 2&gt;&amp;1 | grep -A10 \"computed values\"\n\n# Verify final values\nhelm get values mcp-mesh -n mcp-mesh-prod --all\n</code></pre>"},{"location":"06-helm-deployment/04-multi-environment/#issue-2-secret-not-found","title":"Issue 2: Secret Not Found","text":"<p>Symptoms: <code>Error: secret \"api-keys\" not found</code></p> <p>Cause: Secrets not deployed or wrong namespace</p> <p>Solution:</p> <pre><code># Check if secrets exist\nkubectl get secrets -n mcp-mesh-prod\n\n# Apply secrets manually if needed\nsops -d secrets/production/api-keys.yaml | kubectl apply -n mcp-mesh-prod -f -\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"06-helm-deployment/04-multi-environment/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Namespace Isolation: Cross-namespace resources need special handling</li> <li>Secret Size: Kubernetes secrets limited to 1MB</li> <li>ConfigMap Updates: May require pod restarts</li> <li>Multi-Region: Requires additional tooling for global deployments</li> </ul>"},{"location":"06-helm-deployment/04-multi-environment/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add GitOps workflow examples</li> <li> Create environment promotion automation</li> <li> Document blue-green deployment patterns</li> <li> Add multi-region deployment guide</li> <li> Create cost optimization per environment</li> </ul>"},{"location":"06-helm-deployment/04-multi-environment/#summary","title":"Summary","text":"<p>You now understand multi-environment deployment patterns:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Structure environments with inheritance</li> <li>\ud83d\udd11 Maintain environment parity</li> <li>\ud83d\udd11 Secure secrets per environment</li> <li>\ud83d\udd11 Automate promotion workflows</li> </ul>"},{"location":"06-helm-deployment/04-multi-environment/#next-steps","title":"Next Steps","text":"<p>Let's explore Helm best practices for production.</p> <p>Continue to Helm Best Practices \u2192</p> <p>\ud83d\udca1 Tip: Use <code>helmfile</code> for managing multiple environment deployments: <code>helmfile -e production sync</code></p> <p>\ud83d\udcda Reference: Helm Environment Management</p> <p>\ud83e\uddea Try It: Create a fourth environment for QA testing with its own configuration profile</p>"},{"location":"06-helm-deployment/05-best-practices/","title":"Helm Best Practices","text":"<p>Production-ready patterns and practices for MCP Mesh Helm deployments</p>"},{"location":"06-helm-deployment/05-best-practices/#overview","title":"Overview","text":"<p>This guide covers best practices for using Helm with MCP Mesh in production environments. You'll learn about chart development standards, security practices, performance optimization, and operational excellence. These practices are derived from real-world deployments and community standards.</p> <p>Following these best practices ensures reliable, secure, and maintainable Helm deployments at scale.</p>"},{"location":"06-helm-deployment/05-best-practices/#key-concepts","title":"Key Concepts","text":"<ul> <li>Chart Standards: Following Helm community conventions</li> <li>Security Hardening: Protecting deployments and secrets</li> <li>Performance Optimization: Efficient chart rendering and deployment</li> <li>Operational Excellence: Monitoring, upgrading, and troubleshooting</li> <li>GitOps Integration: Declarative deployment workflows</li> </ul>"},{"location":"06-helm-deployment/05-best-practices/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"06-helm-deployment/05-best-practices/#step-1-chart-development-standards","title":"Step 1: Chart Development Standards","text":"<p>Follow consistent patterns for chart development:</p> <pre><code># Chart.yaml - Comprehensive metadata\napiVersion: v2\nname: mcp-mesh-agent\ndescription: |\n  A Helm chart for deploying MCP Mesh agents.\n  This chart supports multiple agent types and configurations.\ntype: application\nversion: 1.2.3 # Chart version (SemVer)\nappVersion: \"1.0.0\" # Application version\nkeywords:\n  - mcp-mesh\n  - microservices\n  - service-mesh\nhome: https://github.com/mcp-mesh/charts\nsources:\n  - https://github.com/mcp-mesh/mcp-mesh\nmaintainers:\n  - name: Platform Team\n    email: platform@mcp-mesh.io\n    url: https://mcp-mesh.io\ndependencies:\n  - name: common\n    version: \"1.x.x\"\n    repository: \"https://charts.bitnami.com/bitnami\"\nannotations:\n  # Chart documentation\n  \"artifacthub.io/readme\": |\n    https://raw.githubusercontent.com/mcp-mesh/charts/main/charts/mcp-mesh-agent/README.md\n  # Security scanning\n  \"artifacthub.io/containsSecurityUpdates\": \"false\"\n  # License\n  \"artifacthub.io/license\": \"Apache-2.0\"\n  # Operator compatibility\n  \"artifacthub.io/operator\": \"true\"\n  # Recommendations\n  \"artifacthub.io/recommendations\": |\n    - url: https://charts.mcp-mesh.io/mcp-mesh-registry\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#step-2-values-schema-validation","title":"Step 2: Values Schema Validation","text":"<p>Implement JSON Schema for values validation:</p> <pre><code>// values.schema.json\n{\n  \"$schema\": \"https://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\"agent\", \"image\"],\n  \"properties\": {\n    \"replicaCount\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 100,\n      \"description\": \"Number of agent replicas\"\n    },\n    \"image\": {\n      \"type\": \"object\",\n      \"required\": [\"repository\", \"tag\"],\n      \"properties\": {\n        \"repository\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[a-z0-9-_/]+$\",\n          \"description\": \"Container image repository\"\n        },\n        \"tag\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[a-zA-Z0-9.-]+$\",\n          \"description\": \"Container image tag\"\n        },\n        \"pullPolicy\": {\n          \"type\": \"string\",\n          \"enum\": [\"Always\", \"IfNotPresent\", \"Never\"],\n          \"default\": \"IfNotPresent\"\n        }\n      }\n    },\n    \"agent\": {\n      \"type\": \"object\",\n      \"required\": [\"name\"],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[a-z0-9-]+$\",\n          \"minLength\": 1,\n          \"maxLength\": 63,\n          \"description\": \"Agent name (DNS-1123 subdomain)\"\n        },\n        \"capabilities\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"pattern\": \"^[a-z0-9_]+$\"\n          },\n          \"minItems\": 1,\n          \"uniqueItems\": true\n        },\n        \"resources\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"limits\": {\n              \"$ref\": \"#/definitions/resourceRequirements\"\n            },\n            \"requests\": {\n              \"$ref\": \"#/definitions/resourceRequirements\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"resourceRequirements\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"cpu\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[0-9]+(\\\\.[0-9]+)?(m)?$\"\n        },\n        \"memory\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[0-9]+(\\\\.[0-9]+)?(Mi|Gi)$\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#step-3-template-best-practices","title":"Step 3: Template Best Practices","text":"<p>Write maintainable and efficient templates:</p> <pre><code># templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n  namespace: {% raw %}{{ .Release.Namespace }}{% endraw %}\n  labels:\n    {% raw %}{{- include \"mcp-mesh-agent.labels\" . | nindent 4 }}{% endraw %}\n    {% raw %}{{- with .Values.commonLabels }}{% endraw %}\n    {% raw %}{{- toYaml . | nindent 4 }}{% endraw %}\n    {% raw %}{{- end }}{% endraw %}\n  annotations:\n    {% raw %}{{- include \"mcp-mesh-agent.annotations\" . | nindent 4 }}{% endraw %}\n    {% raw %}{{- with .Values.commonAnnotations }}{% endraw %}\n    {% raw %}{{- toYaml . | nindent 4 }}{% endraw %}\n    {% raw %}{{- end }}{% endraw %}\nspec:\n  {% raw %}{{- if not .Values.autoscaling.enabled }}{% endraw %}\n  replicas: {% raw %}{{ .Values.replicaCount }}{% endraw %}\n  {% raw %}{{- end }}{% endraw %}\n  revisionHistoryLimit: {% raw %}{{ .Values.revisionHistoryLimit | default 10 }}{% endraw %}\n  selector:\n    matchLabels:\n      {% raw %}{{- include \"mcp-mesh-agent.selectorLabels\" . | nindent 6 }}{% endraw %}\n  {% raw %}{{- with .Values.updateStrategy }}{% endraw %}\n  strategy:\n    {% raw %}{{- toYaml . | nindent 4 }}{% endraw %}\n  {% raw %}{{- end }}{% endraw %}\n  template:\n    metadata:\n      annotations:\n        # Force pod restart on config change\n        checksum/config: {% raw %}{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}{% endraw %}\n        checksum/secret: {% raw %}{{ include (print $.Template.BasePath \"/secret.yaml\") . | sha256sum }}{% endraw %}\n        {% raw %}{{- with .Values.podAnnotations }}{% endraw %}\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n      labels:\n        {% raw %}{{- include \"mcp-mesh-agent.selectorLabels\" . | nindent 8 }}{% endraw %}\n        {% raw %}{{- with .Values.podLabels }}{% endraw %}\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n    spec:\n      {% raw %}{{- with .Values.imagePullSecrets }}{% endraw %}\n      imagePullSecrets:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      serviceAccountName: {% raw %}{{ include \"mcp-mesh-agent.serviceAccountName\" . }}{% endraw %}\n      automountServiceAccountToken: {% raw %}{{ .Values.serviceAccount.automountToken | default false }}{% endraw %}\n      securityContext:\n        {% raw %}{{- toYaml .Values.podSecurityContext | nindent 8 }}{% endraw %}\n      {% raw %}{{- with .Values.priorityClassName }}{% endraw %}\n      priorityClassName: {% raw %}{{ . }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.hostAliases }}{% endraw %}\n      hostAliases:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- if .Values.initContainers }}{% endraw %}\n      initContainers:\n        {% raw %}{{- include \"mcp-mesh-agent.renderTpl\" (dict \"value\" .Values.initContainers \"context\" $) | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      containers:\n        - name: {% raw %}{{ .Chart.Name }}{% endraw %}\n          securityContext:\n            {% raw %}{{- toYaml .Values.securityContext | nindent 12 }}{% endraw %}\n          image: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag | default .Chart.AppVersion }}{% endraw %}\"\n          imagePullPolicy: {% raw %}{{ .Values.image.pullPolicy }}{% endraw %}\n          {% raw %}{{- with .Values.command }}{% endraw %}\n          command:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- with .Values.args }}{% endraw %}\n          args:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: POD_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            {% raw %}{{- if .Values.env }}{% endraw %}\n            {% raw %}{{- include \"mcp-mesh-agent.renderTpl\" (dict \"value\" .Values.env \"context\" $) | nindent 12 }}{% endraw %}\n            {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- if or .Values.envFrom .Values.agent.configMap .Values.agent.secret }}{% endraw %}\n          envFrom:\n            {% raw %}{{- with .Values.envFrom }}{% endraw %}\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n            {% raw %}{{- end }}{% endraw %}\n            {% raw %}{{- if .Values.agent.configMap }}{% endraw %}\n            - configMapRef:\n                name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n            {% raw %}{{- end }}{% endraw %}\n            {% raw %}{{- if .Values.agent.secret }}{% endraw %}\n            - secretRef:\n                name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n            {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          ports:\n            - name: http\n              containerPort: {% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}\n              protocol: TCP\n            {% raw %}{{- if .Values.metrics.enabled }}{% endraw %}\n            - name: metrics\n              containerPort: {% raw %}{{ .Values.metrics.port | default 9090 }}{% endraw %}\n              protocol: TCP\n            {% raw %}{{- end }}{% endraw %}\n            {% raw %}{{- range .Values.extraPorts }}{% endraw %}\n            - name: {% raw %}{{ .name }}{% endraw %}\n              containerPort: {% raw %}{{ .port }}{% endraw %}\n              protocol: {% raw %}{{ .protocol | default \"TCP\" }}{% endraw %}\n            {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- with .Values.livenessProbe }}{% endraw %}\n          livenessProbe:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- with .Values.readinessProbe }}{% endraw %}\n          readinessProbe:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- with .Values.startupProbe }}{% endraw %}\n          startupProbe:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          resources:\n            {% raw %}{{- toYaml .Values.resources | nindent 12 }}{% endraw %}\n          {% raw %}{{- with .Values.volumeMounts }}{% endraw %}\n          volumeMounts:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n          {% raw %}{{- with .Values.lifecycle }}{% endraw %}\n          lifecycle:\n            {% raw %}{{- toYaml . | nindent 12 }}{% endraw %}\n          {% raw %}{{- end }}{% endraw %}\n        {% raw %}{{- with .Values.sidecars }}{% endraw %}\n        {% raw %}{{- include \"mcp-mesh-agent.renderTpl\" (dict \"value\" . \"context\" $) | nindent 8 }}{% endraw %}\n        {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.volumes }}{% endraw %}\n      volumes:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.nodeSelector }}{% endraw %}\n      nodeSelector:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.affinity }}{% endraw %}\n      affinity:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.tolerations }}{% endraw %}\n      tolerations:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.topologySpreadConstraints }}{% endraw %}\n      topologySpreadConstraints:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.terminationGracePeriodSeconds }}{% endraw %}\n      terminationGracePeriodSeconds: {% raw %}{{ . }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.dnsPolicy }}{% endraw %}\n      dnsPolicy: {% raw %}{{ . }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n      {% raw %}{{- with .Values.dnsConfig }}{% endraw %}\n      dnsConfig:\n        {% raw %}{{- toYaml . | nindent 8 }}{% endraw %}\n      {% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#step-4-security-best-practices","title":"Step 4: Security Best Practices","text":"<p>Implement comprehensive security measures:</p> <pre><code># templates/podsecuritypolicy.yaml\n{% raw %}{{- if .Values.podSecurityPolicy.enabled }}{% endraw %}\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n  labels:\n    {% raw %}{{- include \"mcp-mesh-agent.labels\" . | nindent 4 }}{% endraw %}\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  supplementalGroups:\n    rule: 'RunAsAny'\n  fsGroup:\n    rule: 'RunAsAny'\n  readOnlyRootFilesystem: true\n{% raw %}{{- end }}{% endraw %}\n\n---\n# templates/networkpolicy.yaml\n{% raw %}{{- if .Values.networkPolicy.enabled }}{% endraw %}\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: {% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}\n  labels:\n    {% raw %}{{- include \"mcp-mesh-agent.labels\" . | nindent 4 }}{% endraw %}\nspec:\n  podSelector:\n    matchLabels:\n      {% raw %}{{- include \"mcp-mesh-agent.selectorLabels\" . | nindent 6 }}{% endraw %}\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    # Allow traffic from registry\n    - from:\n        - podSelector:\n            matchLabels:\n              app.kubernetes.io/name: mcp-mesh-registry\n      ports:\n        - protocol: TCP\n          port: {% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}\n    # Allow metrics scraping\n    {% raw %}{{- if .Values.metrics.enabled }}{% endraw %}\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              name: monitoring\n      ports:\n        - protocol: TCP\n          port: {% raw %}{{ .Values.metrics.port | default 9090 }}{% endraw %}\n    {% raw %}{{- end }}{% endraw %}\n  egress:\n    # Allow DNS\n    - to:\n        - namespaceSelector: {}\n          podSelector:\n            matchLabels:\n              k8s-app: kube-dns\n      ports:\n        - protocol: UDP\n          port: 53\n    # Allow registry access\n    - to:\n        - podSelector:\n            matchLabels:\n              app.kubernetes.io/name: mcp-mesh-registry\n      ports:\n        - protocol: TCP\n          port: 8080\n    # Allow external HTTPS\n    - to:\n        - namespaceSelector: {}\n      ports:\n        - protocol: TCP\n          port: 443\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#step-5-performance-optimization","title":"Step 5: Performance Optimization","text":"<p>Optimize chart rendering and deployment:</p> <pre><code># templates/_helpers.tpl\n{{/*\nEfficient helper functions with caching\n*/}}\n\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\n*/}}\n{% raw %}{{- define \"mcp-mesh-agent.fullname\" -}}{% endraw %}\n{% raw %}{{- if .Values.fullnameOverride }}{% endraw %}\n{% raw %}{{- .Values.fullnameOverride | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- else }}{% endraw %}\n{% raw %}{{- $name := default .Chart.Name .Values.nameOverride }}{% endraw %}\n{% raw %}{{- if contains $name .Release.Name }}{% endraw %}\n{% raw %}{{- .Release.Name | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- else }}{% endraw %}\n{% raw %}{{- printf \"%s-%s\" .Release.Name $name | trunc 63 | trimSuffix \"-\" }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n{{/*\nRender template with caching for performance\n*/}}\n{% raw %}{{- define \"mcp-mesh-agent.renderTpl\" -}}{% endraw %}\n{% raw %}{{- $value := .value -}}{% endraw %}\n{% raw %}{{- $context := .context -}}{% endraw %}\n{% raw %}{{- if typeIs \"string\" $value -}}{% endraw %}\n{% raw %}{{- tpl $value $context -}}{% endraw %}\n{% raw %}{{- else -}}{% endraw %}\n{% raw %}{{- tpl ($value | toYaml) $context -}}{% endraw %}\n{% raw %}{{- end -}}{% endraw %}\n{% raw %}{{- end -}}{% endraw %}\n\n{{/*\nCommon labels with minimal computation\n*/}}\n{% raw %}{{- define \"mcp-mesh-agent.labels\" -}}{% endraw %}\n{% raw %}{{- if not .labels_cached }}{% endraw %}\n{{- $_ := set . \"labels_cached\" (dict\n  \"helm.sh/chart\" (include \"mcp-mesh-agent.chart\" .)\n  \"app.kubernetes.io/name\" (include \"mcp-mesh-agent.name\" .)\n  \"app.kubernetes.io/instance\" .Release.Name\n  \"app.kubernetes.io/version\" (.Chart.AppVersion | default \"0.3\" | quote)\n  \"app.kubernetes.io/managed-by\" .Release.Service\n) }}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- range $key, $value := .labels_cached }}{% endraw %}\n{% raw %}{{ $key }}{% endraw %}: {% raw %}{{ $value }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#step-6-operational-excellence","title":"Step 6: Operational Excellence","text":"<p>Implement comprehensive operational practices:</p> <pre><code># Chart testing\n# templates/tests/test-connection.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"{% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}-test-connection\"\n  labels:\n    {% raw %}{{- include \"mcp-mesh-agent.labels\" . | nindent 4 }}{% endraw %}\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test-health\n      image: curlimages/curl:7.85.0\n      command: ['sh', '-c']\n      args:\n        - |\n          echo \"Testing agent health endpoint...\"\n          curl -f http://{% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}:{% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}/health\n          echo \"Testing agent readiness...\"\n          curl -f http://{% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}:{% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}/ready\n          echo \"Testing metrics endpoint...\"\n          {% raw %}{{- if .Values.metrics.enabled }}{% endraw %}\n          curl -f http://{% raw %}{{ include \"mcp-mesh-agent.fullname\" . }}{% endraw %}:{% raw %}{{ .Values.metrics.port | default 9090 }}{% endraw %}/metrics\n          {% raw %}{{- end }}{% endraw %}\n          echo \"All tests passed!\"\n  restartPolicy: Never\n</code></pre> <p>Create comprehensive documentation:</p> <pre><code># templates/NOTES.txt\n\n{% raw %}{{- $fullName := include \"mcp-mesh-agent.fullname\" . -}}{% endraw %}\n\u2728 MCP Mesh Agent {% raw %}{{ .Values.agent.name }}{% endraw %} has been deployed!\n\n\ud83d\udccb Release Information:\nName: {% raw %}{{ .Release.Name }}{% endraw %}\nNamespace: {% raw %}{{ .Release.Namespace }}{% endraw %}\nVersion: {% raw %}{{ .Chart.Version }}{% endraw %}\nRevision: {% raw %}{{ .Release.Revision }}{% endraw %}\n\n\ud83d\ude80 Application Details:\nAgent Name: {% raw %}{{ .Values.agent.name }}{% endraw %}\nReplicas: {% raw %}{{ .Values.replicaCount }}{% endraw %}\nImage: {% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag | default .Chart.AppVersion }}{% endraw %}\n{% raw %}{{- if .Values.agent.capabilities }}{% endraw %}\nCapabilities: {% raw %}{{ .Values.agent.capabilities | join \", \" }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n\ud83d\udcca Resources:\nCPU Request: {% raw %}{{ .Values.resources.requests.cpu | default \"not set\" }}{% endraw %}\nMemory Request: {% raw %}{{ .Values.resources.requests.memory | default \"not set\" }}{% endraw %}\nCPU Limit: {% raw %}{{ .Values.resources.limits.cpu | default \"not set\" }}{% endraw %}\nMemory Limit: {% raw %}{{ .Values.resources.limits.memory | default \"not set\" }}{% endraw %}\n\n\ud83d\udd0d Service Discovery:\nInternal DNS: {% raw %}{{ $fullName }}{% endraw %}.{% raw %}{{ .Release.Namespace }}{% endraw %}.svc.cluster.local\nService Port: {% raw %}{{ .Values.service.port | default 8080 }}{% endraw %}\n\n{% raw %}{{- if .Values.ingress.enabled }}{% endraw %}\n\ud83c\udf10 External Access:\n{% raw %}{{- range $host := .Values.ingress.hosts }}{% endraw %}\n{% raw %}{{- range .paths }}{% endraw %}\nURL: http{% raw %}{{ if $.Values.ingress.tls }}{% endraw %}s{% raw %}{{ end }}{% endraw %}://{% raw %}{{ $host.host }}{% endraw %}{% raw %}{{ .path }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- else }}{% endraw %}\n\ud83d\udd12 External Access: Disabled (ingress.enabled=false)\n{% raw %}{{- end }}{% endraw %}\n\n{% raw %}{{- if .Values.autoscaling.enabled }}{% endraw %}\n\ud83d\udcc8 Autoscaling:\nMin Replicas: {% raw %}{{ .Values.autoscaling.minReplicas }}{% endraw %}\nMax Replicas: {% raw %}{{ .Values.autoscaling.maxReplicas }}{% endraw %}\nTarget CPU: {% raw %}{{ .Values.autoscaling.targetCPUUtilizationPercentage }}{% endraw %}%\n{% raw %}{{- end }}{% endraw %}\n\n\ud83c\udfe5 Health Checks:\nLiveness: curl http://{% raw %}{{ $fullName }}{% endraw %}:{% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}/health\nReadiness: curl http://{% raw %}{{ $fullName }}{% endraw %}:{% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %}/ready\n{% raw %}{{- if .Values.metrics.enabled }}{% endraw %}\nMetrics: curl http://{% raw %}{{ $fullName }}{% endraw %}:{% raw %}{{ .Values.metrics.port | default 9090 }}{% endraw %}/metrics\n{% raw %}{{- end }}{% endraw %}\n\n\ud83d\udcdd Common Operations:\n\n1. Check deployment status:\n   kubectl rollout status deployment/{% raw %}{{ $fullName }}{% endraw %} -n {% raw %}{{ .Release.Namespace }}{% endraw %}\n\n2. View logs:\n   kubectl logs -f deployment/{% raw %}{{ $fullName }}{% endraw %} -n {% raw %}{{ .Release.Namespace }}{% endraw %}\n\n3. Scale deployment:\n   kubectl scale deployment/{% raw %}{{ $fullName }}{% endraw %} --replicas=5 -n {% raw %}{{ .Release.Namespace }}{% endraw %}\n\n4. Port forward for local access:\n   kubectl port-forward deployment/{% raw %}{{ $fullName }}{% endraw %} 8080:{% raw %}{{ .Values.agent.port | default 8080 }}{% endraw %} -n {% raw %}{{ .Release.Namespace }}{% endraw %}\n\n5. Run tests:\n   helm test {% raw %}{{ .Release.Name }}{% endraw %} -n {% raw %}{{ .Release.Namespace }}{% endraw %}\n\n{% raw %}{{- if .Values.debug.enabled }}{% endraw %}\n\u26a0\ufe0f DEBUG MODE IS ENABLED - Not recommended for production!\n{% raw %}{{- end }}{% endraw %}\n\nFor more information, visit: https://docs.mcp-mesh.io\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#step-7-gitops-integration","title":"Step 7: GitOps Integration","text":"<p>Integrate with GitOps workflows:</p> <pre><code># argocd/application.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: mcp-mesh-platform\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/mcp-mesh/deployments\n    targetRevision: HEAD\n    path: helm/mcp-mesh-platform\n    helm:\n      valueFiles:\n        - values.yaml\n        - values-production.yaml\n      parameters:\n        - name: image.tag\n          value: \"1.0.0\"\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: mcp-mesh\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n      allowEmpty: false\n    syncOptions:\n      - CreateNamespace=true\n      - PrunePropagationPolicy=foreground\n      - PruneLast=true\n    retry:\n      limit: 5\n      backoff:\n        duration: 5s\n        factor: 2\n        maxDuration: 3m\n  revisionHistoryLimit: 10\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#configuration-options","title":"Configuration Options","text":"Practice Configuration Impact Schema Validation <code>values.schema.json</code> Prevents misconfigurations Security Policies <code>podSecurityPolicy.enabled</code> Enforces security standards Network Policies <code>networkPolicy.enabled</code> Controls traffic flow Resource Limits <code>resources.limits</code> Prevents resource exhaustion Monitoring <code>metrics.enabled</code> Enables observability"},{"location":"06-helm-deployment/05-best-practices/#examples","title":"Examples","text":""},{"location":"06-helm-deployment/05-best-practices/#example-1-production-ready-chart","title":"Example 1: Production-Ready Chart","text":"<pre><code># values-production.yaml\n# Production-ready configuration\n\n# High availability\nreplicaCount: 5\n\n# Resource management\nresources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"250m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"500m\"\n\n# Security hardening\npodSecurityContext:\n  runAsNonRoot: true\n  runAsUser: 10001\n  fsGroup: 10001\n  seccompProfile:\n    type: RuntimeDefault\n\nsecurityContext:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsNonRoot: true\n  runAsUser: 10001\n  capabilities:\n    drop:\n      - ALL\n\n# Network policies\nnetworkPolicy:\n  enabled: true\n\n# Pod disruption budget\npodDisruptionBudget:\n  enabled: true\n  minAvailable: 2\n\n# Monitoring\nmetrics:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n    interval: 30s\n\n# Health checks\nlivenessProbe:\n  httpGet:\n    path: /health\n    port: http\n  initialDelaySeconds: 60\n  periodSeconds: 30\n  timeoutSeconds: 10\n  failureThreshold: 5\n\nreadinessProbe:\n  httpGet:\n    path: /ready\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 3\n\n# Autoscaling\nautoscaling:\n  enabled: true\n  minReplicas: 5\n  maxReplicas: 50\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: 80\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#example-2-chart-lifecycle-management","title":"Example 2: Chart Lifecycle Management","text":"<pre><code>#!/bin/bash\n# chart-lifecycle.sh\n\n# Lint chart\necho \"Linting chart...\"\nhelm lint ./mcp-mesh-agent\n\n# Package chart\necho \"Packaging chart...\"\nhelm package ./mcp-mesh-agent\n\n# Test chart\necho \"Testing chart...\"\nhelm install test-release ./mcp-mesh-agent \\\n  --dry-run --debug \\\n  --generate-name\n\n# Security scan\necho \"Security scanning...\"\nhelm template ./mcp-mesh-agent | \\\n  kubesec scan -\n\n# Sign chart\necho \"Signing chart...\"\nhelm gpg sign ./mcp-mesh-agent-*.tgz\n\n# Push to registry\necho \"Pushing to registry...\"\nhelm push mcp-mesh-agent-*.tgz oci://registry.mcp-mesh.io/charts\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#best-practices","title":"Best Practices","text":"<ol> <li>Use Subcharts: Create modular, reusable components</li> <li>Version Everything: Pin all versions (charts, images, dependencies)</li> <li>Test Thoroughly: Unit tests, integration tests, upgrade tests</li> <li>Document Extensively: README, NOTES.txt, inline comments</li> <li>Secure by Default: Minimal permissions, network policies</li> </ol>"},{"location":"06-helm-deployment/05-best-practices/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"06-helm-deployment/05-best-practices/#pitfall-1-hardcoded-values","title":"Pitfall 1: Hardcoded Values","text":"<p>Problem: Values hardcoded in templates</p> <p>Solution: Always parameterize:</p> <pre><code># Bad\nimage: mcp-mesh/agent:1.0.0\n\n# Good\nimage: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag | default .Chart.AppVersion }}{% endraw %}\"\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#pitfall-2-missing-resource-limits","title":"Pitfall 2: Missing Resource Limits","text":"<p>Problem: Pods without resource constraints</p> <p>Solution: Always set defaults:</p> <pre><code># values.yaml\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#testing","title":"Testing","text":""},{"location":"06-helm-deployment/05-best-practices/#chart-unit-testing","title":"Chart Unit Testing","text":"<pre><code># tests/deployment_test.yaml\nsuite: test deployment\ntemplates:\n  - deployment.yaml\ntests:\n  - it: should create deployment with correct name\n    asserts:\n      - isKind:\n          of: Deployment\n      - equal:\n          path: metadata.name\n          value: RELEASE-NAME-mcp-mesh-agent\n\n  - it: should have security context\n    asserts:\n      - isNotNull:\n          path: spec.template.spec.securityContext\n      - equal:\n          path: spec.template.spec.securityContext.runAsNonRoot\n          value: true\n\n  - it: should have resource limits\n    asserts:\n      - isNotNull:\n          path: spec.template.spec.containers[0].resources.limits\n      - exists:\n          path: spec.template.spec.containers[0].resources.limits.memory\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#integration-testing","title":"Integration Testing","text":"<pre><code># test_helm_deployment.py\nimport subprocess\nimport json\nimport time\nimport pytest\n\ndef helm_install(release_name, namespace):\n    \"\"\"Install Helm chart\"\"\"\n    cmd = [\n        \"helm\", \"install\", release_name, \"./mcp-mesh-agent\",\n        \"--namespace\", namespace,\n        \"--create-namespace\",\n        \"--wait\",\n        \"--timeout\", \"5m\"\n    ]\n    subprocess.run(cmd, check=True)\n\ndef test_production_deployment():\n    \"\"\"Test production-ready deployment\"\"\"\n    namespace = \"test-prod\"\n    release = \"test-release\"\n\n    try:\n        # Install with production values\n        helm_install(release, namespace)\n\n        # Verify deployment\n        cmd = f\"kubectl get deployment -n {namespace} -o json\"\n        result = subprocess.run(cmd.split(), capture_output=True, text=True)\n        deployments = json.loads(result.stdout)\n\n        assert len(deployments['items']) &gt; 0\n\n        # Check security context\n        deployment = deployments['items'][0]\n        security_context = deployment['spec']['template']['spec']['securityContext']\n        assert security_context['runAsNonRoot'] is True\n\n        # Check resource limits\n        containers = deployment['spec']['template']['spec']['containers']\n        assert all('resources' in c and 'limits' in c['resources']\n                  for c in containers)\n\n    finally:\n        # Cleanup\n        subprocess.run([\n            \"helm\", \"uninstall\", release, \"-n\", namespace\n        ])\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"06-helm-deployment/05-best-practices/#monitor-chart-performance","title":"Monitor Chart Performance","text":"<pre><code># Measure template rendering time\ntime helm template large-release ./mcp-mesh-platform \\\n  -f values-production.yaml &gt; /dev/null\n\n# Check rendered size\nhelm template large-release ./mcp-mesh-platform \\\n  -f values-production.yaml | wc -c\n\n# Profile template execution\nhelm template large-release ./mcp-mesh-platform \\\n  --debug 2&gt;&amp;1 | grep -E \"took|duration\"\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#debug-chart-issues","title":"Debug Chart Issues","text":"<pre><code># Enable debug output\nhelm install my-release ./mcp-mesh-agent \\\n  --debug \\\n  --dry-run\n\n# Check computed values\nhelm get values my-release --all\n\n# Verify hooks\nhelm get hooks my-release\n\n# List all resources\nhelm get manifest my-release | kubectl get -f -\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"06-helm-deployment/05-best-practices/#issue-1-schema-validation-failures","title":"Issue 1: Schema Validation Failures","text":"<p>Symptoms: <code>values don't meet the specifications of the schema</code></p> <p>Cause: Values don't match schema</p> <p>Solution:</p> <pre><code># Validate values against schema\nhelm lint ./mcp-mesh-agent --strict\n\n# Test specific values file\nhelm template ./mcp-mesh-agent \\\n  -f values-custom.yaml \\\n  --validate\n</code></pre>"},{"location":"06-helm-deployment/05-best-practices/#issue-2-template-rendering-slow","title":"Issue 2: Template Rendering Slow","text":"<p>Symptoms: Long deployment times</p> <p>Cause: Inefficient templates</p> <p>Solution:</p> <pre><code># Cache computed values\n{% raw %}{{- $fullname := include \"chart.fullname\" . -}}{% endraw %}\n{% raw %}{{- $labels := include \"chart.labels\" . -}}{% endraw %}\n\n# Reuse throughout template\nname: {% raw %}{{ $fullname }}{% endraw %}\nlabels:\n  {% raw %}{{- $labels | nindent 4 }}{% endraw %}\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"06-helm-deployment/05-best-practices/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>ConfigMap Size: Limited to 1MB for rendered templates</li> <li>CRD Ordering: CRDs must be installed before use</li> <li>Hooks Limitations: Limited hook weights (pre/post)</li> <li>Cross-Namespace: Helm doesn't manage cross-namespace resources well</li> </ul>"},{"location":"06-helm-deployment/05-best-practices/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add mutation webhook examples</li> <li> Create Helm plugin for MCP Mesh</li> <li> Document OPA policy integration</li> <li> Add cost optimization practices</li> <li> Create security scanning automation</li> </ul>"},{"location":"06-helm-deployment/05-best-practices/#summary","title":"Summary","text":"<p>You now understand Helm best practices for production:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Follow chart development standards</li> <li>\ud83d\udd11 Implement comprehensive security</li> <li>\ud83d\udd11 Optimize performance</li> <li>\ud83d\udd11 Test thoroughly at all levels</li> </ul>"},{"location":"06-helm-deployment/05-best-practices/#next-steps","title":"Next Steps","text":"<p>Return to the Helm deployment overview or explore troubleshooting.</p> <p>Continue to Troubleshooting Guide \u2192</p> <p>\ud83d\udca1 Tip: Use <code>helm create</code> with a custom starter: <code>helm create mychart --starter mcp-mesh-starter</code></p> <p>\ud83d\udcda Reference: Helm Best Practices Guide</p> <p>\ud83e\uddea Try It: Create a production-ready chart for your own agent following these practices</p>"},{"location":"06-helm-deployment/troubleshooting/","title":"Helm Deployment Troubleshooting","text":"<p>Comprehensive guide to diagnosing and resolving Helm deployment issues</p>"},{"location":"06-helm-deployment/troubleshooting/#overview","title":"Overview","text":"<p>This troubleshooting guide covers common issues encountered when deploying MCP Mesh with Helm. Each issue includes symptoms, root causes, diagnostic steps, and solutions. The guide is organized by issue category to help you quickly find relevant solutions.</p>"},{"location":"06-helm-deployment/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this diagnostic script first:</p> <pre><code>#!/bin/bash\n# helm-diagnostics.sh\n\necho \"=== Helm Diagnostics for MCP Mesh ===\"\necho \"Date: $(date)\"\necho \"\"\n\n# Check Helm version\necho \"1. Helm Version:\"\nhelm version\n\n# Check Kubernetes connection\necho -e \"\\n2. Kubernetes Cluster:\"\nkubectl cluster-info\n\n# List Helm releases\necho -e \"\\n3. Helm Releases:\"\nhelm list -A | grep mcp-mesh\n\n# Check namespaces\necho -e \"\\n4. MCP Mesh Namespaces:\"\nkubectl get namespaces | grep mcp-mesh\n\n# Check pods\necho -e \"\\n5. MCP Mesh Pods:\"\nkubectl get pods -A | grep mcp-mesh\n\n# Check recent events\necho -e \"\\n6. Recent Events:\"\nkubectl get events -A --sort-by='.lastTimestamp' | grep -E \"(mcp-mesh|Error|Failed)\" | tail -20\n\n# Check helm repository\necho -e \"\\n7. Helm Repositories:\"\nhelm repo list | grep mcp-mesh\n\n# Check for common issues\necho -e \"\\n8. Common Issues Check:\"\necho -n \"- CRDs installed: \"\nkubectl get crd | grep -c mcp-mesh || echo \"0\"\necho -n \"- ConfigMap size issues: \"\nkubectl get configmap -A -o json | jq '.items[] | select(.metadata.name | contains(\"mcp-mesh\")) | .data | tostring | length' | awk '{if($1&gt;1048576) print \"WARNING: ConfigMap &gt; 1MB\"; else print \"OK\"}'\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#common-issues-by-category","title":"Common Issues by Category","text":""},{"location":"06-helm-deployment/troubleshooting/#installation-issues","title":"\ud83d\ude80 Installation Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-1-chart-not-found","title":"Issue 1: Chart Not Found","text":"<p>Symptoms:</p> <pre><code>Error: failed to download \"mcp-mesh/mcp-mesh-registry\"\n</code></pre> <p>Cause: Repository not added or outdated</p> <p>Solution:</p> <pre><code># Add repository\nhelm repo add mcp-mesh https://charts.mcp-mesh.io\n\n# Update repositories\nhelm repo update\n\n# Verify repository\nhelm search repo mcp-mesh/\n\n# If using local charts\nhelm install my-release ./path/to/chart\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-2-namespace-already-exists","title":"Issue 2: Namespace Already Exists","text":"<p>Symptoms:</p> <pre><code>Error: namespaces \"mcp-mesh\" already exists\n</code></pre> <p>Cause: Namespace exists but not managed by Helm</p> <p>Solution:</p> <pre><code># Option 1: Remove --create-namespace flag\nhelm install my-release mcp-mesh/mcp-mesh-platform \\\n  --namespace mcp-mesh\n\n# Option 2: Use existing namespace\nkubectl label namespace mcp-mesh managed-by=helm\n\n# Option 3: Delete and recreate\nkubectl delete namespace mcp-mesh\nhelm install my-release mcp-mesh/mcp-mesh-platform \\\n  --namespace mcp-mesh \\\n  --create-namespace\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-3-release-already-exists","title":"Issue 3: Release Already Exists","text":"<p>Symptoms:</p> <pre><code>Error: INSTALLATION FAILED: cannot re-use a name that is still in use\n</code></pre> <p>Cause: Release name already used</p> <p>Solution:</p> <pre><code># Check existing releases\nhelm list -A | grep my-release\n\n# Option 1: Upgrade existing release\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform\n\n# Option 2: Uninstall and reinstall\nhelm uninstall my-release -n mcp-mesh\nhelm install my-release mcp-mesh/mcp-mesh-platform\n\n# Option 3: Use different name\nhelm install my-release-2 mcp-mesh/mcp-mesh-platform\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#dependency-issues","title":"\ud83d\udce6 Dependency Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-4-dependency-download-failed","title":"Issue 4: Dependency Download Failed","text":"<p>Symptoms:</p> <pre><code>Error: found in Chart.yaml, but missing in charts/ directory\n</code></pre> <p>Cause: Dependencies not updated</p> <p>Solution:</p> <pre><code># Update dependencies\nhelm dependency update ./mcp-mesh-platform\n\n# Check dependency status\nhelm dependency list ./mcp-mesh-platform\n\n# Add missing repositories\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\n# Force rebuild\nrm -rf ./mcp-mesh-platform/charts\nrm ./mcp-mesh-platform/Chart.lock\nhelm dependency build ./mcp-mesh-platform\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-5-version-constraint-conflicts","title":"Issue 5: Version Constraint Conflicts","text":"<p>Symptoms:</p> <pre><code>Error: constraint not satisfied: prometheus version \"15.x.x\" does not match \"19.x.x\"\n</code></pre> <p>Cause: Incompatible dependency versions</p> <p>Solution:</p> <pre><code># Update Chart.yaml dependencies\ndependencies:\n  - name: prometheus\n    version: \"~19.0.0\"  # Use tilde for minor version flexibility\n    repository: \"https://prometheus-community.github.io/helm-charts\"\n\n# Or use exact version\ndependencies:\n  - name: prometheus\n    version: \"19.3.3\"\n    repository: \"https://prometheus-community.github.io/helm-charts\"\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#configuration-issues","title":"\ud83d\udd27 Configuration Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-6-values-not-applied","title":"Issue 6: Values Not Applied","text":"<p>Symptoms:</p> <ul> <li>Deployed resources don't match expected configuration</li> <li>Default values used instead of custom values</li> </ul> <p>Cause: Values file path or syntax issues</p> <p>Solution:</p> <pre><code># Debug values processing\nhelm template my-release mcp-mesh/mcp-mesh-platform \\\n  -f values.yaml \\\n  --debug\n\n# Check values precedence\nhelm install my-release mcp-mesh/mcp-mesh-platform \\\n  --dry-run \\\n  -f values-base.yaml \\\n  -f values-prod.yaml \\\n  --set image.tag=v2.0.0\n\n# Validate YAML syntax\nyamllint values.yaml\n\n# Check final values\nhelm get values my-release --all\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-7-template-rendering-errors","title":"Issue 7: Template Rendering Errors","text":"<p>Symptoms:</p> <pre><code>Error: template: mcp-mesh-agent/templates/deployment.yaml:12:20: executing \"...\" at &lt;.Values.missingKey&gt;: nil pointer evaluating interface {}.missingKey\n</code></pre> <p>Cause: Missing required values or template errors</p> <p>Solution:</p> <pre><code># Add defaults in templates\nimage: \"{% raw %}{{ .Values.image.repository }}{% endraw %}:{% raw %}{{ .Values.image.tag | default .Chart.AppVersion }}{% endraw %}\"\n\n# Check for nil values\n{% raw %}{{- if .Values.agent }}{% endraw %}\n{% raw %}{{- if .Values.agent.config }}{% endraw %}\nconfig: {% raw %}{{ .Values.agent.config }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n{% raw %}{{- end }}{% endraw %}\n\n# Use required function\nnamespace: {% raw %}{{ required \"A namespace is required!\" .Values.namespace }}{% endraw %}\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#runtime-issues","title":"\ud83c\udfc3 Runtime Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-8-pods-not-starting","title":"Issue 8: Pods Not Starting","text":"<p>Symptoms:</p> <ul> <li>Pods stuck in Pending, CrashLoopBackOff, or ImagePullBackOff</li> </ul> <p>Diagnosis:</p> <pre><code># Check pod status\nkubectl get pods -n mcp-mesh\n\n# Describe pod for events\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh\n\n# Check logs\nkubectl logs &lt;pod-name&gt; -n mcp-mesh --previous\n\n# Check resource availability\nkubectl top nodes\nkubectl describe node &lt;node-name&gt;\n</code></pre> <p>Solutions:</p> <p>For ImagePullBackOff:</p> <pre><code># Check image exists\ndocker pull &lt;image-name&gt;\n\n# Add image pull secrets\nkubectl create secret docker-registry regcred \\\n  --docker-server=&lt;registry&gt; \\\n  --docker-username=&lt;username&gt; \\\n  --docker-password=&lt;password&gt; \\\n  -n mcp-mesh\n\n# Update values\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform \\\n  --set imagePullSecrets[0].name=regcred\n</code></pre> <p>For CrashLoopBackOff:</p> <pre><code># Check container logs\nkubectl logs &lt;pod-name&gt; -n mcp-mesh -c &lt;container-name&gt;\n\n# Check liveness probe\nkubectl get pod &lt;pod-name&gt; -n mcp-mesh -o yaml | grep -A10 livenessProbe\n\n# Increase initial delay\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform \\\n  --set livenessProbe.initialDelaySeconds=60\n</code></pre> <p>For Pending pods:</p> <pre><code># Check for PVC issues\nkubectl get pvc -n mcp-mesh\n\n# Check node selectors\nkubectl get pod &lt;pod-name&gt; -n mcp-mesh -o yaml | grep -A5 nodeSelector\n\n# Check resource requests\nkubectl describe pod &lt;pod-name&gt; -n mcp-mesh | grep -A10 Requests\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-9-service-connection-issues","title":"Issue 9: Service Connection Issues","text":"<p>Symptoms:</p> <ul> <li>Agents can't connect to registry</li> <li>Service discovery not working</li> </ul> <p>Diagnosis:</p> <pre><code># Test service DNS\nkubectl run -it --rm debug --image=busybox --restart=Never -- \\\n  nslookup mcp-mesh-registry.mcp-mesh.svc.cluster.local\n\n# Check service endpoints\nkubectl get endpoints -n mcp-mesh\n\n# Test connectivity\nkubectl run -it --rm debug --image=curlimages/curl --restart=Never -- \\\n  curl http://mcp-mesh-registry.mcp-mesh.svc.cluster.local:8080/health\n</code></pre> <p>Solution:</p> <pre><code># Verify service selector matches pods\nkubectl get svc mcp-mesh-registry -n mcp-mesh -o yaml | grep -A5 selector\nkubectl get pods -n mcp-mesh --show-labels\n\n# Check network policies\nkubectl get networkpolicy -n mcp-mesh\n\n# Restart CoreDNS if needed\nkubectl rollout restart deployment/coredns -n kube-system\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#performance-issues","title":"\ud83d\udcc8 Performance Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-10-slow-deployments","title":"Issue 10: Slow Deployments","text":"<p>Symptoms:</p> <ul> <li>Helm install/upgrade takes too long</li> <li>Timeouts during deployment</li> </ul> <p>Diagnosis:</p> <pre><code># Time the template rendering\ntime helm template my-release ./mcp-mesh-platform &gt; /dev/null\n\n# Check manifest size\nhelm template my-release ./mcp-mesh-platform | wc -c\n\n# Monitor deployment progress\nkubectl rollout status deployment/mcp-mesh-registry -n mcp-mesh --watch\n</code></pre> <p>Solution:</p> <pre><code># Increase timeout\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform \\\n  --timeout 15m \\\n  --wait\n\n# Use atomic deployments\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform \\\n  --atomic \\\n  --cleanup-on-fail\n\n# Optimize resource requests\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform \\\n  --set resources.requests.cpu=100m \\\n  --set resources.requests.memory=128Mi\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-11-high-memory-usage","title":"Issue 11: High Memory Usage","text":"<p>Symptoms:</p> <ul> <li>OOMKilled pods</li> <li>Nodes running out of memory</li> </ul> <p>Solution:</p> <pre><code># Increase memory limits\nresources:\n  requests:\n    memory: \"512Mi\"\n  limits:\n    memory: \"1Gi\"\n\n# Add JVM heap settings for Java agents\nenv:\n  - name: JAVA_OPTS\n    value: \"-Xmx768m -Xms256m\"\n\n# Enable vertical pod autoscaling\nvpa:\n  enabled: true\n  updateMode: \"Auto\"\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#security-issues","title":"\ud83d\udd10 Security Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-12-rbac-permissions","title":"Issue 12: RBAC Permissions","text":"<p>Symptoms:</p> <pre><code>Error from server (Forbidden): pods is forbidden: User \"system:serviceaccount:mcp-mesh:default\" cannot list resource \"pods\"\n</code></pre> <p>Solution:</p> <pre><code># Create service account with proper permissions\nserviceAccount:\n  create: true\n  name: mcp-mesh-agent\n  annotations: {}\n\n# Add RBAC rules\nrbac:\n  create: true\n  rules:\n    - apiGroups: [\"\"]\n      resources: [\"pods\", \"services\"]\n      verbs: [\"get\", \"list\", \"watch\"]\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-13-secret-management","title":"Issue 13: Secret Management","text":"<p>Symptoms:</p> <ul> <li>Secrets visible in helm values</li> <li>Failed to decrypt secrets</li> </ul> <p>Solution:</p> <pre><code># Use Helm secrets plugin\nhelm plugin install https://github.com/jkroepke/helm-secrets\n\n# Encrypt values\nhelm secrets enc values-secrets.yaml\n\n# Install with encrypted values\nhelm secrets install my-release ./mcp-mesh-platform \\\n  -f values.yaml \\\n  -f values-secrets.yaml\n\n# Or use external secrets\nkubectl create secret generic mcp-mesh-secrets \\\n  --from-literal=api-key=secret123 \\\n  -n mcp-mesh\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#upgrade-issues","title":"\ud83d\udd04 Upgrade Issues","text":""},{"location":"06-helm-deployment/troubleshooting/#issue-14-failed-upgrade","title":"Issue 14: Failed Upgrade","text":"<p>Symptoms:</p> <pre><code>Error: UPGRADE FAILED: another operation (install/upgrade/rollback) is in progress\n</code></pre> <p>Solution:</p> <pre><code># Check for stuck operations\nhelm history my-release -n mcp-mesh\n\n# Fix stuck release\nkubectl delete secret sh.helm.release.v1.my-release.v2 -n mcp-mesh\n\n# Or rollback\nhelm rollback my-release 1 -n mcp-mesh\n\n# Force upgrade\nhelm upgrade my-release mcp-mesh/mcp-mesh-platform \\\n  --force \\\n  --reset-values\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#issue-15-breaking-changes","title":"Issue 15: Breaking Changes","text":"<p>Symptoms:</p> <ul> <li>Upgrade fails due to incompatible changes</li> <li>Resources can't be updated</li> </ul> <p>Solution:</p> <pre><code># Check for breaking changes\nhelm diff upgrade my-release mcp-mesh/mcp-mesh-platform\n\n# Backup current state\nhelm get values my-release -n mcp-mesh &gt; backup-values.yaml\nkubectl get all -n mcp-mesh -o yaml &gt; backup-resources.yaml\n\n# Uninstall and reinstall if needed\nhelm uninstall my-release -n mcp-mesh\nkubectl delete pvc -n mcp-mesh --all  # If keeping data\nhelm install my-release mcp-mesh/mcp-mesh-platform \\\n  -f backup-values.yaml\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#advanced-debugging","title":"Advanced Debugging","text":""},{"location":"06-helm-deployment/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># values-debug.yaml\nglobal:\n  debug: true\n\nlogging:\n  level: DEBUG\n\n# Add debug sidecars\nsidecars:\n  - name: debug\n    image: busybox\n    command: [\"sh\", \"-c\", \"while true; do sleep 30; done;\"]\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#helm-debug-commands","title":"Helm Debug Commands","text":"<pre><code># Full debug output\nhelm install my-release ./chart \\\n  --debug \\\n  --dry-run \\\n  --disable-openapi-validation\n\n# Trace template execution\nhelm template my-release ./chart \\\n  --debug 2&gt;&amp;1 | grep -E \"^---$|Error\"\n\n# Validate chart\nhelm lint ./chart --strict --with-subcharts\n\n# Get all resources created by release\nhelm get manifest my-release -n mcp-mesh | \\\n  kubectl get -f - -o wide\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#kubernetes-debug-tools","title":"Kubernetes Debug Tools","text":"<pre><code># Deploy debug pod\nkubectl run debug \\\n  --image=nicolaka/netshoot \\\n  --rm -it \\\n  --namespace mcp-mesh \\\n  -- /bin/bash\n\n# Inside debug pod:\n# DNS debugging\nnslookup mcp-mesh-registry\ndig mcp-mesh-registry.mcp-mesh.svc.cluster.local\n\n# Network debugging\ncurl -v http://mcp-mesh-registry:8080/health\ntcpdump -i eth0 host mcp-mesh-registry\n\n# Process debugging\nps aux\nnetstat -tulpn\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"06-helm-deployment/troubleshooting/#complete-reset","title":"Complete Reset","text":"<pre><code>#!/bin/bash\n# reset-mcp-mesh.sh\n\nNAMESPACE=\"mcp-mesh\"\nRELEASE=\"my-release\"\n\necho \"WARNING: This will delete all MCP Mesh resources!\"\nread -p \"Continue? (yes/no): \" confirm\n\nif [[ \"$confirm\" == \"yes\" ]]; then\n  # Uninstall Helm release\n  helm uninstall $RELEASE -n $NAMESPACE || true\n\n  # Delete namespace\n  kubectl delete namespace $NAMESPACE --grace-period=0 --force || true\n\n  # Delete CRDs if any\n  kubectl delete crd -l app.kubernetes.io/part-of=mcp-mesh || true\n\n  # Clean up finalizers\n  kubectl get namespace $NAMESPACE -o json | \\\n    jq '.spec.finalizers = []' | \\\n    kubectl replace --raw /api/v1/namespaces/$NAMESPACE/finalize -f -\n\n  echo \"Reset complete. You can now reinstall MCP Mesh.\"\nfi\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#data-recovery","title":"Data Recovery","text":"<pre><code># Backup PVCs before deletion\nkubectl get pvc -n mcp-mesh -o yaml &gt; pvc-backup.yaml\n\n# Restore PVCs\nkubectl apply -f pvc-backup.yaml\n\n# Verify data integrity\nkubectl exec -it mcp-mesh-registry-0 -n mcp-mesh -- \\\n  sqlite3 /data/registry.db \"SELECT COUNT(*) FROM agents;\"\n</code></pre>"},{"location":"06-helm-deployment/troubleshooting/#prevention-best-practices","title":"Prevention Best Practices","text":"<ol> <li>Always Test First</li> </ol> <pre><code>helm install --dry-run --debug\nhelm diff upgrade\n</code></pre> <ol> <li>Use Atomic Deployments</li> </ol> <pre><code>helm upgrade --atomic --cleanup-on-fail\n</code></pre> <ol> <li>Version Everything</li> </ol> <pre><code>image:\n  tag: \"1.0.0\" # Never use 'latest'\n</code></pre> <ol> <li>Monitor Deployments</li> </ol> <pre><code>helm upgrade --wait --timeout 10m\n</code></pre> <ol> <li>Keep Backups <pre><code>helm get values &gt; values-backup.yaml\n</code></pre></li> </ol>"},{"location":"06-helm-deployment/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li> <p>Check Documentation</p> </li> <li> <p>Helm Deployment Guide</p> </li> <li> <p>Helm Best Practices</p> </li> <li> <p>Gather Information</p> </li> </ol> <pre><code>./helm-diagnostics.sh &gt; diagnostics.txt\nhelm get all my-release &gt; release-info.txt\nkubectl logs -n mcp-mesh -l app.kubernetes.io/part-of=mcp-mesh --tail=100 &gt; logs.txt\n</code></pre> <ol> <li>Community Support</li> <li>GitHub Issues: https://github.com/mcp-mesh/mcp-mesh/issues</li> <li>Slack: #mcp-mesh-help</li> <li>Stack Overflow: [mcp-mesh] tag</li> </ol>"},{"location":"06-helm-deployment/troubleshooting/#summary","title":"Summary","text":"<p>This guide covered the most common Helm deployment issues:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd0d Always gather diagnostic information first</li> <li>\ud83d\udd27 Most issues have straightforward solutions</li> <li>\ud83d\udccb Follow systematic troubleshooting steps</li> <li>\ud83d\udee1\ufe0f Implement preventive measures</li> </ul> <p>\ud83d\udca1 Remember: When in doubt, use <code>--dry-run</code> and <code>--debug</code> flags</p> <p>\ud83d\udcda Reference: Helm Troubleshooting Guide</p> <p>\ud83c\udd98 Emergency: If production is down, prioritize <code>helm rollback</code> over debugging</p>"},{"location":"07-observability/01-prometheus-integration/","title":"Prometheus Integration","text":"<p>Collect, store, and query metrics from your MCP Mesh deployment</p>"},{"location":"07-observability/01-prometheus-integration/#overview","title":"Overview","text":"<p>Prometheus is the de facto standard for metrics collection in Kubernetes environments. This guide covers integrating Prometheus with MCP Mesh to collect metrics from the registry, agents, and infrastructure. You'll learn how to configure scraping, create recording rules, optimize storage, and write efficient queries.</p> <p>Proper Prometheus integration provides the foundation for monitoring, alerting, and performance analysis of your MCP Mesh deployment.</p>"},{"location":"07-observability/01-prometheus-integration/#key-concepts","title":"Key Concepts","text":"<ul> <li>Metrics Types: Counter, Gauge, Histogram, Summary</li> <li>Service Discovery: Kubernetes SD for automatic target discovery</li> <li>Recording Rules: Pre-computed queries for efficiency</li> <li>Federation: Scaling Prometheus across clusters</li> <li>Remote Storage: Long-term retention strategies</li> </ul>"},{"location":"07-observability/01-prometheus-integration/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"07-observability/01-prometheus-integration/#step-1-deploy-prometheus-operator","title":"Step 1: Deploy Prometheus Operator","text":"<p>The Prometheus Operator simplifies deployment and management:</p> <pre><code># Install kube-prometheus-stack\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Create monitoring namespace\nkubectl create namespace monitoring\n\n# Install with custom values\ncat &gt; prometheus-values.yaml &lt;&lt; 'EOF'\nprometheus:\n  prometheusSpec:\n    # Enable ServiceMonitor discovery\n    serviceMonitorSelectorNilUsesHelmValues: false\n    podMonitorSelectorNilUsesHelmValues: false\n\n    # Retention configuration\n    retention: 30d\n    retentionSize: 50GB\n\n    # Resource allocation\n    resources:\n      requests:\n        memory: 2Gi\n        cpu: 1\n      limits:\n        memory: 4Gi\n        cpu: 2\n\n    # Storage configuration\n    storageSpec:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: fast-ssd\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 100Gi\n\n    # Scrape configuration\n    scrapeInterval: 30s\n    evaluationInterval: 30s\n\n    # Enable features\n    enableFeatures:\n      - exemplar-storage\n      - memory-snapshot-on-shutdown\n\n# Grafana configuration\ngrafana:\n  enabled: true\n  adminPassword: \"changeme\"\n  persistence:\n    enabled: true\n    size: 10Gi\n\n# AlertManager configuration\nalertmanager:\n  enabled: true\n  config:\n    global:\n      resolve_timeout: 5m\n    route:\n      group_by: ['alertname', 'namespace']\n      group_wait: 10s\n      group_interval: 10s\n      repeat_interval: 12h\n      receiver: 'default'\n    receivers:\n    - name: 'default'\n      slack_configs:\n      - api_url: 'YOUR_SLACK_WEBHOOK_URL'\n        channel: '#alerts'\nEOF\n\n# Install Prometheus stack\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --values prometheus-values.yaml\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#step-2-configure-mcp-mesh-metrics","title":"Step 2: Configure MCP Mesh Metrics","text":"<p>Implement metrics in MCP Mesh components:</p> <pre><code># mcp_mesh/metrics.py\nfrom prometheus_client import Counter, Histogram, Gauge, Info\nfrom prometheus_client import CollectorRegistry, generate_latest\nimport time\nfrom functools import wraps\n\n# Create registry\nREGISTRY = CollectorRegistry()\n\n# Define metrics\nagent_info = Info(\n    'mcp_mesh_agent',\n    'MCP Mesh agent information',\n    ['agent_name', 'version', 'capabilities'],\n    registry=REGISTRY\n)\n\nrequest_count = Counter(\n    'mcp_mesh_requests_total',\n    'Total number of requests processed',\n    ['agent', 'method', 'status'],\n    registry=REGISTRY\n)\n\nrequest_duration = Histogram(\n    'mcp_mesh_request_duration_seconds',\n    'Request duration in seconds',\n    ['agent', 'method'],\n    buckets=(0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0),\n    registry=REGISTRY\n)\n\nactive_connections = Gauge(\n    'mcp_mesh_connections_active',\n    'Number of active connections',\n    ['agent', 'type'],\n    registry=REGISTRY\n)\n\nregistry_agents = Gauge(\n    'mcp_mesh_registry_agents_total',\n    'Total number of registered agents',\n    ['status'],\n    registry=REGISTRY\n)\n\n# Decorator for timing functions\ndef track_request_duration(agent_name, method):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            start_time = time.time()\n            status = \"success\"\n            try:\n                result = await func(*args, **kwargs)\n                return result\n            except Exception as e:\n                status = \"error\"\n                raise\n            finally:\n                duration = time.time() - start_time\n                request_count.labels(\n                    agent=agent_name,\n                    method=method,\n                    status=status\n                ).inc()\n                request_duration.labels(\n                    agent=agent_name,\n                    method=method\n                ).observe(duration)\n        return wrapper\n    return decorator\n\n# Metrics endpoint handler\nasync def metrics_handler(request):\n    \"\"\"Prometheus metrics endpoint\"\"\"\n    metrics = generate_latest(REGISTRY)\n    return Response(\n        body=metrics,\n        content_type=\"text/plain; version=0.0.4; charset=utf-8\"\n    )\n\n# Usage in agent\nclass WeatherAgent:\n    def __init__(self, name=\"weather-agent\"):\n        self.name = name\n        # Set agent info\n        agent_info.labels(\n            agent_name=self.name,\n            version=\"1.0.0\",\n            capabilities=\"weather_forecast,weather_current\"\n        ).set(1)\n\n        # Track connections\n        active_connections.labels(\n            agent=self.name,\n            type=\"client\"\n        ).set(0)\n\n    @track_request_duration(\"weather-agent\", \"get_forecast\")\n    async def get_forecast(self, location: str):\n        \"\"\"Get weather forecast with metrics\"\"\"\n        # Increment active connections\n        active_connections.labels(\n            agent=self.name,\n            type=\"client\"\n        ).inc()\n\n        try:\n            # Your forecast logic here\n            forecast = await self._fetch_forecast(location)\n            return forecast\n        finally:\n            # Decrement active connections\n            active_connections.labels(\n                agent=self.name,\n                type=\"client\"\n            ).dec()\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#step-3-create-servicemonitors","title":"Step 3: Create ServiceMonitors","text":"<p>Define ServiceMonitors for Prometheus to discover MCP Mesh services:</p> <pre><code># servicemonitor-registry.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: mcp-mesh-registry\n  namespace: mcp-mesh\n  labels:\n    app: mcp-mesh\n    component: registry\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: mcp-mesh-registry\n  endpoints:\n    - port: http\n      interval: 30s\n      path: /metrics\n      # Add trace_id to metrics for correlation\n      metricRelabelings:\n        - sourceLabels: [__name__]\n          targetLabel: __tmp_prometheus_job_name\n        - sourceLabels: [trace_id]\n          targetLabel: trace_id\n          regex: \"(.*)\"\n          replacement: \"${1}\"\n        # Drop high-cardinality metrics\n        - sourceLabels: [__name__]\n          regex: \"go_memstats_.*\"\n          action: drop\n\n---\n# servicemonitor-agents.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: mcp-mesh-agents\n  namespace: mcp-mesh\n  labels:\n    app: mcp-mesh\n    component: agent\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/part-of: mcp-mesh\n      app.kubernetes.io/component: agent\n  endpoints:\n    - port: metrics\n      interval: 30s\n      path: /metrics\n      # Honor agent-provided timestamps\n      honorTimestamps: true\n      # Add agent name from pod label\n      relabelings:\n        - sourceLabels: [__meta_kubernetes_pod_label_agent_name]\n          targetLabel: agent\n        - sourceLabels: [__meta_kubernetes_pod_namespace]\n          targetLabel: namespace\n        - sourceLabels: [__meta_kubernetes_pod_name]\n          targetLabel: pod\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#step-4-configure-recording-rules","title":"Step 4: Configure Recording Rules","text":"<p>Create recording rules for common queries:</p> <pre><code># recording-rules.yaml\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: mcp-mesh-recording-rules\n  namespace: monitoring\n  labels:\n    prometheus: kube-prometheus\nspec:\n  groups:\n    - name: mcp_mesh.rules\n      interval: 30s\n      rules:\n        # Request rate by agent\n        - record: mcp_mesh:request_rate\n          expr: |\n            sum by (agent, namespace) (\n              rate(mcp_mesh_requests_total[5m])\n            )\n\n        # Error rate by agent\n        - record: mcp_mesh:error_rate\n          expr: |\n            sum by (agent, namespace) (\n              rate(mcp_mesh_requests_total{status=\"error\"}[5m])\n            ) / ignoring(status) group_left\n            sum by (agent, namespace) (\n              rate(mcp_mesh_requests_total[5m])\n            )\n\n        # P95 latency by agent\n        - record: mcp_mesh:request_duration:p95\n          expr: |\n            histogram_quantile(0.95,\n              sum by (agent, namespace, le) (\n                rate(mcp_mesh_request_duration_seconds_bucket[5m])\n              )\n            )\n\n        # Active connections per agent\n        - record: mcp_mesh:connections:sum\n          expr: |\n            sum by (agent, namespace) (\n              mcp_mesh_connections_active\n            )\n\n        # Registry health score\n        - record: mcp_mesh:registry:health_score\n          expr: |\n            (\n              up{job=\"mcp-mesh-registry\"} * 100\n              + (1 - mcp_mesh:error_rate{agent=\"registry\"}) * 50\n              + (mcp_mesh:request_duration:p95{agent=\"registry\"} &lt; 0.5) * 50\n            ) / 2\n\n    - name: mcp_mesh.slo\n      interval: 30s\n      rules:\n        # Availability SLO\n        - record: mcp_mesh:slo:availability\n          expr: |\n            1 - (\n              sum by (agent) (\n                rate(mcp_mesh_requests_total{status=\"error\"}[5m])\n              ) / ignoring(status) group_left\n              sum by (agent) (\n                rate(mcp_mesh_requests_total[5m])\n              )\n            )\n\n        # Latency SLO\n        - record: mcp_mesh:slo:latency\n          expr: |\n            histogram_quantile(0.95,\n              sum by (agent, le) (\n                rate(mcp_mesh_request_duration_seconds_bucket[5m])\n              )\n            ) &lt; bool 1.0\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#step-5-optimize-prometheus-performance","title":"Step 5: Optimize Prometheus Performance","text":"<p>Configure Prometheus for optimal performance:</p> <pre><code># prometheus-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config-custom\n  namespace: monitoring\ndata:\n  prometheus.yaml: |\n    global:\n      scrape_interval: 30s\n      scrape_timeout: 10s\n      evaluation_interval: 30s\n\n      # External labels for federation\n      external_labels:\n        cluster: 'production'\n        region: 'us-east-1'\n\n    # Remote write for long-term storage\n    remote_write:\n    - url: https://prometheus-storage.example.com/api/v1/write\n      remote_timeout: 30s\n      queue_config:\n        capacity: 10000\n        max_shards: 30\n        min_shards: 1\n        max_samples_per_send: 5000\n        batch_send_deadline: 5s\n        min_backoff: 30ms\n        max_backoff: 100ms\n\n      # Only send aggregated metrics\n      write_relabel_configs:\n      - source_labels: [__name__]\n        regex: 'mcp_mesh:.*'\n        action: keep\n\n    # Alerting configuration\n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets:\n          - alertmanager:9093\n\n    # Scrape configs\n    scrape_configs:\n    # MCP Mesh registry with higher frequency\n    - job_name: 'mcp-mesh-registry'\n      scrape_interval: 15s\n      kubernetes_sd_configs:\n      - role: endpoints\n        namespaces:\n          names:\n          - mcp-mesh\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_name]\n        regex: '.*registry.*'\n        action: keep\n      - source_labels: [__meta_kubernetes_namespace]\n        target_label: namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        target_label: service\n\n    # MCP Mesh agents\n    - job_name: 'mcp-mesh-agents'\n      kubernetes_sd_configs:\n      - role: pod\n        namespaces:\n          names:\n          - mcp-mesh\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n        action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        target_label: __address__\n      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n        target_label: agent_name\n      - source_labels: [__meta_kubernetes_pod_namespace]\n        target_label: namespace\n      - source_labels: [__meta_kubernetes_pod_name]\n        target_label: pod\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#step-6-set-up-federation","title":"Step 6: Set Up Federation","text":"<p>Configure Prometheus federation for multi-cluster setups:</p> <pre><code># federation-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-federation\n  namespace: monitoring\ndata:\n  federation.yaml: |\n    # Global Prometheus configuration\n    scrape_configs:\n    - job_name: 'federate'\n      scrape_interval: 15s\n      honor_labels: true\n      metrics_path: '/federate'\n      params:\n        'match[]':\n        # Only federate aggregated metrics\n        - 'mcp_mesh:.*'\n        - 'up{job=~\"mcp-mesh.*\"}'\n        - 'prometheus_build_info'\n      static_configs:\n      - targets:\n        - 'prometheus-us-east-1:9090'\n        - 'prometheus-us-west-2:9090'\n        - 'prometheus-eu-west-1:9090'\n      relabel_configs:\n      - source_labels: [__address__]\n        regex: 'prometheus-(.*):9090'\n        target_label: source_cluster\n        replacement: '$1'\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#configuration-options","title":"Configuration Options","text":"Component Configuration Description Scrape Interval <code>30s</code> How often to collect metrics Retention <code>30d</code> How long to keep metrics Storage <code>100Gi</code> Prometheus data storage Memory <code>4Gi</code> Prometheus memory limit Remote Write Enabled Long-term storage"},{"location":"07-observability/01-prometheus-integration/#examples","title":"Examples","text":""},{"location":"07-observability/01-prometheus-integration/#example-1-custom-business-metrics","title":"Example 1: Custom Business Metrics","text":"<pre><code># business_metrics.py\nfrom prometheus_client import Counter, Histogram, Gauge\n\n# Business KPIs\nrevenue_counter = Counter(\n    'mcp_mesh_business_revenue_total',\n    'Total revenue processed',\n    ['agent', 'currency', 'product'],\n    registry=REGISTRY\n)\n\napi_calls_counter = Counter(\n    'mcp_mesh_business_api_calls_total',\n    'Total external API calls',\n    ['agent', 'api_provider', 'endpoint'],\n    registry=REGISTRY\n)\n\ncache_hit_rate = Gauge(\n    'mcp_mesh_cache_hit_rate',\n    'Cache hit rate percentage',\n    ['agent', 'cache_type'],\n    registry=REGISTRY\n)\n\nclass AnalyticsAgent:\n    @track_request_duration(\"analytics\", \"process_transaction\")\n    async def process_transaction(self, transaction):\n        \"\"\"Process transaction with business metrics\"\"\"\n        # Track revenue\n        revenue_counter.labels(\n            agent=\"analytics\",\n            currency=transaction.currency,\n            product=transaction.product\n        ).inc(transaction.amount)\n\n        # Track API usage\n        if transaction.requires_external_validation:\n            api_calls_counter.labels(\n                agent=\"analytics\",\n                api_provider=\"payment-gateway\",\n                endpoint=\"validate\"\n            ).inc()\n\n        # Update cache metrics\n        hit_rate = await self.cache.get_hit_rate()\n        cache_hit_rate.labels(\n            agent=\"analytics\",\n            cache_type=\"redis\"\n        ).set(hit_rate * 100)\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#example-2-advanced-queries","title":"Example 2: Advanced Queries","text":"<pre><code># Top 5 agents by request rate\ntopk(5,\n  sum by (agent) (\n    rate(mcp_mesh_requests_total[5m])\n  )\n)\n\n# Agents with error rate &gt; 1%\nsum by (agent) (\n  rate(mcp_mesh_requests_total{status=\"error\"}[5m])\n) / ignoring(status) group_left\nsum by (agent) (\n  rate(mcp_mesh_requests_total[5m])\n) &gt; 0.01\n\n# Request duration heatmap\nsum by (le) (\n  rate(mcp_mesh_request_duration_seconds_bucket[5m])\n)\n\n# Week-over-week comparison\n(\n  sum by (agent) (\n    rate(mcp_mesh_requests_total[5m])\n  ) -\n  sum by (agent) (\n    rate(mcp_mesh_requests_total[5m] offset 1w)\n  )\n) / sum by (agent) (\n  rate(mcp_mesh_requests_total[5m] offset 1w)\n) * 100\n\n# Predict resource usage\npredict_linear(\n  mcp_mesh_connections_active[1h],\n  3600 * 4  # 4 hours\n)\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Label Cardinality: Keep label values bounded</li> <li>Metric Naming: Follow Prometheus conventions</li> <li>Recording Rules: Pre-compute expensive queries</li> <li>Retention Policy: Balance cost vs history</li> <li>Federation: Only federate aggregated metrics</li> </ol>"},{"location":"07-observability/01-prometheus-integration/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"07-observability/01-prometheus-integration/#pitfall-1-high-cardinality","title":"Pitfall 1: High Cardinality","text":"<p>Problem: Too many unique label combinations</p> <p>Solution: Limit label values:</p> <pre><code># Bad - unbounded cardinality\nrequest_count.labels(\n    user_id=user.id,  # Millions of values!\n    endpoint=endpoint\n).inc()\n\n# Good - bounded cardinality\nrequest_count.labels(\n    user_type=user.type,  # Limited values\n    endpoint=endpoint\n).inc()\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#pitfall-2-missing-metrics","title":"Pitfall 2: Missing Metrics","text":"<p>Problem: Metrics not appearing in Prometheus</p> <p>Solution: Check discovery and networking:</p> <pre><code># Verify endpoints\nkubectl get endpoints -n mcp-mesh\n\n# Check ServiceMonitor\nkubectl describe servicemonitor mcp-mesh-registry -n mcp-mesh\n\n# Test metrics endpoint\nkubectl port-forward -n mcp-mesh svc/mcp-mesh-registry 8080\ncurl http://localhost:8080/metrics\n\n# Check Prometheus targets\nkubectl port-forward -n monitoring svc/prometheus-operated 9090\n# Visit http://localhost:9090/targets\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#testing","title":"Testing","text":""},{"location":"07-observability/01-prometheus-integration/#validate-metrics","title":"Validate Metrics","text":"<pre><code># test_metrics.py\nimport pytest\nfrom prometheus_client import REGISTRY\nfrom prometheus_client.parser import text_string_to_metric_families\n\ndef test_metrics_registration():\n    \"\"\"Test that all metrics are properly registered\"\"\"\n    # Get all metrics\n    metrics = list(REGISTRY.collect())\n\n    # Verify expected metrics exist\n    metric_names = [m.name for m in metrics]\n    assert 'mcp_mesh_requests_total' in metric_names\n    assert 'mcp_mesh_request_duration_seconds' in metric_names\n\ndef test_metrics_format():\n    \"\"\"Test metrics are in correct format\"\"\"\n    from mcp_mesh.metrics import generate_latest\n\n    output = generate_latest(REGISTRY).decode('utf-8')\n\n    # Parse metrics\n    families = list(text_string_to_metric_families(output))\n\n    # Verify format\n    for family in families:\n        assert family.name.startswith('mcp_mesh_')\n        assert family.documentation\n        assert family.type in ['counter', 'gauge', 'histogram', 'summary']\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#load-testing","title":"Load Testing","text":"<pre><code>#!/bin/bash\n# load-test-metrics.sh\n\necho \"Testing Prometheus under load...\"\n\n# Generate load\nfor i in {1..1000}; do\n  curl -s http://mcp-mesh-registry:8080/api/agents &amp;\ndone\nwait\n\n# Check Prometheus performance\ncurl -s http://prometheus:9090/api/v1/query \\\n  -d 'query=rate(prometheus_engine_query_duration_seconds_sum[5m])' | \\\n  jq '.data.result[0].value[1]'\n\n# Check memory usage\ncurl -s http://prometheus:9090/api/v1/query \\\n  -d 'query=prometheus_tsdb_symbol_table_size_bytes' | \\\n  jq '.data.result[0].value[1]' | \\\n  awk '{print $1/1024/1024 \" MB\"}'\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"07-observability/01-prometheus-integration/#monitor-prometheus-health","title":"Monitor Prometheus Health","text":"<pre><code># prometheus-monitoring.yaml\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: prometheus-health\n  namespace: monitoring\nspec:\n  groups:\n    - name: prometheus.rules\n      rules:\n        - alert: PrometheusHighMemoryUsage\n          expr: |\n            (\n              prometheus_tsdb_symbol_table_size_bytes /\n              prometheus_tsdb_storage_blocks_bytes\n            ) &gt; 0.5\n          for: 15m\n          labels:\n            severity: warning\n          annotations:\n            summary: \"Prometheus high memory usage\"\n            description: \"Prometheus {% raw %}{{ $labels.instance }}{% endraw %} memory usage is high\"\n\n        - alert: PrometheusTargetDown\n          expr: up{job=~\"mcp-mesh.*\"} == 0\n          for: 5m\n          labels:\n            severity: critical\n          annotations:\n            summary: \"MCP Mesh target down\"\n            description: \"Target {% raw %}{{ $labels.instance }}{% endraw %} is down\"\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#debug-metrics-issues","title":"Debug Metrics Issues","text":"<pre><code># Check Prometheus configuration\nkubectl exec -n monitoring prometheus-0 -- \\\n  promtool check config /etc/prometheus/config_out/prometheus.env.yaml\n\n# View Prometheus logs\nkubectl logs -n monitoring prometheus-0 -c prometheus\n\n# Check TSDB status\nkubectl exec -n monitoring prometheus-0 -- \\\n  promtool tsdb analyze /prometheus\n\n# Cardinality analysis\nkubectl port-forward -n monitoring svc/prometheus-operated 9090\ncurl -s http://localhost:9090/api/v1/label/__name__/values | \\\n  jq -r '.data[]' | wc -l\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"07-observability/01-prometheus-integration/#issue-1-metrics-not-collected","title":"Issue 1: Metrics Not Collected","text":"<p>Symptoms: No data in Prometheus for MCP Mesh</p> <p>Cause: ServiceMonitor not matched or network issues</p> <p>Solution:</p> <pre><code># Check ServiceMonitor labels match Prometheus\nkubectl get prometheus -n monitoring -o yaml | grep -A5 serviceMonitorSelector\n\n# Ensure labels match\nkubectl label servicemonitor mcp-mesh-registry -n mcp-mesh \\\n  prometheus=kube-prometheus\n\n# Restart Prometheus\nkubectl rollout restart statefulset prometheus-prometheus -n monitoring\n</code></pre>"},{"location":"07-observability/01-prometheus-integration/#issue-2-high-memory-usage","title":"Issue 2: High Memory Usage","text":"<p>Symptoms: Prometheus OOMKilled</p> <p>Cause: Too many metrics or high cardinality</p> <p>Solution:</p> <pre><code># Add metric relabeling to drop unnecessary metrics\nmetricRelabelings:\n  - sourceLabels: [__name__]\n    regex: \"go_.*|process_.*\"\n    action: drop\n\n# Reduce retention\nprometheusSpec:\n  retention: 7d\n  retentionSize: 20GB\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"07-observability/01-prometheus-integration/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Storage: Local storage not suitable for HA</li> <li>Cardinality: Limited by available memory</li> <li>Query Performance: Complex queries can be slow</li> <li>Data Loss: Possible during restarts without persistent storage</li> </ul>"},{"location":"07-observability/01-prometheus-integration/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add Thanos sidecar configuration</li> <li> Document multi-tenancy setup</li> <li> Create example Jsonnet dashboards</li> <li> Add PromQL query library</li> <li> Document sharding strategies</li> </ul>"},{"location":"07-observability/01-prometheus-integration/#summary","title":"Summary","text":"<p>You now have Prometheus integrated with MCP Mesh:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Metrics collection from all components</li> <li>\ud83d\udd11 Efficient storage and querying</li> <li>\ud83d\udd11 Recording rules for performance</li> <li>\ud83d\udd11 Federation for multi-cluster</li> </ul>"},{"location":"07-observability/01-prometheus-integration/#next-steps","title":"Next Steps","text":"<p>Let's visualize these metrics with Grafana dashboards.</p> <p>Continue to Grafana Dashboards \u2192</p> <p>\ud83d\udca1 Tip: Use Prometheus query inspector to understand query performance: <code>EXPLAIN &lt;query&gt;</code></p> <p>\ud83d\udcda Reference: Prometheus Best Practices</p> <p>\ud83e\uddea Try It: Write a recording rule for your most common query to improve dashboard performance</p>"},{"location":"07-observability/02-grafana-dashboards/","title":"Grafana Dashboards","text":"<p>Visualize and analyze MCP Mesh metrics with powerful, customizable dashboards</p>"},{"location":"07-observability/02-grafana-dashboards/#overview","title":"Overview","text":"<p>Grafana provides rich visualization capabilities for monitoring MCP Mesh deployments. This guide covers creating comprehensive dashboards, implementing drill-down navigation, setting up variables for dynamic filtering, and sharing dashboards across teams. You'll learn to build dashboards that provide actionable insights into agent performance, system health, and business metrics.</p> <p>Well-designed Grafana dashboards transform raw metrics into meaningful visualizations that enable quick decision-making and proactive issue resolution.</p>"},{"location":"07-observability/02-grafana-dashboards/#key-concepts","title":"Key Concepts","text":"<ul> <li>Dashboard Organization: Logical grouping and navigation</li> <li>Panel Types: Time series, stat, gauge, heatmap, logs</li> <li>Variables: Dynamic filtering and drill-down</li> <li>Annotations: Correlating events with metrics</li> <li>Alerting: Visual alerts and notifications</li> </ul>"},{"location":"07-observability/02-grafana-dashboards/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"07-observability/02-grafana-dashboards/#step-1-access-and-configure-grafana","title":"Step 1: Access and Configure Grafana","text":"<p>Connect to Grafana and configure data sources:</p> <pre><code># Port forward to Grafana\nkubectl port-forward -n monitoring svc/prometheus-grafana 3000:80\n\n# Default credentials (from kube-prometheus-stack)\n# Username: admin\n# Password: prom-operator\n\n# Or get password from secret\nkubectl get secret -n monitoring prometheus-grafana \\\n  -o jsonpath=\"{.data.admin-password}\" | base64 --decode\n</code></pre> <p>Configure Prometheus data source:</p> <pre><code># datasource-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-datasources\n  namespace: monitoring\ndata:\n  prometheus.yaml: |\n    apiVersion: 1\n    datasources:\n    - name: Prometheus\n      type: prometheus\n      access: proxy\n      url: http://prometheus-operated:9090\n      isDefault: true\n      jsonData:\n        timeInterval: 30s\n        queryTimeout: 60s\n        httpMethod: POST\n      # Enable exemplars for trace correlation\n      exemplarTraceIdDestinations:\n      - name: traceID\n        datasourceUid: tempo\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#step-2-create-mcp-mesh-overview-dashboard","title":"Step 2: Create MCP Mesh Overview Dashboard","text":"<p>Create a comprehensive overview dashboard:</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh Overview\",\n    \"uid\": \"mcp-mesh-overview\",\n    \"description\": \"High-level overview of MCP Mesh platform health and performance\",\n    \"tags\": [\"mcp-mesh\", \"overview\"],\n    \"timezone\": \"browser\",\n    \"schemaVersion\": 30,\n    \"version\": 1,\n    \"refresh\": \"30s\",\n\n    \"variables\": {\n      \"list\": [\n        {\n          \"name\": \"namespace\",\n          \"type\": \"query\",\n          \"datasource\": \"Prometheus\",\n          \"query\": \"label_values(mcp_mesh_requests_total, namespace)\",\n          \"refresh\": 1,\n          \"multi\": false,\n          \"includeAll\": true,\n          \"allValue\": \".*\"\n        },\n        {\n          \"name\": \"agent\",\n          \"type\": \"query\",\n          \"datasource\": \"Prometheus\",\n          \"query\": \"label_values(mcp_mesh_requests_total{namespace=~\\\"$namespace\\\"}, agent)\",\n          \"refresh\": 1,\n          \"multi\": true,\n          \"includeAll\": true,\n          \"allValue\": \".*\"\n        },\n        {\n          \"name\": \"interval\",\n          \"type\": \"interval\",\n          \"options\": [\n            { \"text\": \"1m\", \"value\": \"1m\" },\n            { \"text\": \"5m\", \"value\": \"5m\" },\n            { \"text\": \"10m\", \"value\": \"10m\" },\n            { \"text\": \"30m\", \"value\": \"30m\" },\n            { \"text\": \"1h\", \"value\": \"1h\" }\n          ],\n          \"current\": {\n            \"text\": \"5m\",\n            \"value\": \"5m\"\n          }\n        }\n      ]\n    },\n\n    \"panels\": [\n      {\n        \"title\": \"System Health Score\",\n        \"type\": \"stat\",\n        \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 0, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"avg(mcp_mesh:registry:health_score)\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"reduceOptions\": {\n            \"calcs\": [\"lastNotNull\"]\n          },\n          \"colorMode\": \"background\",\n          \"graphMode\": \"none\",\n          \"orientation\": \"horizontal\"\n        },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 80 },\n                { \"color\": \"green\", \"value\": 95 }\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"Active Agents\",\n        \"type\": \"stat\",\n        \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 6, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"count(up{job=~\\\"mcp-mesh.*\\\", namespace=~\\\"$namespace\\\"} == 1)\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"colorMode\": \"value\",\n          \"graphMode\": \"area\",\n          \"orientation\": \"horizontal\"\n        }\n      },\n\n      {\n        \"title\": \"Total Request Rate\",\n        \"type\": \"stat\",\n        \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 12, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(mcp_mesh_requests_total{namespace=~\\\"$namespace\\\", agent=~\\\"$agent\\\"}[$interval]))\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"reqps\",\n            \"decimals\": 2\n          }\n        }\n      },\n\n      {\n        \"title\": \"Error Rate\",\n        \"type\": \"stat\",\n        \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 18, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(mcp_mesh_requests_total{namespace=~\\\"$namespace\\\", agent=~\\\"$agent\\\", status=\\\"error\\\"}[$interval])) / sum(rate(mcp_mesh_requests_total{namespace=~\\\"$namespace\\\", agent=~\\\"$agent\\\"}[$interval])) * 100\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"decimals\": 2,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 1 },\n                { \"color\": \"red\", \"value\": 5 }\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"Request Rate by Agent\",\n        \"type\": \"timeseries\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 0, \"y\": 4 },\n        \"targets\": [\n          {\n            \"expr\": \"sum by (agent) (rate(mcp_mesh_requests_total{namespace=~\\\"$namespace\\\", agent=~\\\"$agent\\\"}[$interval]))\",\n            \"legendFormat\": \"{% raw %}{{agent}}{% endraw %}\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"reqps\",\n            \"custom\": {\n              \"drawStyle\": \"line\",\n              \"lineInterpolation\": \"smooth\",\n              \"lineWidth\": 2,\n              \"fillOpacity\": 10,\n              \"gradientMode\": \"opacity\",\n              \"spanNulls\": false,\n              \"showPoints\": \"never\",\n              \"stacking\": {\n                \"mode\": \"none\"\n              }\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"Response Time Heatmap\",\n        \"type\": \"heatmap\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 4 },\n        \"targets\": [\n          {\n            \"expr\": \"sum by (le) (increase(mcp_mesh_request_duration_seconds_bucket{namespace=~\\\"$namespace\\\", agent=~\\\"$agent\\\"}[$interval]))\",\n            \"format\": \"heatmap\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"calculate\": false,\n          \"yAxis\": {\n            \"unit\": \"s\",\n            \"decimals\": 2\n          },\n          \"cellGap\": 1,\n          \"colorScheme\": \"interpolateSpectral\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#step-3-create-agent-specific-dashboard","title":"Step 3: Create Agent-Specific Dashboard","text":"<p>Build detailed dashboards for individual agents:</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh Agent Details\",\n    \"uid\": \"mcp-mesh-agent-details\",\n    \"description\": \"Detailed metrics for individual MCP Mesh agents\",\n\n    \"panels\": [\n      {\n        \"title\": \"Agent Info\",\n        \"type\": \"table\",\n        \"gridPos\": { \"h\": 4, \"w\": 24, \"x\": 0, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"mcp_mesh_agent{agent=\\\"$agent\\\"}\",\n            \"format\": \"table\",\n            \"instant\": true,\n            \"refId\": \"A\"\n          }\n        ],\n        \"transformations\": [\n          {\n            \"id\": \"filterFieldsByName\",\n            \"options\": {\n              \"include\": {\n                \"names\": [\"agent_name\", \"version\", \"capabilities\", \"Value\"]\n              }\n            }\n          }\n        ]\n      },\n\n      {\n        \"title\": \"Request Latency Percentiles\",\n        \"type\": \"timeseries\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 0, \"y\": 4 },\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.50, sum by (le) (rate(mcp_mesh_request_duration_seconds_bucket{agent=\\\"$agent\\\"}[$interval])))\",\n            \"legendFormat\": \"p50\",\n            \"refId\": \"A\"\n          },\n          {\n            \"expr\": \"histogram_quantile(0.95, sum by (le) (rate(mcp_mesh_request_duration_seconds_bucket{agent=\\\"$agent\\\"}[$interval])))\",\n            \"legendFormat\": \"p95\",\n            \"refId\": \"B\"\n          },\n          {\n            \"expr\": \"histogram_quantile(0.99, sum by (le) (rate(mcp_mesh_request_duration_seconds_bucket{agent=\\\"$agent\\\"}[$interval])))\",\n            \"legendFormat\": \"p99\",\n            \"refId\": \"C\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"s\",\n            \"custom\": {\n              \"axisLabel\": \"Response Time\",\n              \"drawStyle\": \"line\",\n              \"lineWidth\": 2,\n              \"fillOpacity\": 0\n            }\n          },\n          \"overrides\": [\n            {\n              \"matcher\": { \"id\": \"byName\", \"options\": \"p99\" },\n              \"properties\": [\n                {\n                  \"id\": \"color\",\n                  \"value\": { \"mode\": \"fixed\", \"fixedColor\": \"red\" }\n                }\n              ]\n            }\n          ]\n        }\n      },\n\n      {\n        \"title\": \"Request Types Distribution\",\n        \"type\": \"piechart\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 4 },\n        \"targets\": [\n          {\n            \"expr\": \"sum by (method) (increase(mcp_mesh_requests_total{agent=\\\"$agent\\\"}[$interval]))\",\n            \"legendFormat\": \"{% raw %}{{method}}{% endraw %}\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"reduceOptions\": {\n            \"values\": false,\n            \"calcs\": [\"lastNotNull\"]\n          },\n          \"pieType\": \"donut\",\n          \"displayLabels\": [\"name\", \"percent\"],\n          \"legendDisplayMode\": \"table\",\n          \"legendPlacement\": \"right\"\n        }\n      },\n\n      {\n        \"title\": \"Active Connections\",\n        \"type\": \"graph\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 0, \"y\": 12 },\n        \"targets\": [\n          {\n            \"expr\": \"mcp_mesh_connections_active{agent=\\\"$agent\\\"}\",\n            \"legendFormat\": \"{% raw %}{{type}}{% endraw %}\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"yaxes\": [\n          {\n            \"label\": \"Connections\",\n            \"format\": \"short\",\n            \"min\": 0\n          }\n        ]\n      },\n\n      {\n        \"title\": \"Resource Usage\",\n        \"type\": \"timeseries\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 12 },\n        \"targets\": [\n          {\n            \"expr\": \"rate(container_cpu_usage_seconds_total{pod=~\\\"$agent.*\\\"}[$interval]) * 100\",\n            \"legendFormat\": \"CPU %\",\n            \"refId\": \"A\"\n          },\n          {\n            \"expr\": \"container_memory_working_set_bytes{pod=~\\\"$agent.*\\\"} / 1024 / 1024\",\n            \"legendFormat\": \"Memory (MB)\",\n            \"refId\": \"B\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"custom\": {\n              \"drawStyle\": \"line\",\n              \"lineWidth\": 2,\n              \"fillOpacity\": 10\n            }\n          },\n          \"overrides\": [\n            {\n              \"matcher\": { \"id\": \"byName\", \"options\": \"CPU %\" },\n              \"properties\": [\n                { \"id\": \"unit\", \"value\": \"percent\" },\n                { \"id\": \"custom.axisPlacement\", \"value\": \"left\" }\n              ]\n            },\n            {\n              \"matcher\": { \"id\": \"byName\", \"options\": \"Memory (MB)\" },\n              \"properties\": [\n                { \"id\": \"unit\", \"value\": \"decmbytes\" },\n                { \"id\": \"custom.axisPlacement\", \"value\": \"right\" }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#step-4-create-business-metrics-dashboard","title":"Step 4: Create Business Metrics Dashboard","text":"<p>Visualize business-specific KPIs:</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh Business Metrics\",\n    \"uid\": \"mcp-mesh-business\",\n    \"description\": \"Business KPIs and analytics for MCP Mesh\",\n\n    \"panels\": [\n      {\n        \"title\": \"Revenue by Agent\",\n        \"type\": \"bargauge\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 0, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"sum by (agent) (increase(mcp_mesh_business_revenue_total[$__range]))\",\n            \"legendFormat\": \"{% raw %}{{agent}}{% endraw %}\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"orientation\": \"horizontal\",\n          \"displayMode\": \"gradient\",\n          \"showUnfilled\": true\n        },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"currencyUSD\",\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 10000 },\n                { \"color\": \"red\", \"value\": 50000 }\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"API Usage Costs\",\n        \"type\": \"timeseries\",\n        \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"sum by (api_provider) (increase(mcp_mesh_business_api_calls_total[$interval]) * 0.001)\",\n            \"legendFormat\": \"{% raw %}{{api_provider}}{% endraw %} ($0.001/call)\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"currencyUSD\",\n            \"custom\": {\n              \"stacking\": {\n                \"mode\": \"normal\"\n              },\n              \"fillOpacity\": 50\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"Cache Performance\",\n        \"type\": \"gauge\",\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 0, \"y\": 8 },\n        \"targets\": [\n          {\n            \"expr\": \"avg(mcp_mesh_cache_hit_rate)\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"orientation\": \"auto\",\n          \"showThresholdLabels\": true,\n          \"showThresholdMarkers\": true\n        },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"min\": 0,\n            \"max\": 100,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 60 },\n                { \"color\": \"green\", \"value\": 80 }\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"SLO Compliance\",\n        \"type\": \"stat\",\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 8, \"y\": 8 },\n        \"targets\": [\n          {\n            \"expr\": \"avg(mcp_mesh:slo:availability) * 100\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"colorMode\": \"background\",\n          \"graphMode\": \"none\",\n          \"orientation\": \"horizontal\"\n        },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"decimals\": 3,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 99 },\n                { \"color\": \"green\", \"value\": 99.9 }\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"Cost per Transaction\",\n        \"type\": \"timeseries\",\n        \"gridPos\": { \"h\": 8, \"w\": 8, \"x\": 16, \"y\": 8 },\n        \"targets\": [\n          {\n            \"expr\": \"(sum(rate(container_cpu_usage_seconds_total{namespace=\\\"mcp-mesh\\\"}[$interval])) * 0.05 + sum(container_memory_working_set_bytes{namespace=\\\"mcp-mesh\\\"}) / 1024 / 1024 / 1024 * 0.01) / sum(rate(mcp_mesh_requests_total[$interval]))\",\n            \"legendFormat\": \"Cost per transaction\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"currencyUSD\",\n            \"decimals\": 6,\n            \"custom\": {\n              \"drawStyle\": \"line\",\n              \"lineWidth\": 2,\n              \"fillOpacity\": 20,\n              \"gradientMode\": \"opacity\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#step-5-implement-dynamic-dashboards","title":"Step 5: Implement Dynamic Dashboards","text":"<p>Create dashboards with advanced features:</p> <pre><code># dashboard-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-dashboards-dynamic\n  namespace: monitoring\ndata:\n  dynamic-dashboard.json: |\n    {\n      \"dashboard\": {\n        \"title\": \"MCP Mesh Dynamic Analysis\",\n        \"templating\": {\n          \"list\": [\n            {\n              \"name\": \"datasource\",\n              \"type\": \"datasource\",\n              \"query\": \"prometheus\",\n              \"current\": {\n                \"text\": \"Prometheus\",\n                \"value\": \"Prometheus\"\n              }\n            },\n            {\n              \"name\": \"agent_regex\",\n              \"type\": \"textbox\",\n              \"current\": {\n                \"text\": \".*\",\n                \"value\": \".*\"\n              },\n              \"label\": \"Agent Filter (regex)\"\n            },\n            {\n              \"name\": \"percentile\",\n              \"type\": \"custom\",\n              \"current\": {\n                \"text\": \"0.95\",\n                \"value\": \"0.95\"\n              },\n              \"options\": [\n                {\"text\": \"p50\", \"value\": \"0.5\"},\n                {\"text\": \"p90\", \"value\": \"0.9\"},\n                {\"text\": \"p95\", \"value\": \"0.95\"},\n                {\"text\": \"p99\", \"value\": \"0.99\"}\n              ]\n            }\n          ]\n        },\n\n        \"annotations\": {\n          \"list\": [\n            {\n              \"datasource\": \"Prometheus\",\n              \"enable\": true,\n              \"expr\": \"changes(mcp_mesh_agent{agent=~\\\"$agent_regex\\\"}[5m]) &gt; 0\",\n              \"iconColor\": \"rgba(0, 211, 255, 1)\",\n              \"name\": \"Agent Restarts\",\n              \"tagKeys\": \"agent,version\"\n            },\n            {\n              \"datasource\": \"Prometheus\",\n              \"enable\": true,\n              \"expr\": \"ALERTS{alertstate=\\\"firing\\\",namespace=\\\"mcp-mesh\\\"}\",\n              \"iconColor\": \"rgba(255, 96, 96, 1)\",\n              \"name\": \"Active Alerts\",\n              \"tagKeys\": \"alertname,severity\"\n            }\n          ]\n        },\n\n        \"links\": [\n          {\n            \"title\": \"Drill Down\",\n            \"type\": \"dashboards\",\n            \"tags\": [\"mcp-mesh\", \"agent\"],\n            \"includeVars\": true,\n            \"keepTime\": true\n          },\n          {\n            \"title\": \"View in Jaeger\",\n            \"type\": \"link\",\n            \"url\": \"http://jaeger:16686/search?service=${agent}&amp;start=${__from}&amp;end=${__to}\",\n            \"targetBlank\": true\n          }\n        ],\n\n        \"panels\": [\n          {\n            \"title\": \"Dynamic Latency Analysis\",\n            \"type\": \"graph\",\n            \"gridPos\": {\"h\": 10, \"w\": 24, \"x\": 0, \"y\": 0},\n            \"targets\": [\n              {\n                \"expr\": \"histogram_quantile($percentile, sum by (agent, le) (rate(mcp_mesh_request_duration_seconds_bucket{agent=~\\\"$agent_regex\\\"}[$interval])))\",\n                \"legendFormat\": \"{% raw %}{{agent}}{% endraw %} - p${percentile:raw}\",\n                \"refId\": \"A\"\n              }\n            ],\n            \"options\": {\n              \"dataLinks\": [\n                {\n                  \"title\": \"View traces\",\n                  \"url\": \"/explore?left={\\\"datasource\\\":\\\"Tempo\\\",\\\"queries\\\":[{\\\"query\\\":\\\"agent=${__series.labels.agent}\\\"}],\\\"range\\\":{\\\"from\\\":\\\"${__value.time}\\\",\\\"to\\\":\\\"${__value.time}\\\"}}\"\n                }\n              ]\n            }\n          },\n\n          {\n            \"title\": \"Adaptive Thresholds\",\n            \"type\": \"timeseries\",\n            \"gridPos\": {\"h\": 10, \"w\": 24, \"x\": 0, \"y\": 10},\n            \"targets\": [\n              {\n                \"expr\": \"mcp_mesh:request_rate{agent=~\\\"$agent_regex\\\"}\",\n                \"legendFormat\": \"{% raw %}{{agent}}{% endraw %} - actual\",\n                \"refId\": \"A\"\n              },\n              {\n                \"expr\": \"predict_linear(mcp_mesh:request_rate{agent=~\\\"$agent_regex\\\"}[1h], 3600)\",\n                \"legendFormat\": \"{% raw %}{{agent}}{% endraw %} - predicted\",\n                \"refId\": \"B\"\n              },\n              {\n                \"expr\": \"mcp_mesh:request_rate{agent=~\\\"$agent_regex\\\"} + 2 * stddev_over_time(mcp_mesh:request_rate{agent=~\\\"$agent_regex\\\"}[1h])\",\n                \"legendFormat\": \"{% raw %}{{agent}}{% endraw %} - upper bound\",\n                \"refId\": \"C\"\n              }\n            ],\n            \"fieldConfig\": {\n              \"overrides\": [\n                {\n                  \"matcher\": {\"id\": \"byRegexp\", \"options\": \".*predicted.*\"},\n                  \"properties\": [\n                    {\n                      \"id\": \"custom.lineStyle\",\n                      \"value\": {\"fill\": \"dash\", \"dash\": [10, 10]}\n                    }\n                  ]\n                },\n                {\n                  \"matcher\": {\"id\": \"byRegexp\", \"options\": \".*upper bound.*\"},\n                  \"properties\": [\n                    {\n                      \"id\": \"custom.lineStyle\",\n                      \"value\": {\"fill\": \"dot\", \"dash\": [2, 5]}\n                    },\n                    {\n                      \"id\": \"color\",\n                      \"value\": {\"mode\": \"fixed\", \"fixedColor\": \"red\"}\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#step-6-set-up-dashboard-provisioning","title":"Step 6: Set Up Dashboard Provisioning","text":"<p>Automate dashboard deployment:</p> <pre><code># dashboard-provisioning.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-dashboard-provider\n  namespace: monitoring\ndata:\n  dashboards.yaml: |\n    apiVersion: 1\n    providers:\n    - name: 'MCP Mesh Dashboards'\n      orgId: 1\n      folder: 'MCP Mesh'\n      type: file\n      disableDeletion: false\n      updateIntervalSeconds: 10\n      allowUiUpdates: true\n      options:\n        path: /var/lib/grafana/dashboards/mcp-mesh\n\n    - name: 'MCP Mesh Generated'\n      orgId: 1\n      folder: 'MCP Mesh - Auto'\n      type: file\n      disableDeletion: true\n      updateIntervalSeconds: 30\n      options:\n        path: /var/lib/grafana/dashboards/generated\n\n---\n# Script to generate dashboards dynamically\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: dashboard-generator\n  namespace: monitoring\ndata:\n  generate.py: |\n    #!/usr/bin/env python3\n    import json\n    import os\n    from prometheus_api_client import PrometheusConnect\n\n    # Connect to Prometheus\n    prom = PrometheusConnect(url=\"http://prometheus-operated:9090\")\n\n    # Get all agents\n    agents = prom.custom_query('group by (agent) (mcp_mesh_requests_total)')\n\n    # Generate dashboard for each agent\n    for agent_data in agents:\n        agent = agent_data['metric']['agent']\n\n        dashboard = {\n            \"dashboard\": {\n                \"title\": f\"MCP Mesh - {agent}\",\n                \"uid\": f\"mcp-mesh-auto-{agent}\",\n                \"tags\": [\"mcp-mesh\", \"auto-generated\", agent],\n                \"panels\": generate_panels_for_agent(agent)\n            }\n        }\n\n        # Save dashboard\n        with open(f'/var/lib/grafana/dashboards/generated/{agent}.json', 'w') as f:\n            json.dump(dashboard, f, indent=2)\n\n    def generate_panels_for_agent(agent):\n        return [\n            {\n                \"title\": f\"{agent} - Request Rate\",\n                \"type\": \"graph\",\n                \"targets\": [\n                    {\n                        \"expr\": f'rate(mcp_mesh_requests_total{% raw %}{{agent=\"{agent}\"}}{% endraw %}[5m])',\n                        \"refId\": \"A\"\n                    }\n                ]\n            }\n            # Add more panels...\n        ]\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#configuration-options","title":"Configuration Options","text":"Feature Configuration Purpose Variables <code>templating.list</code> Dynamic filtering Annotations <code>annotations.list</code> Event markers Links <code>links</code> Navigation between dashboards Alerts <code>alert</code> Visual alert rules Transforms <code>transformations</code> Data manipulation"},{"location":"07-observability/02-grafana-dashboards/#examples","title":"Examples","text":""},{"location":"07-observability/02-grafana-dashboards/#example-1-multi-cluster-dashboard","title":"Example 1: Multi-Cluster Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh Multi-Cluster View\",\n    \"panels\": [\n      {\n        \"title\": \"Cluster Comparison\",\n        \"type\": \"table\",\n        \"gridPos\": { \"h\": 10, \"w\": 24, \"x\": 0, \"y\": 0 },\n        \"targets\": [\n          {\n            \"expr\": \"sum by (cluster, agent) (rate(mcp_mesh_requests_total[5m]))\",\n            \"format\": \"table\",\n            \"instant\": true,\n            \"refId\": \"A\"\n          }\n        ],\n        \"transformations\": [\n          {\n            \"id\": \"pivot\",\n            \"options\": {\n              \"pivotField\": \"cluster\",\n              \"valueField\": \"Value\",\n              \"groupByField\": \"agent\"\n            }\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"custom\": {\n              \"displayMode\": \"color-background\",\n              \"colorMode\": \"value\"\n            },\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"green\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 10 },\n                { \"color\": \"red\", \"value\": 50 }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#example-2-slo-dashboard","title":"Example 2: SLO Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh SLO Tracking\",\n    \"panels\": [\n      {\n        \"title\": \"Error Budget Remaining\",\n        \"type\": \"gauge\",\n        \"targets\": [\n          {\n            \"expr\": \"(1 - ((1 - avg(mcp_mesh:slo:availability)) / (1 - 0.999))) * 100\",\n            \"refId\": \"A\"\n          }\n        ],\n        \"options\": {\n          \"showThresholdLabels\": true,\n          \"showThresholdMarkers\": true,\n          \"text\": {\n            \"titleSize\": 24,\n            \"valueSize\": 48\n          }\n        },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"min\": 0,\n            \"max\": 100,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                { \"color\": \"red\", \"value\": 0 },\n                { \"color\": \"yellow\", \"value\": 25 },\n                { \"color\": \"green\", \"value\": 50 }\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"SLO Burn Rate\",\n        \"type\": \"timeseries\",\n        \"targets\": [\n          {\n            \"expr\": \"1 - mcp_mesh:slo:availability\",\n            \"legendFormat\": \"Current burn rate\",\n            \"refId\": \"A\"\n          },\n          {\n            \"expr\": \"0.001\",\n            \"legendFormat\": \"SLO threshold (99.9%)\",\n            \"refId\": \"B\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#best-practices","title":"Best Practices","text":"<ol> <li>Organize Dashboards: Use folders and tags</li> <li>Use Variables: Enable dynamic filtering</li> <li>Add Documentation: Include panel descriptions</li> <li>Set Refresh Rates: Balance freshness vs load</li> <li>Export/Import: Version control dashboards</li> </ol>"},{"location":"07-observability/02-grafana-dashboards/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"07-observability/02-grafana-dashboards/#pitfall-1-overwhelming-dashboards","title":"Pitfall 1: Overwhelming Dashboards","text":"<p>Problem: Too many panels, hard to understand</p> <p>Solution: Create focused dashboards:</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh - Quick Health\",\n    \"description\": \"High-level health indicators only\",\n    \"panels\": [\n      // Limit to 6-8 key metrics\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#pitfall-2-slow-queries","title":"Pitfall 2: Slow Queries","text":"<p>Problem: Dashboard takes forever to load</p> <p>Solution: Use recording rules:</p> <pre><code># Instead of complex query in dashboard\nhistogram_quantile(0.95,\n  sum by (le) (\n    rate(mcp_mesh_request_duration_seconds_bucket[5m])\n  )\n)\n\n# Use pre-computed recording rule\nmcp_mesh:request_duration:p95\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#testing","title":"Testing","text":""},{"location":"07-observability/02-grafana-dashboards/#validate-dashboard-json","title":"Validate Dashboard JSON","text":"<pre><code># test_dashboards.py\nimport json\nimport glob\n\ndef test_dashboard_validity():\n    \"\"\"Validate all dashboard JSON files\"\"\"\n    for dashboard_file in glob.glob(\"dashboards/*.json\"):\n        with open(dashboard_file) as f:\n            dashboard = json.load(f)\n\n        # Check required fields\n        assert \"dashboard\" in dashboard\n        assert \"title\" in dashboard[\"dashboard\"]\n        assert \"panels\" in dashboard[\"dashboard\"]\n\n        # Check panels\n        for panel in dashboard[\"dashboard\"][\"panels\"]:\n            assert \"type\" in panel\n            assert \"gridPos\" in panel\n            assert \"targets\" in panel\n\ndef test_dashboard_queries():\n    \"\"\"Validate Prometheus queries in dashboards\"\"\"\n    from prometheus_api_client import PrometheusConnect\n\n    prom = PrometheusConnect(url=\"http://localhost:9090\")\n\n    for dashboard_file in glob.glob(\"dashboards/*.json\"):\n        with open(dashboard_file) as f:\n            dashboard = json.load(f)\n\n        for panel in dashboard[\"dashboard\"][\"panels\"]:\n            for target in panel.get(\"targets\", []):\n                if \"expr\" in target:\n                    # Test query syntax\n                    try:\n                        prom.custom_query(target[\"expr\"])\n                    except Exception as e:\n                        raise AssertionError(\n                            f\"Invalid query in {dashboard_file}: {target['expr']}\"\n                        ) from e\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#performance-testing","title":"Performance Testing","text":"<pre><code>#!/bin/bash\n# test-dashboard-performance.sh\n\nGRAFANA_URL=\"http://localhost:3000\"\nDASHBOARD_UID=\"mcp-mesh-overview\"\n\n# Measure dashboard load time\ntime curl -s -o /dev/null \\\n  -H \"Authorization: Bearer $GRAFANA_API_KEY\" \\\n  \"$GRAFANA_URL/api/dashboards/uid/$DASHBOARD_UID\"\n\n# Check panel query performance\ncurl -s \\\n  -H \"Authorization: Bearer $GRAFANA_API_KEY\" \\\n  \"$GRAFANA_URL/api/dashboards/uid/$DASHBOARD_UID\" | \\\n  jq -r '.dashboard.panels[].targets[].expr' | \\\n  while read -r query; do\n    echo \"Testing query: $query\"\n    time curl -s -o /dev/null --data-urlencode \"query=$query\" \\\n      \"http://prometheus:9090/api/v1/query\"\n  done\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"07-observability/02-grafana-dashboards/#monitor-grafana-performance","title":"Monitor Grafana Performance","text":"<pre><code># grafana-monitoring.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-monitoring-dashboard\n  namespace: monitoring\ndata:\n  grafana-performance.json: |\n    {\n      \"dashboard\": {\n        \"title\": \"Grafana Performance\",\n        \"panels\": [\n          {\n            \"title\": \"Dashboard Load Time\",\n            \"type\": \"graph\",\n            \"targets\": [\n              {\n                \"expr\": \"histogram_quantile(0.95, grafana_api_dashboard_get_milliseconds_bucket)\",\n                \"legendFormat\": \"p95 load time\"\n              }\n            ]\n          },\n          {\n            \"title\": \"Active Users\",\n            \"type\": \"stat\",\n            \"targets\": [\n              {\n                \"expr\": \"grafana_stat_active_users\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#debug-dashboard-issues","title":"Debug Dashboard Issues","text":"<pre><code># Enable debug logging\nkubectl set env deployment/prometheus-grafana -n monitoring \\\n  GF_LOG_LEVEL=debug\n\n# View Grafana logs\nkubectl logs -n monitoring deployment/prometheus-grafana -f\n\n# Check dashboard provisioning\nkubectl exec -n monitoring deployment/prometheus-grafana -- \\\n  ls -la /var/lib/grafana/dashboards/\n\n# Test data source connection\nkubectl exec -n monitoring deployment/prometheus-grafana -- \\\n  curl -s http://prometheus-operated:9090/api/v1/query?query=up\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"07-observability/02-grafana-dashboards/#issue-1-dashboard-not-loading","title":"Issue 1: Dashboard Not Loading","text":"<p>Symptoms: Dashboard shows \"No Data\" or loading spinner</p> <p>Cause: Data source misconfiguration or query errors</p> <p>Solution:</p> <pre><code># Check data source configuration\ncurl -s -H \"Authorization: Bearer $API_KEY\" \\\n  http://localhost:3000/api/datasources\n\n# Test query directly in Prometheus\ncurl -G http://localhost:9090/api/v1/query \\\n  --data-urlencode 'query=mcp_mesh_requests_total'\n\n# Check time range\n# Ensure data exists for selected time range\n</code></pre>"},{"location":"07-observability/02-grafana-dashboards/#issue-2-variables-not-working","title":"Issue 2: Variables Not Working","text":"<p>Symptoms: Template variables show \"None\" or don't filter</p> <p>Cause: Incorrect query or label values</p> <p>Solution:</p> <pre><code>{\n  \"templating\": {\n    \"list\": [\n      {\n        \"name\": \"agent\",\n        \"type\": \"query\",\n        \"datasource\": \"Prometheus\",\n        \"query\": \"label_values(up{job=~\\\"mcp-mesh.*\\\"}, instance)\",\n        \"refresh\": 2, // on time range change\n        \"sort\": 1 // alphabetical\n      }\n    ]\n  }\n}\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"07-observability/02-grafana-dashboards/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Panel Limit: Performance degrades with &gt;50 panels</li> <li>Query Timeout: Default 30s timeout for queries</li> <li>Variable Cardinality: High cardinality slows dropdown</li> <li>Annotation Limit: Too many annotations impact performance</li> </ul>"},{"location":"07-observability/02-grafana-dashboards/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add dashboard templating with Jsonnet</li> <li> Create mobile-responsive dashboards</li> <li> Implement dashboard versioning</li> <li> Add automated screenshot testing</li> <li> Create dashboard marketplace</li> </ul>"},{"location":"07-observability/02-grafana-dashboards/#summary","title":"Summary","text":"<p>You now have comprehensive Grafana dashboards for MCP Mesh:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Multi-level dashboards from overview to details</li> <li>\ud83d\udd11 Dynamic filtering with variables</li> <li>\ud83d\udd11 Performance optimization techniques</li> <li>\ud83d\udd11 Automated provisioning and generation</li> </ul>"},{"location":"07-observability/02-grafana-dashboards/#next-steps","title":"Next Steps","text":"<p>Let's add distributed tracing to correlate with metrics.</p> <p>Continue to Distributed Tracing \u2192</p> <p>\ud83d\udca1 Tip: Use Grafana's built-in explore mode to test queries before adding to dashboards</p> <p>\ud83d\udcda Reference: Grafana Best Practices</p> <p>\ud83e\uddea Try It: Create a custom dashboard for your specific use case using the examples as templates</p>"},{"location":"07-observability/03-distributed-tracing/","title":"Distributed Tracing","text":"<p>Real-time trace correlation and analysis for MCP Mesh using Redis Streams</p>"},{"location":"07-observability/03-distributed-tracing/#overview","title":"Overview","text":"<p>MCP Mesh implements a high-performance distributed tracing system built on Redis Streams that provides end-to-end visibility into request flows across multiple agents. Unlike traditional OpenTelemetry setups, this system is specifically designed for MCP's JSON-RPC protocol with automatic context propagation and real-time correlation.</p>"},{"location":"07-observability/03-distributed-tracing/#architecture-components","title":"Architecture Components","text":""},{"location":"07-observability/03-distributed-tracing/#1-python-agent-tracing-publishers","title":"1. Python Agent Tracing (Publishers)","text":"<p>Python agents automatically publish trace events to Redis Streams when decorated with <code>@mesh.tool()</code>:</p> <pre><code>@app.tool()\n@mesh.tool(depends_on=[\"data-processor\"])\nasync def generate_report(title: str) -&gt; str:\n    # Automatic trace context creation and propagation\n    # publishes span_start -&gt; calls dependency -&gt; publishes span_end\n    processor = await mesh.get_agent(\"data-processor\")\n    return await processor.process_data({\"title\": title})\n</code></pre> <p>Event Types Published: - <code>span_start</code>: Operation begins - <code>span_end</code>: Operation completes successfully - <code>error</code>: Operation fails with error details</p>"},{"location":"07-observability/03-distributed-tracing/#2-redis-streams-transport-layer","title":"2. Redis Streams (Transport Layer)","text":"<p>Stream Name: <code>mcp-mesh:traces</code> Consumer Group: <code>mcp-mesh-registry-processors</code></p> <p>Events are published asynchronously without blocking agent operations:</p> <pre><code># View recent trace events\nredis-cli XREVRANGE mcp-mesh:traces + - COUNT 10\n\n# Monitor stream length\nredis-cli XLEN mcp-mesh:traces\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#3-go-registry-consumer-correlator","title":"3. Go Registry (Consumer &amp; Correlator)","text":"<p>The registry consumes events and correlates them into complete traces:</p> <ul> <li>Consumer: Reads from Redis Streams with automatic failover</li> <li>Correlator: Builds complete traces from individual span events</li> <li>Exporters: Output traces in multiple formats (console, JSON, stats)</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#configuration","title":"Configuration","text":""},{"location":"07-observability/03-distributed-tracing/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>MCP_MESH_DISTRIBUTED_TRACING_ENABLED</code> <code>false</code> Enable tracing system <code>TRACE_EXPORTER_TYPE</code> <code>console</code> Export format <code>TRACE_PRETTY_OUTPUT</code> <code>true</code> Pretty console output <code>TRACE_ENABLE_STATS</code> <code>true</code> Collect statistics <code>TRACE_JSON_OUTPUT_DIR</code> <code>/tmp</code> JSON export directory <code>TRACE_BATCH_SIZE</code> <code>100</code> Consumer batch size <code>TRACE_TIMEOUT</code> <code>5m</code> Trace completion timeout"},{"location":"07-observability/03-distributed-tracing/#enable-tracing","title":"Enable Tracing","text":"<pre><code># Enable in registry\nexport MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true\nexport TRACE_EXPORTER_TYPE=console\nexport TRACE_PRETTY_OUTPUT=true\n\nmeshctl start --registry-only\n</code></pre> <p>Python agents automatically detect when tracing is enabled and begin publishing events.</p>"},{"location":"07-observability/03-distributed-tracing/#trace-data-model","title":"Trace Data Model","text":""},{"location":"07-observability/03-distributed-tracing/#traceevent-structure","title":"TraceEvent Structure","text":"<pre><code>{\n  \"trace_id\": \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\",\n  \"span_id\": \"x1y2z3w4-a5b6-c789-def0-123456789abc\", \n  \"parent_span\": \"parent-span-id-if-exists\",\n  \"agent_name\": \"weather-service\",\n  \"agent_id\": \"weather-123\",\n  \"ip_address\": \"192.168.1.100\",\n  \"event_type\": \"span_start|span_end|error\",\n  \"operation\": \"tool:get_weather\",\n  \"timestamp\": 1640995200.123,\n  \"duration_ms\": 150,\n  \"success\": true,\n  \"error_message\": null,\n  \"capability\": \"get_weather\",\n  \"target_agent\": \"data-processor\",\n  \"runtime\": \"python-3.11\"\n}\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#completedtrace-structure","title":"CompletedTrace Structure","text":"<pre><code>{\n  \"trace_id\": \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\",\n  \"spans\": [\n    {\n      \"span_id\": \"x1y2z3w4-a5b6-c789-def0-123456789abc\",\n      \"agent_name\": \"weather-service\", \n      \"operation\": \"tool:get_weather\",\n      \"start_time\": \"2024-01-01T10:00:00Z\",\n      \"end_time\": \"2024-01-01T10:00:00.150Z\",\n      \"duration_ms\": 150,\n      \"success\": true\n    }\n  ],\n  \"start_time\": \"2024-01-01T10:00:00Z\",\n  \"end_time\": \"2024-01-01T10:00:00.300Z\", \n  \"duration\": \"300ms\",\n  \"success\": true,\n  \"span_count\": 3,\n  \"agent_count\": 2,\n  \"agents\": [\"weather-service\", \"data-processor\"]\n}\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#trace-correlation-logic","title":"Trace Correlation Logic","text":""},{"location":"07-observability/03-distributed-tracing/#1-event-collection","title":"1. Event Collection","text":"<p>Events are correlated by <code>trace_id</code> and individual spans by <code>span_id</code>:</p> <pre><code>span_start[trace_id=ABC, span_id=123] + span_end[trace_id=ABC, span_id=123] = Complete Span\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#2-completion-detection","title":"2. Completion Detection","text":"<p>Traces are considered complete when: - All spans have both start and end events - No new events for 5 seconds - Contains at least one span</p>"},{"location":"07-observability/03-distributed-tracing/#3-export-triggers","title":"3. Export Triggers","text":"<p>Traces are exported when: - Immediately: When completion is detected during event processing - Cleanup: Every minute, completed traces are found and exported - Expiry: After 5 minutes of inactivity (incomplete traces)</p>"},{"location":"07-observability/03-distributed-tracing/#export-formats","title":"Export Formats","text":""},{"location":"07-observability/03-distributed-tracing/#console-exporter","title":"Console Exporter","text":"<p>Real-time trace visualization in terminal:</p> <pre><code>export TRACE_EXPORTER_TYPE=console\nexport TRACE_PRETTY_OUTPUT=true\n</code></pre> <p>Output Example: <pre><code>\ud83d\udd17 TRACE a1b2c3d4 (285ms) - SUCCESS (3 spans across 2 agents)\n  \ud83d\udccd Agent: weather-service\n    \u2705 tool:get_weather [get_weather] (150ms)\n  \ud83d\udccd Agent: data-processor  \n    \u2705 tool:process_data [process_data] (100ms)\n    \u2705 tool:validate_result [validate_result] (35ms)\n</code></pre></p>"},{"location":"07-observability/03-distributed-tracing/#json-exporter","title":"JSON Exporter","text":"<p>Structured export for external systems:</p> <pre><code>export TRACE_EXPORTER_TYPE=json\nexport TRACE_JSON_OUTPUT_DIR=/var/log/traces\n</code></pre> <p>Output Files: - <code>/var/log/traces/trace-{trace_id}.json</code> - One file per completed trace</p>"},{"location":"07-observability/03-distributed-tracing/#statistics-exporter","title":"Statistics Exporter","text":"<p>Aggregate metrics collection:</p> <pre><code>export TRACE_EXPORTER_TYPE=multi  # Enables all exporters\nexport TRACE_ENABLE_STATS=true\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#query-api","title":"Query API","text":""},{"location":"07-observability/03-distributed-tracing/#trace-status","title":"Trace Status","text":"<pre><code>GET /trace/status\n</code></pre> <p>Returns tracing configuration and runtime statistics:</p> <pre><code>{\n  \"enabled\": true,\n  \"consumer\": {\n    \"stream_name\": \"mcp-mesh:traces\",\n    \"consumer_group\": \"mcp-mesh-registry-processors\",\n    \"status\": \"running\"\n  },\n  \"correlator\": {\n    \"active_traces\": 5,\n    \"total_spans\": 12,\n    \"oldest_trace_age\": \"45s\"\n  },\n  \"exporter\": {\n    \"type\": \"console\",\n    \"exported_traces\": 147\n  }\n}\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#list-recent-traces","title":"List Recent Traces","text":"<pre><code>GET /trace/list?limit=20&amp;offset=0\n</code></pre> <p>Returns paginated list of completed traces, newest first.</p>"},{"location":"07-observability/03-distributed-tracing/#get-specific-trace","title":"Get Specific Trace","text":"<pre><code>GET /trace/{trace_id}\n</code></pre> <p>Retrieve complete trace details by ID.</p>"},{"location":"07-observability/03-distributed-tracing/#search-traces","title":"Search Traces","text":"<pre><code>GET /trace/search?agent_name=weather&amp;success=true&amp;min_duration_ms=100\n</code></pre> <p>Search Parameters:</p> Parameter Type Description <code>parent_span_id</code> string Filter by parent span <code>agent_name</code> string Filter by agent name <code>operation</code> string Filter by operation (partial match) <code>success</code> boolean Filter by success status <code>start_time</code> RFC3339 Filter by start time (after) <code>end_time</code> RFC3339 Filter by end time (before) <code>min_duration_ms</code> integer Minimum duration filter <code>max_duration_ms</code> integer Maximum duration filter <code>limit</code> integer Result limit (max 100)"},{"location":"07-observability/03-distributed-tracing/#trace-statistics","title":"Trace Statistics","text":"<pre><code>GET /trace/stats\n</code></pre> <p>Returns aggregate statistics:</p> <pre><code>{\n  \"total_traces\": 1250,\n  \"success_traces\": 1189,\n  \"failed_traces\": 61,\n  \"success_rate\": 95.12,\n  \"avg_duration_ms\": 234.5,\n  \"avg_spans_per_trace\": 2.8,\n  \"agents_involved\": [\"weather\", \"data-processor\", \"report-gen\"],\n  \"top_operations\": [\n    {\"operation\": \"tool:get_weather\", \"count\": 456},\n    {\"operation\": \"tool:process_data\", \"count\": 389}\n  ]\n}\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#performance-analysis-examples","title":"Performance Analysis Examples","text":""},{"location":"07-observability/03-distributed-tracing/#find-slow-operations","title":"Find Slow Operations","text":"<pre><code># Operations taking longer than 1 second\ncurl \"http://localhost:8000/trace/search?min_duration_ms=1000&amp;limit=10\" | jq '.traces[] | {trace_id, duration, agents}'\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#debug-failed-operations","title":"Debug Failed Operations","text":"<pre><code># Get recent failures with details\ncurl \"http://localhost:8000/trace/search?success=false&amp;limit=5\" | jq '.traces[] | {trace_id, agents, spans: [.spans[] | select(.success == false)]}'\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#agent-performance-analysis","title":"Agent Performance Analysis","text":"<pre><code># Analyze specific agent performance\ncurl \"http://localhost:8000/trace/search?agent_name=weather-service&amp;limit=50\" | jq '[.traces[].duration] | add / length'\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#time-based-analysis","title":"Time-based Analysis","text":"<pre><code># Get traces from last hour\nHOUR_AGO=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)\ncurl \"http://localhost:8000/trace/search?start_time=$HOUR_AGO&amp;limit=100\" | jq '.traces | length'\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#advanced-features","title":"Advanced Features","text":""},{"location":"07-observability/03-distributed-tracing/#context-propagation","title":"Context Propagation","text":"<p>Trace context automatically flows between agents:</p> <pre><code># Parent agent\n@mesh.tool(depends_on=[\"child-agent\"])  \nasync def parent_operation():\n    # trace_id and span_id automatically propagated\n    child = await mesh.get_agent(\"child-agent\")\n    return await child.child_operation()\n\n# Child agent  \n@mesh.tool()\nasync def child_operation():\n    # Inherits trace context from parent\n    # New span created with parent span ID\n    pass\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#error-correlation","title":"Error Correlation","text":"<p>Failed operations are automatically correlated:</p> <pre><code>@mesh.tool()\nasync def failing_operation():\n    try:\n        # operation logic\n        pass\n    except Exception as e:\n        # Error event automatically published with trace context\n        raise  # Re-raise to maintain error handling\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#multi-agent-traces","title":"Multi-Agent Traces","text":"<p>Complex workflows spanning multiple agents are automatically traced:</p> <pre><code>User Request \u2192 Agent A \u2192 Agent B \u2192 Agent C\n      \u2193            \u2193         \u2193         \u2193\n   trace_id    same_id   same_id   same_id\n   span_1      span_2    span_3    span_4\n              parent=1  parent=2  parent=3\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#storage-and-retention","title":"Storage and Retention","text":""},{"location":"07-observability/03-distributed-tracing/#in-memory-storage","title":"In-Memory Storage","text":"<ul> <li>Active Traces: Stored until completion or 5-minute timeout</li> <li>Completed Traces: Last 1000 traces kept for querying</li> <li>Automatic Cleanup: Oldest 20% removed when limit exceeded</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#redis-stream-retention","title":"Redis Stream Retention","text":"<pre><code># Configure Redis stream retention\nredis-cli CONFIG SET stream-node-max-bytes 4096\nredis-cli CONFIG SET stream-node-max-entries 100\n\n# Manual stream cleanup (if needed)\nredis-cli XTRIM mcp-mesh:traces MAXLEN ~ 10000\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"07-observability/03-distributed-tracing/#no-traces-appearing","title":"No Traces Appearing","text":"<p>Check tracing status: <pre><code>curl http://localhost:8000/trace/status | jq .enabled\n</code></pre></p> <p>Verify Redis stream: <pre><code>redis-cli XLEN mcp-mesh:traces\nredis-cli XINFO GROUPS mcp-mesh:traces\n</code></pre></p> <p>Check agent connectivity: <pre><code># Python agents should log tracing status on startup\n# Look for: \"Tracing enabled, publishing to redis://...\"\n</code></pre></p>"},{"location":"07-observability/03-distributed-tracing/#incomplete-traces","title":"Incomplete Traces","text":"<p>Check for orphaned events: <pre><code>redis-cli XREVRANGE mcp-mesh:traces + - COUNT 20\n</code></pre></p> <p>Monitor correlator status: <pre><code>curl http://localhost:8000/trace/status | jq .correlator\n</code></pre></p>"},{"location":"07-observability/03-distributed-tracing/#performance-issues","title":"Performance Issues","text":"<p>Monitor consumer lag: <pre><code>redis-cli XINFO GROUPS mcp-mesh:traces\n# Look for \"lag\" field in consumer info\n</code></pre></p> <p>Check memory usage: <pre><code>curl http://localhost:8000/trace/stats | jq .\n# Monitor active_traces count\n</code></pre></p>"},{"location":"07-observability/03-distributed-tracing/#integration-examples","title":"Integration Examples","text":""},{"location":"07-observability/03-distributed-tracing/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code>#!/bin/bash\n# Export trace metrics to Prometheus\n\nSTATS=$(curl -s http://localhost:8000/trace/stats)\nSUCCESS_RATE=$(echo $STATS | jq .success_rate)\nAVG_DURATION=$(echo $STATS | jq .avg_duration_ms)\n\necho \"mcp_mesh_trace_success_rate $SUCCESS_RATE\" | curl -X POST --data-binary @- http://pushgateway:9091/metrics/job/mcp-mesh\necho \"mcp_mesh_trace_avg_duration_ms $AVG_DURATION\" | curl -X POST --data-binary @- http://pushgateway:9091/metrics/job/mcp-mesh\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#external-apm-integration","title":"External APM Integration","text":"<pre><code>#!/bin/bash\n# Send traces to external APM (e.g., Datadog, New Relic)\n\ncurl -s \"http://localhost:8000/trace/list?limit=100\" | \\\n  jq -c '.traces[]' | \\\n  while read trace; do\n    curl -X POST \"https://api.datadoghq.com/api/v1/traces\" \\\n      -H \"DD-API-KEY: $DD_API_KEY\" \\\n      -H \"Content-Type: application/json\" \\\n      -d \"$trace\"\n  done\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#log-correlation","title":"Log Correlation","text":"<pre><code>#!/bin/bash\n# Correlate traces with application logs\n\n# Extract trace IDs and search logs\ncurl -s \"http://localhost:8000/trace/search?success=false&amp;limit=10\" | \\\n  jq -r '.traces[].trace_id' | \\\n  while read trace_id; do\n    echo \"=== Logs for trace $trace_id ===\"\n    grep \"$trace_id\" /var/log/mcp-mesh/*.log\n  done\n</code></pre>"},{"location":"07-observability/03-distributed-tracing/#best-practices","title":"Best Practices","text":""},{"location":"07-observability/03-distributed-tracing/#1-monitoring","title":"1. Monitoring","text":"<ul> <li>Set up alerts on trace export failures</li> <li>Monitor trace completion rates  </li> <li>Track trace duration trends</li> <li>Alert on error rate spikes</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#2-performance","title":"2. Performance","text":"<ul> <li>Use <code>multi</code> exporter for comprehensive observability</li> <li>Configure appropriate Redis retention policies</li> <li>Monitor correlator memory usage</li> <li>Tune batch sizes for high throughput</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#3-debugging","title":"3. Debugging","text":"<ul> <li>Use search API for targeted investigation</li> <li>Correlate traces with application logs</li> <li>Monitor Redis stream health</li> <li>Check agent trace context propagation</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#4-production-deployment","title":"4. Production Deployment","text":"<ul> <li>Configure JSON export for trace persistence</li> <li>Set up external metrics collection  </li> <li>Implement trace sampling for high-volume systems</li> <li>Monitor registry resource usage</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Throughput: 10,000+ spans/second sustained</li> <li>Latency: &lt;1ms trace event publishing (async)</li> <li>Memory: ~1MB per 1000 completed traces  </li> <li>Storage: Configurable retention in Redis and memory</li> <li>Correlation: Real-time span correlation and export</li> <li>Availability: Registry failure doesn't impact agents</li> </ul>"},{"location":"07-observability/03-distributed-tracing/#next-steps","title":"Next Steps","text":"<p>The distributed tracing system provides comprehensive observability out of the box. Consider extending with:</p> <ol> <li>Custom Exporters: Implement organization-specific backends</li> <li>Trace Sampling: Add intelligent sampling for high-volume scenarios  </li> <li>SLA Monitoring: Extract SLA metrics from trace data</li> <li>Automated Alerting: Set up proactive monitoring based on trace patterns</li> </ol> <p>\ud83d\udca1 Tip: Use the trace search API with time windows to identify performance trends and system bottlenecks</p> <p>\ud83d\udcca Performance: Monitor trace statistics regularly to ensure optimal system performance</p> <p>\ud83d\udd17 Integration: Export traces to your existing observability stack using JSON exporter or custom exporters</p>"},{"location":"07-observability/04-centralized-logging/","title":"Centralized Logging","text":"<p>Aggregate, search, and analyze logs from all MCP Mesh components in one place</p>"},{"location":"07-observability/04-centralized-logging/#overview","title":"Overview","text":"<p>Centralized logging is essential for troubleshooting and monitoring distributed MCP Mesh deployments. This guide covers implementing the ELK stack (Elasticsearch, Logstash/Fluentd, Kibana) for log aggregation, configuring structured logging in agents, creating powerful search queries, and building log-based dashboards. You'll learn to correlate logs with traces and metrics for comprehensive observability.</p> <p>Effective centralized logging enables quick problem resolution, security monitoring, and operational insights across your entire MCP Mesh system.</p>"},{"location":"07-observability/04-centralized-logging/#key-concepts","title":"Key Concepts","text":"<ul> <li>Log Aggregation: Collecting logs from all sources</li> <li>Structured Logging: JSON-formatted logs with metadata</li> <li>Log Parsing: Extracting fields from log messages</li> <li>Index Management: Lifecycle policies for log retention</li> <li>Correlation: Linking logs with traces and metrics</li> </ul>"},{"location":"07-observability/04-centralized-logging/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"07-observability/04-centralized-logging/#step-1-deploy-the-elk-stack","title":"Step 1: Deploy the ELK Stack","text":"<p>Set up Elasticsearch, Logstash/Fluentd, and Kibana:</p> <pre><code># Add Elastic Helm repository\nhelm repo add elastic https://helm.elastic.co\nhelm repo update\n\n# Create namespace\nkubectl create namespace logging\n\n# Deploy Elasticsearch\ncat &gt; elasticsearch-values.yaml &lt;&lt; 'EOF'\nclusterName: \"mcp-mesh-logs\"\nnodeGroup: \"master\"\n\nreplicas: 3\nminimumMasterNodes: 2\n\nresources:\n  requests:\n    cpu: \"1000m\"\n    memory: \"2Gi\"\n  limits:\n    cpu: \"2000m\"\n    memory: \"4Gi\"\n\nvolumeClaimTemplate:\n  accessModes: [\"ReadWriteOnce\"]\n  resources:\n    requests:\n      storage: 100Gi\n  storageClassName: fast-ssd\n\nesConfig:\n  elasticsearch.yml: |\n    cluster.name: \"mcp-mesh-logs\"\n    network.host: 0.0.0.0\n    discovery.seed_hosts: [\"elasticsearch-master-0\", \"elasticsearch-master-1\", \"elasticsearch-master-2\"]\n    cluster.initial_master_nodes: [\"elasticsearch-master-0\", \"elasticsearch-master-1\", \"elasticsearch-master-2\"]\n    xpack.security.enabled: true\n    xpack.security.transport.ssl.enabled: true\n    xpack.security.transport.ssl.verification_mode: certificate\n    xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12\n    xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12\n    xpack.monitoring.collection.enabled: true\n\nextraEnvs:\n  - name: ELASTIC_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: elastic-credentials\n        key: password\n\npersistence:\n  enabled: true\n  labels:\n    enabled: true\n\nantiAffinity: \"hard\"\n\n# Lifecycle policy for log rotation\nlifecycle:\n  enabled: true\n  policies:\n    mcp_mesh_logs:\n      phases:\n        hot:\n          min_age: \"0ms\"\n          actions:\n            rollover:\n              max_age: \"1d\"\n              max_size: \"50gb\"\n            set_priority:\n              priority: 100\n        warm:\n          min_age: \"2d\"\n          actions:\n            shrink:\n              number_of_shards: 1\n            forcemerge:\n              max_num_segments: 1\n            set_priority:\n              priority: 50\n        cold:\n          min_age: \"7d\"\n          actions:\n            set_priority:\n              priority: 0\n        delete:\n          min_age: \"30d\"\n          actions:\n            delete: {}\nEOF\n\n# Create credentials secret\nkubectl create secret generic elastic-credentials \\\n  --from-literal=password=changeme \\\n  -n logging\n\n# Install Elasticsearch\nhelm install elasticsearch elastic/elasticsearch \\\n  --namespace logging \\\n  --values elasticsearch-values.yaml\n\n# Deploy Kibana\ncat &gt; kibana-values.yaml &lt;&lt; 'EOF'\nelasticsearchHosts: \"http://elasticsearch-master:9200\"\n\nreplicas: 2\n\nresources:\n  requests:\n    cpu: \"500m\"\n    memory: \"1Gi\"\n  limits:\n    cpu: \"1000m\"\n    memory: \"2Gi\"\n\nkibanaConfig:\n  kibana.yml: |\n    server.name: kibana\n    server.host: \"0\"\n    elasticsearch.hosts: [\"http://elasticsearch-master:9200\"]\n    elasticsearch.username: \"elastic\"\n    elasticsearch.password: \"${ELASTIC_PASSWORD}\"\n    xpack.monitoring.ui.container.elasticsearch.enabled: true\n    logging.json: true\n\nextraEnvs:\n  - name: ELASTIC_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: elastic-credentials\n        key: password\n\ningress:\n  enabled: true\n  className: nginx\n  hosts:\n    - host: kibana.mcp-mesh.local\n      paths:\n        - path: /\n          pathType: Prefix\n\nservice:\n  type: ClusterIP\n  port: 5601\nEOF\n\n# Install Kibana\nhelm install kibana elastic/kibana \\\n  --namespace logging \\\n  --values kibana-values.yaml\n\n# Deploy Fluentd for log collection\ncat &gt; fluentd-values.yaml &lt;&lt; 'EOF'\nimage:\n  repository: fluent/fluentd-kubernetes-daemonset\n  tag: v1.16-debian-elasticsearch7-1\n\nelasticsearch:\n  host: elasticsearch-master\n  port: 9200\n  scheme: http\n  user: elastic\n  password: changeme\n\nrbac:\n  create: true\n\nresources:\n  limits:\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 200Mi\n\n# Fluentd configuration\nconfigMaps:\n  useDefaults:\n    systemdConf: false\n    containersInputConf: true\n    systemInputConf: false\n    forwardInputConf: false\n    monitoringConf: true\n    outputConf: false\n\nfileConfigs:\n  01_sources.conf: |\n    &lt;source&gt;\n      @type tail\n      @id in_tail_container_logs\n      path /var/log/containers/*mcp-mesh*.log\n      pos_file /var/log/fluentd-containers.log.pos\n      tag kubernetes.*\n      exclude_path [\"/var/log/containers/*fluentd*\"]\n      read_from_head true\n      &lt;parse&gt;\n        @type multi_format\n        &lt;pattern&gt;\n          format json\n          time_key timestamp\n          time_format %Y-%m-%dT%H:%M:%S.%NZ\n        &lt;/pattern&gt;\n        &lt;pattern&gt;\n          format /^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$/\n          time_format %Y-%m-%dT%H:%M:%S.%N%:z\n        &lt;/pattern&gt;\n      &lt;/parse&gt;\n    &lt;/source&gt;\n\n  02_filters.conf: |\n    &lt;filter kubernetes.**&gt;\n      @type kubernetes_metadata\n      @id filter_kube_metadata\n      kubernetes_url \"#{ENV['KUBERNETES_URL']}\"\n      verify_ssl \"#{ENV['KUBERNETES_VERIFY_SSL']}\"\n      ca_file \"#{ENV['KUBERNETES_CA_FILE']}\"\n      skip_labels false\n      skip_container_metadata false\n      skip_master_url false\n      skip_namespace_metadata false\n    &lt;/filter&gt;\n\n    &lt;filter kubernetes.**&gt;\n      @type parser\n      @id filter_parser\n      key_name log\n      reserve_data true\n      remove_key_name_field true\n      &lt;parse&gt;\n        @type multi_format\n        &lt;pattern&gt;\n          format json\n        &lt;/pattern&gt;\n        &lt;pattern&gt;\n          format none\n        &lt;/pattern&gt;\n      &lt;/parse&gt;\n    &lt;/filter&gt;\n\n    &lt;filter kubernetes.**&gt;\n      @type record_transformer\n      @id filter_records\n      &lt;record&gt;\n        hostname ${hostname}\n        environment \"#{ENV['ENVIRONMENT'] || 'development'}\"\n        cluster_name \"#{ENV['CLUSTER_NAME'] || 'mcp-mesh'}\"\n      &lt;/record&gt;\n    &lt;/filter&gt;\n\n  03_outputs.conf: |\n    &lt;match kubernetes.**&gt;\n      @type elasticsearch\n      @id out_es\n      @log_level info\n      include_tag_key true\n      host \"#{ENV['FLUENT_ELASTICSEARCH_HOST']}\"\n      port \"#{ENV['FLUENT_ELASTICSEARCH_PORT']}\"\n      scheme \"#{ENV['FLUENT_ELASTICSEARCH_SCHEME'] || 'http'}\"\n      ssl_verify \"#{ENV['FLUENT_ELASTICSEARCH_SSL_VERIFY'] || 'true'}\"\n      ssl_version \"#{ENV['FLUENT_ELASTICSEARCH_SSL_VERSION'] || 'TLSv1_2'}\"\n      user \"#{ENV['FLUENT_ELASTICSEARCH_USER'] || 'elastic'}\"\n      password \"#{ENV['FLUENT_ELASTICSEARCH_PASSWORD']}\"\n      reload_connections false\n      reconnect_on_error true\n      reload_on_failure true\n      log_es_400_reason true\n      logstash_prefix mcp-mesh-logs\n      logstash_dateformat %Y.%m.%d\n      include_timestamp true\n      template_name mcp-mesh-logs\n      template_file /fluentd/etc/elasticsearch-template.json\n      template_overwrite true\n      &lt;buffer&gt;\n        flush_thread_count 8\n        flush_interval 5s\n        chunk_limit_size 2M\n        queue_limit_length 32\n        retry_max_interval 30\n        retry_forever true\n      &lt;/buffer&gt;\n    &lt;/match&gt;\n\ntolerations:\n  - key: node-role.kubernetes.io/master\n    operator: Exists\n    effect: NoSchedule\nEOF\n\n# Install Fluentd\nhelm install fluentd bitnami/fluentd \\\n  --namespace logging \\\n  --values fluentd-values.yaml\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#step-2-configure-structured-logging-in-mcp-mesh","title":"Step 2: Configure Structured Logging in MCP Mesh","text":"<p>Implement structured logging in agents:</p> <pre><code># mcp_mesh/logging.py\nimport logging\nimport json\nimport sys\nimport os\nfrom datetime import datetime\nfrom pythonjsonlogger import jsonlogger\nfrom opentelemetry import trace\nimport asyncio\nfrom contextvars import ContextVar\n\n# Context variables for request tracking\nrequest_id_var: ContextVar[str] = ContextVar('request_id', default='')\nuser_id_var: ContextVar[str] = ContextVar('user_id', default='')\n\nclass MCPMeshLogFormatter(jsonlogger.JsonFormatter):\n    \"\"\"Custom JSON formatter for MCP Mesh logs\"\"\"\n\n    def add_fields(self, log_record, record, message_dict):\n        super().add_fields(log_record, record, message_dict)\n\n        # Add timestamp\n        log_record['timestamp'] = datetime.utcnow().isoformat() + 'Z'\n\n        # Add log level\n        log_record['level'] = record.levelname\n\n        # Add service information\n        log_record['service'] = {\n            'name': os.getenv('SERVICE_NAME', 'unknown'),\n            'version': os.getenv('SERVICE_VERSION', '1.0.0'),\n            'environment': os.getenv('ENVIRONMENT', 'development'),\n            'instance_id': os.getenv('HOSTNAME', 'unknown')\n        }\n\n        # Add Kubernetes metadata\n        log_record['kubernetes'] = {\n            'namespace': os.getenv('K8S_NAMESPACE', 'default'),\n            'pod_name': os.getenv('HOSTNAME', 'unknown'),\n            'node_name': os.getenv('NODE_NAME', 'unknown')\n        }\n\n        # Add trace context\n        span = trace.get_current_span()\n        if span and span.get_span_context().is_valid:\n            ctx = span.get_span_context()\n            log_record['trace'] = {\n                'trace_id': format(ctx.trace_id, '032x'),\n                'span_id': format(ctx.span_id, '016x'),\n                'trace_flags': format(ctx.trace_flags, '02x')\n            }\n\n        # Add request context\n        request_id = request_id_var.get()\n        if request_id:\n            log_record['request_id'] = request_id\n\n        user_id = user_id_var.get()\n        if user_id:\n            log_record['user_id'] = user_id\n\n        # Add source location\n        log_record['source'] = {\n            'file': record.pathname,\n            'line': record.lineno,\n            'function': record.funcName\n        }\n\n        # Move message to correct field\n        if 'message' in log_record:\n            log_record['msg'] = log_record.pop('message')\n\ndef setup_logging(service_name: str, log_level: str = \"INFO\"):\n    \"\"\"Set up structured logging for MCP Mesh service\"\"\"\n\n    # Create logger\n    logger = logging.getLogger('mcp_mesh')\n    logger.setLevel(getattr(logging, log_level.upper()))\n\n    # Remove existing handlers\n    logger.handlers = []\n\n    # Create console handler with JSON formatter\n    handler = logging.StreamHandler(sys.stdout)\n    formatter = MCPMeshLogFormatter(\n        '%(timestamp)s %(level)s %(name)s %(message)s'\n    )\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    # Add exception hook for unhandled exceptions\n    def handle_exception(exc_type, exc_value, exc_traceback):\n        if issubclass(exc_type, KeyboardInterrupt):\n            sys.__excepthook__(exc_type, exc_value, exc_traceback)\n            return\n\n        logger.critical(\n            \"Unhandled exception\",\n            exc_info=(exc_type, exc_value, exc_traceback),\n            extra={\n                'exception_type': exc_type.__name__,\n                'exception_message': str(exc_value)\n            }\n        )\n\n    sys.excepthook = handle_exception\n\n    return logger\n\n# Logging utilities\nclass LogContext:\n    \"\"\"Context manager for adding fields to logs\"\"\"\n\n    def __init__(self, **kwargs):\n        self.fields = kwargs\n        self.tokens = []\n\n    def __enter__(self):\n        # Set context variables\n        if 'request_id' in self.fields:\n            self.tokens.append(request_id_var.set(self.fields['request_id']))\n        if 'user_id' in self.fields:\n            self.tokens.append(user_id_var.set(self.fields['user_id']))\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        # Reset context variables\n        for token in self.tokens:\n            request_id_var.reset(token)\n\n# Enhanced logger for agents\nclass AgentLogger:\n    \"\"\"Agent-specific logger with additional functionality\"\"\"\n\n    def __init__(self, agent_name: str):\n        self.agent_name = agent_name\n        self.logger = setup_logging(f\"mcp-mesh-{agent_name}\")\n        self._metrics = {\n            'requests_total': 0,\n            'errors_total': 0,\n            'warnings_total': 0\n        }\n\n    def _log(self, level: str, message: str, **kwargs):\n        \"\"\"Internal log method with agent context\"\"\"\n        extra = {\n            'agent': {\n                'name': self.agent_name,\n                'type': 'mcp-mesh'\n            }\n        }\n        extra.update(kwargs)\n\n        # Update metrics\n        if level == 'ERROR':\n            self._metrics['errors_total'] += 1\n        elif level == 'WARNING':\n            self._metrics['warnings_total'] += 1\n\n        getattr(self.logger, level.lower())(message, extra=extra)\n\n    def info(self, message: str, **kwargs):\n        self._log('INFO', message, **kwargs)\n\n    def warning(self, message: str, **kwargs):\n        self._log('WARNING', message, **kwargs)\n\n    def error(self, message: str, **kwargs):\n        self._log('ERROR', message, **kwargs)\n\n    def debug(self, message: str, **kwargs):\n        self._log('DEBUG', message, **kwargs)\n\n    def request(self, method: str, params: dict = None,\n               duration_ms: float = None, status: str = \"success\"):\n        \"\"\"Log API request with standard fields\"\"\"\n        self._metrics['requests_total'] += 1\n\n        self.info(\n            f\"Request processed: {method}\",\n            request={\n                'method': method,\n                'params': params or {},\n                'duration_ms': duration_ms,\n                'status': status\n            },\n            metrics={\n                'duration_ms': duration_ms\n            }\n        )\n\n    def exception(self, message: str, exc: Exception, **kwargs):\n        \"\"\"Log exception with full context\"\"\"\n        import traceback\n\n        self.error(\n            message,\n            exception={\n                'type': type(exc).__name__,\n                'message': str(exc),\n                'traceback': traceback.format_exc()\n            },\n            **kwargs\n        )\n\n    def audit(self, action: str, resource: str, result: str, **kwargs):\n        \"\"\"Log audit event\"\"\"\n        self.info(\n            f\"Audit: {action} {resource}\",\n            audit={\n                'action': action,\n                'resource': resource,\n                'result': result,\n                'timestamp': datetime.utcnow().isoformat()\n            },\n            **kwargs\n        )\n\n# Example usage in an agent\nclass LoggedWeatherAgent:\n    def __init__(self):\n        self.logger = AgentLogger(\"weather-agent\")\n        self.cache = {}\n\n    async def get_forecast(self, location: str, days: int = 7):\n        \"\"\"Get weather forecast with comprehensive logging\"\"\"\n        start_time = asyncio.get_event_loop().time()\n\n        # Create request context\n        request_id = f\"req-{start_time}\"\n\n        with LogContext(request_id=request_id):\n            self.logger.info(\n                f\"Getting forecast for {location}\",\n                location=location,\n                days=days,\n                cache_keys=list(self.cache.keys())\n            )\n\n            try:\n                # Check cache\n                cache_key = f\"{location}:{days}\"\n                if cache_key in self.cache:\n                    self.logger.debug(\n                        \"Cache hit\",\n                        cache_key=cache_key,\n                        cache_size=len(self.cache)\n                    )\n                    return self.cache[cache_key]\n\n                # Call external API\n                self.logger.info(\n                    \"Calling weather API\",\n                    api_endpoint=\"https://api.weather.com/forecast\",\n                    timeout=30\n                )\n\n                # Simulate API call\n                await asyncio.sleep(0.1)\n                result = {\"temp\": 72, \"conditions\": \"sunny\"}\n\n                # Cache result\n                self.cache[cache_key] = result\n\n                # Calculate duration\n                duration_ms = (asyncio.get_event_loop().time() - start_time) * 1000\n\n                # Log successful request\n                self.logger.request(\n                    method=\"get_forecast\",\n                    params={\"location\": location, \"days\": days},\n                    duration_ms=duration_ms,\n                    status=\"success\"\n                )\n\n                # Audit log\n                self.logger.audit(\n                    action=\"forecast_retrieved\",\n                    resource=f\"location:{location}\",\n                    result=\"success\",\n                    user_id=\"api-user-123\"\n                )\n\n                return result\n\n            except Exception as e:\n                duration_ms = (asyncio.get_event_loop().time() - start_time) * 1000\n\n                self.logger.exception(\n                    f\"Failed to get forecast for {location}\",\n                    exc=e,\n                    location=location,\n                    duration_ms=duration_ms\n                )\n\n                self.logger.request(\n                    method=\"get_forecast\",\n                    params={\"location\": location, \"days\": days},\n                    duration_ms=duration_ms,\n                    status=\"error\"\n                )\n\n                raise\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#step-3-create-elasticsearch-index-templates","title":"Step 3: Create Elasticsearch Index Templates","text":"<p>Define index templates for optimal log storage:</p> <pre><code>// elasticsearch-template.json\n{\n  \"index_patterns\": [\"mcp-mesh-logs-*\"],\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 3,\n      \"number_of_replicas\": 1,\n      \"index.lifecycle.name\": \"mcp-mesh-logs\",\n      \"index.lifecycle.rollover_alias\": \"mcp-mesh-logs\",\n      \"analysis\": {\n        \"analyzer\": {\n          \"log_analyzer\": {\n            \"type\": \"custom\",\n            \"tokenizer\": \"standard\",\n            \"filter\": [\"lowercase\", \"stop\", \"snowball\"]\n          }\n        }\n      }\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"timestamp\": {\n          \"type\": \"date\",\n          \"format\": \"strict_date_time\"\n        },\n        \"level\": {\n          \"type\": \"keyword\"\n        },\n        \"msg\": {\n          \"type\": \"text\",\n          \"analyzer\": \"log_analyzer\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\",\n              \"ignore_above\": 256\n            }\n          }\n        },\n        \"service\": {\n          \"properties\": {\n            \"name\": { \"type\": \"keyword\" },\n            \"version\": { \"type\": \"keyword\" },\n            \"environment\": { \"type\": \"keyword\" },\n            \"instance_id\": { \"type\": \"keyword\" }\n          }\n        },\n        \"kubernetes\": {\n          \"properties\": {\n            \"namespace\": { \"type\": \"keyword\" },\n            \"pod_name\": { \"type\": \"keyword\" },\n            \"node_name\": { \"type\": \"keyword\" },\n            \"container_name\": { \"type\": \"keyword\" },\n            \"labels\": { \"type\": \"object\" }\n          }\n        },\n        \"trace\": {\n          \"properties\": {\n            \"trace_id\": { \"type\": \"keyword\" },\n            \"span_id\": { \"type\": \"keyword\" },\n            \"trace_flags\": { \"type\": \"keyword\" }\n          }\n        },\n        \"request\": {\n          \"properties\": {\n            \"method\": { \"type\": \"keyword\" },\n            \"params\": { \"type\": \"object\" },\n            \"duration_ms\": { \"type\": \"float\" },\n            \"status\": { \"type\": \"keyword\" }\n          }\n        },\n        \"exception\": {\n          \"properties\": {\n            \"type\": { \"type\": \"keyword\" },\n            \"message\": { \"type\": \"text\" },\n            \"traceback\": { \"type\": \"text\" }\n          }\n        },\n        \"audit\": {\n          \"properties\": {\n            \"action\": { \"type\": \"keyword\" },\n            \"resource\": { \"type\": \"keyword\" },\n            \"result\": { \"type\": \"keyword\" },\n            \"user_id\": { \"type\": \"keyword\" }\n          }\n        },\n        \"metrics\": {\n          \"properties\": {\n            \"duration_ms\": { \"type\": \"float\" },\n            \"count\": { \"type\": \"long\" },\n            \"size_bytes\": { \"type\": \"long\" }\n          }\n        },\n        \"agent\": {\n          \"properties\": {\n            \"name\": { \"type\": \"keyword\" },\n            \"type\": { \"type\": \"keyword\" }\n          }\n        },\n        \"source\": {\n          \"properties\": {\n            \"file\": { \"type\": \"keyword\" },\n            \"line\": { \"type\": \"long\" },\n            \"function\": { \"type\": \"keyword\" }\n          }\n        }\n      }\n    }\n  },\n  \"composed_of\": [\"mcp-mesh-logs-settings\", \"mcp-mesh-logs-mappings\"],\n  \"priority\": 200,\n  \"version\": 1,\n  \"_meta\": {\n    \"description\": \"Template for MCP Mesh application logs\"\n  }\n}\n</code></pre> <p>Apply the template:</p> <pre><code># Create index template\ncurl -X PUT \"http://localhost:9200/_index_template/mcp-mesh-logs\" \\\n  -H \"Content-Type: application/json\" \\\n  -u elastic:changeme \\\n  -d @elasticsearch-template.json\n\n# Create initial index with alias\ncurl -X PUT \"http://localhost:9200/mcp-mesh-logs-000001\" \\\n  -H \"Content-Type: application/json\" \\\n  -u elastic:changeme \\\n  -d '{\n    \"aliases\": {\n      \"mcp-mesh-logs\": {\n        \"is_write_index\": true\n      }\n    }\n  }'\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#step-4-build-kibana-dashboards","title":"Step 4: Build Kibana Dashboards","text":"<p>Create saved searches and visualizations:</p> <pre><code>// kibana-dashboard.json\n{\n  \"version\": \"8.11.0\",\n  \"objects\": [\n    {\n      \"id\": \"mcp-mesh-logs-search\",\n      \"type\": \"search\",\n      \"attributes\": {\n        \"title\": \"MCP Mesh Logs\",\n        \"columns\": [\"timestamp\", \"level\", \"service.name\", \"msg\"],\n        \"sort\": [[\"timestamp\", \"desc\"]],\n        \"kibanaSavedObjectMeta\": {\n          \"searchSourceJSON\": {\n            \"index\": \"mcp-mesh-logs-*\",\n            \"query\": {\n              \"match_all\": {}\n            },\n            \"filter\": []\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"mcp-mesh-error-timeline\",\n      \"type\": \"visualization\",\n      \"attributes\": {\n        \"title\": \"Error Timeline\",\n        \"visState\": {\n          \"type\": \"line\",\n          \"params\": {\n            \"grid\": { \"categoryLines\": false, \"style\": { \"color\": \"#eee\" } },\n            \"categoryAxes\": [\n              {\n                \"id\": \"CategoryAxis-1\",\n                \"type\": \"category\",\n                \"position\": \"bottom\",\n                \"show\": true,\n                \"style\": {},\n                \"scale\": { \"type\": \"linear\" },\n                \"labels\": { \"show\": true, \"filter\": true, \"truncate\": 100 },\n                \"title\": {}\n              }\n            ],\n            \"valueAxes\": [\n              {\n                \"id\": \"ValueAxis-1\",\n                \"name\": \"LeftAxis-1\",\n                \"type\": \"value\",\n                \"position\": \"left\",\n                \"show\": true,\n                \"style\": {},\n                \"scale\": { \"type\": \"linear\", \"mode\": \"normal\" },\n                \"labels\": {\n                  \"show\": true,\n                  \"rotate\": 0,\n                  \"filter\": false,\n                  \"truncate\": 100\n                },\n                \"title\": { \"text\": \"Error Count\" }\n              }\n            ],\n            \"seriesParams\": [\n              {\n                \"show\": true,\n                \"type\": \"line\",\n                \"mode\": \"normal\",\n                \"data\": { \"label\": \"Error Count\", \"id\": \"1\" },\n                \"valueAxis\": \"ValueAxis-1\",\n                \"drawLinesBetweenPoints\": true,\n                \"showCircles\": true\n              }\n            ],\n            \"addTooltip\": true,\n            \"addLegend\": true,\n            \"legendPosition\": \"right\",\n            \"times\": [],\n            \"addTimeMarker\": false\n          },\n          \"aggs\": [\n            {\n              \"id\": \"1\",\n              \"enabled\": true,\n              \"type\": \"count\",\n              \"schema\": \"metric\",\n              \"params\": {}\n            },\n            {\n              \"id\": \"2\",\n              \"enabled\": true,\n              \"type\": \"date_histogram\",\n              \"schema\": \"segment\",\n              \"params\": {\n                \"field\": \"timestamp\",\n                \"interval\": \"auto\",\n                \"customInterval\": \"2h\",\n                \"min_doc_count\": 1,\n                \"extended_bounds\": {}\n              }\n            },\n            {\n              \"id\": \"3\",\n              \"enabled\": true,\n              \"type\": \"filters\",\n              \"schema\": \"group\",\n              \"params\": {\n                \"filters\": [\n                  { \"input\": { \"query\": \"level:ERROR\" }, \"label\": \"Errors\" },\n                  { \"input\": { \"query\": \"level:WARNING\" }, \"label\": \"Warnings\" }\n                ]\n              }\n            }\n          ]\n        },\n        \"kibanaSavedObjectMeta\": {\n          \"searchSourceJSON\": {\n            \"index\": \"mcp-mesh-logs-*\",\n            \"query\": { \"match_all\": {} },\n            \"filter\": []\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"mcp-mesh-agent-logs\",\n      \"type\": \"lens\",\n      \"attributes\": {\n        \"title\": \"Logs by Agent\",\n        \"state\": {\n          \"datasourceStates\": {\n            \"indexpattern\": {\n              \"layers\": {\n                \"layer1\": {\n                  \"columns\": {\n                    \"col1\": {\n                      \"label\": \"Count\",\n                      \"dataType\": \"number\",\n                      \"operationType\": \"count\",\n                      \"sourceField\": \"Records\"\n                    },\n                    \"col2\": {\n                      \"label\": \"Agent\",\n                      \"dataType\": \"string\",\n                      \"operationType\": \"terms\",\n                      \"sourceField\": \"agent.name\",\n                      \"params\": {\n                        \"size\": 10,\n                        \"orderBy\": { \"type\": \"column\", \"columnId\": \"col1\" },\n                        \"orderDirection\": \"desc\"\n                      }\n                    },\n                    \"col3\": {\n                      \"label\": \"Level\",\n                      \"dataType\": \"string\",\n                      \"operationType\": \"terms\",\n                      \"sourceField\": \"level\",\n                      \"params\": {\n                        \"size\": 5,\n                        \"orderBy\": { \"type\": \"alphabetical\" },\n                        \"orderDirection\": \"asc\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"visualization\": {\n            \"legend\": { \"isVisible\": true, \"position\": \"right\" },\n            \"valueLabels\": \"hide\",\n            \"fittingFunction\": \"None\",\n            \"axisTitlesVisibilitySettings\": {\n              \"x\": true,\n              \"yLeft\": true,\n              \"yRight\": true\n            },\n            \"gridlinesVisibilitySettings\": {\n              \"x\": true,\n              \"yLeft\": true,\n              \"yRight\": true\n            },\n            \"preferredSeriesType\": \"bar_stacked\",\n            \"layers\": [\n              {\n                \"layerId\": \"layer1\",\n                \"seriesType\": \"bar_stacked\",\n                \"xAccessor\": \"col2\",\n                \"accessors\": [\"col1\"],\n                \"splitAccessor\": \"col3\"\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"mcp-mesh-log-dashboard\",\n      \"type\": \"dashboard\",\n      \"attributes\": {\n        \"title\": \"MCP Mesh Log Analysis\",\n        \"hits\": 0,\n        \"description\": \"Comprehensive log analysis for MCP Mesh\",\n        \"panelsJSON\": \"[{\\\"version\\\":\\\"8.11.0\\\",\\\"type\\\":\\\"visualization\\\",\\\"gridData\\\":{\\\"x\\\":0,\\\"y\\\":0,\\\"w\\\":48,\\\"h\\\":15,\\\"i\\\":\\\"1\\\"},\\\"panelIndex\\\":\\\"1\\\",\\\"embeddableConfig\\\":{\\\"enhancements\\\":{}},\\\"panelRefName\\\":\\\"panel_1\\\"},{\\\"version\\\":\\\"8.11.0\\\",\\\"type\\\":\\\"lens\\\",\\\"gridData\\\":{\\\"x\\\":0,\\\"y\\\":15,\\\"w\\\":24,\\\"h\\\":15,\\\"i\\\":\\\"2\\\"},\\\"panelIndex\\\":\\\"2\\\",\\\"embeddableConfig\\\":{\\\"enhancements\\\":{}},\\\"panelRefName\\\":\\\"panel_2\\\"},{\\\"version\\\":\\\"8.11.0\\\",\\\"type\\\":\\\"search\\\",\\\"gridData\\\":{\\\"x\\\":24,\\\"y\\\":15,\\\"w\\\":24,\\\"h\\\":30,\\\"i\\\":\\\"3\\\"},\\\"panelIndex\\\":\\\"3\\\",\\\"embeddableConfig\\\":{\\\"enhancements\\\":{}},\\\"panelRefName\\\":\\\"panel_3\\\"}]\",\n        \"optionsJSON\": \"{\\\"useMargins\\\":true,\\\"syncColors\\\":false,\\\"hidePanelTitles\\\":false}\",\n        \"timeRestore\": true,\n        \"timeTo\": \"now\",\n        \"timeFrom\": \"now-24h\",\n        \"refreshInterval\": { \"pause\": false, \"value\": 30000 },\n        \"kibanaSavedObjectMeta\": {\n          \"searchSourceJSON\": \"{\\\"query\\\":{\\\"query\\\":\\\"\\\",\\\"language\\\":\\\"kuery\\\"},\\\"filter\\\":[]}\"\n        }\n      },\n      \"references\": [\n        {\n          \"id\": \"mcp-mesh-error-timeline\",\n          \"name\": \"panel_1\",\n          \"type\": \"visualization\"\n        },\n        { \"id\": \"mcp-mesh-agent-logs\", \"name\": \"panel_2\", \"type\": \"lens\" },\n        { \"id\": \"mcp-mesh-logs-search\", \"name\": \"panel_3\", \"type\": \"search\" }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#step-5-implement-log-analysis-queries","title":"Step 5: Implement Log Analysis Queries","text":"<p>Create powerful log analysis queries:</p> <pre><code># log_analysis.py\nfrom elasticsearch import Elasticsearch\nfrom datetime import datetime, timedelta\nimport json\n\nclass LogAnalyzer:\n    \"\"\"Analyze logs from Elasticsearch\"\"\"\n\n    def __init__(self, es_host: str = \"localhost:9200\",\n                 username: str = \"elastic\",\n                 password: str = \"changeme\"):\n        self.es = Elasticsearch(\n            [es_host],\n            basic_auth=(username, password)\n        )\n        self.index_pattern = \"mcp-mesh-logs-*\"\n\n    def search_by_trace_id(self, trace_id: str):\n        \"\"\"Find all logs for a specific trace\"\"\"\n        query = {\n            \"query\": {\n                \"term\": {\n                    \"trace.trace_id\": trace_id\n                }\n            },\n            \"sort\": [\n                {\"timestamp\": \"asc\"}\n            ],\n            \"size\": 1000\n        }\n\n        response = self.es.search(\n            index=self.index_pattern,\n            body=query\n        )\n\n        return [hit[\"_source\"] for hit in response[\"hits\"][\"hits\"]]\n\n    def find_errors_by_agent(self, agent_name: str,\n                            hours: int = 24):\n        \"\"\"Find recent errors for an agent\"\"\"\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\"term\": {\"agent.name\": agent_name}},\n                        {\"term\": {\"level\": \"ERROR\"}},\n                        {\"range\": {\n                            \"timestamp\": {\n                                \"gte\": f\"now-{hours}h\"\n                            }\n                        }}\n                    ]\n                }\n            },\n            \"aggs\": {\n                \"error_types\": {\n                    \"terms\": {\n                        \"field\": \"exception.type\",\n                        \"size\": 10\n                    }\n                },\n                \"error_timeline\": {\n                    \"date_histogram\": {\n                        \"field\": \"timestamp\",\n                        \"fixed_interval\": \"1h\"\n                    }\n                }\n            },\n            \"size\": 100\n        }\n\n        response = self.es.search(\n            index=self.index_pattern,\n            body=query\n        )\n\n        return {\n            \"errors\": [hit[\"_source\"] for hit in response[\"hits\"][\"hits\"]],\n            \"error_types\": response[\"aggregations\"][\"error_types\"][\"buckets\"],\n            \"timeline\": response[\"aggregations\"][\"error_timeline\"][\"buckets\"]\n        }\n\n    def analyze_request_patterns(self, hours: int = 1):\n        \"\"\"Analyze request patterns across all agents\"\"\"\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\"exists\": {\"field\": \"request.method\"}},\n                        {\"range\": {\n                            \"timestamp\": {\n                                \"gte\": f\"now-{hours}h\"\n                            }\n                        }}\n                    ]\n                }\n            },\n            \"aggs\": {\n                \"requests_by_agent\": {\n                    \"terms\": {\n                        \"field\": \"agent.name\",\n                        \"size\": 20\n                    },\n                    \"aggs\": {\n                        \"methods\": {\n                            \"terms\": {\n                                \"field\": \"request.method\",\n                                \"size\": 10\n                            }\n                        },\n                        \"avg_duration\": {\n                            \"avg\": {\n                                \"field\": \"request.duration_ms\"\n                            }\n                        },\n                        \"error_rate\": {\n                            \"terms\": {\n                                \"field\": \"request.status\",\n                                \"size\": 2\n                            }\n                        }\n                    }\n                },\n                \"slow_requests\": {\n                    \"top_hits\": {\n                        \"sort\": [\n                            {\"request.duration_ms\": \"desc\"}\n                        ],\n                        \"size\": 10,\n                        \"_source\": [\"timestamp\", \"agent.name\",\n                                   \"request.method\", \"request.duration_ms\"]\n                    }\n                }\n            },\n            \"size\": 0\n        }\n\n        response = self.es.search(\n            index=self.index_pattern,\n            body=query\n        )\n\n        return response[\"aggregations\"]\n\n    def detect_anomalies(self, agent_name: str):\n        \"\"\"Detect anomalous patterns in logs\"\"\"\n        # Use machine learning features if available\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\"term\": {\"agent.name\": agent_name}},\n                        {\"range\": {\n                            \"timestamp\": {\n                                \"gte\": \"now-1h\"\n                            }\n                        }}\n                    ]\n                }\n            },\n            \"aggs\": {\n                \"log_rate\": {\n                    \"date_histogram\": {\n                        \"field\": \"timestamp\",\n                        \"fixed_interval\": \"1m\"\n                    },\n                    \"aggs\": {\n                        \"level_breakdown\": {\n                            \"terms\": {\n                                \"field\": \"level\"\n                            }\n                        }\n                    }\n                },\n                \"unique_errors\": {\n                    \"cardinality\": {\n                        \"field\": \"exception.message.keyword\"\n                    }\n                },\n                \"rare_terms\": {\n                    \"rare_terms\": {\n                        \"field\": \"msg.keyword\",\n                        \"max_doc_count\": 2\n                    }\n                }\n            }\n        }\n\n        response = self.es.search(\n            index=self.index_pattern,\n            body=query\n        )\n\n        # Analyze for anomalies\n        anomalies = []\n\n        # Check for sudden spike in errors\n        for bucket in response[\"aggregations\"][\"log_rate\"][\"buckets\"]:\n            error_count = next(\n                (b[\"doc_count\"] for b in bucket[\"level_breakdown\"][\"buckets\"]\n                 if b[\"key\"] == \"ERROR\"), 0\n            )\n            if error_count &gt; 10:  # Threshold\n                anomalies.append({\n                    \"type\": \"error_spike\",\n                    \"timestamp\": bucket[\"key_as_string\"],\n                    \"count\": error_count\n                })\n\n        # Check for new error types\n        unique_errors = response[\"aggregations\"][\"unique_errors\"][\"value\"]\n        if unique_errors &gt; 5:  # Threshold\n            anomalies.append({\n                \"type\": \"high_error_variety\",\n                \"unique_count\": unique_errors\n            })\n\n        return anomalies\n\n    def export_logs(self, query: dict, output_file: str):\n        \"\"\"Export logs matching query to file\"\"\"\n        from elasticsearch.helpers import scan\n\n        with open(output_file, 'w') as f:\n            for doc in scan(\n                self.es,\n                index=self.index_pattern,\n                query=query,\n                size=1000\n            ):\n                f.write(json.dumps(doc[\"_source\"]) + \"\\n\")\n\n# Usage example\nanalyzer = LogAnalyzer()\n\n# Find logs for a trace\ntrace_logs = analyzer.search_by_trace_id(\"abc123def456\")\nfor log in trace_logs:\n    print(f\"{log['timestamp']} [{log['level']}] {log['msg']}\")\n\n# Analyze errors\nerrors = analyzer.find_errors_by_agent(\"weather-agent\")\nprint(f\"Found {len(errors['errors'])} errors\")\nfor error_type in errors['error_types']:\n    print(f\"  {error_type['key']}: {error_type['doc_count']}\")\n\n# Detect anomalies\nanomalies = analyzer.detect_anomalies(\"payment-agent\")\nif anomalies:\n    print(\"Anomalies detected:\")\n    for anomaly in anomalies:\n        print(f\"  {anomaly['type']}: {anomaly}\")\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#step-6-set-up-log-retention-and-archival","title":"Step 6: Set Up Log Retention and Archival","text":"<p>Configure log lifecycle management:</p> <pre><code># Create S3 repository for snapshots\ncurl -X PUT \"localhost:9200/_snapshot/mcp_mesh_backup\" \\\n  -H \"Content-Type: application/json\" \\\n  -u elastic:changeme \\\n  -d '{\n    \"type\": \"s3\",\n    \"settings\": {\n      \"bucket\": \"mcp-mesh-logs-backup\",\n      \"region\": \"us-east-1\",\n      \"access_key\": \"YOUR_ACCESS_KEY\",\n      \"secret_key\": \"YOUR_SECRET_KEY\"\n    }\n  }'\n\n# Create snapshot lifecycle policy\ncurl -X PUT \"localhost:9200/_slm/policy/daily-snapshots\" \\\n  -H \"Content-Type: application/json\" \\\n  -u elastic:changeme \\\n  -d '{\n    \"schedule\": \"0 30 1 * * ?\",\n    \"name\": \"&lt;mcp-mesh-logs-{now/d}&gt;\",\n    \"repository\": \"mcp_mesh_backup\",\n    \"config\": {\n      \"indices\": [\"mcp-mesh-logs-*\"],\n      \"include_global_state\": false,\n      \"partial\": false\n    },\n    \"retention\": {\n      \"expire_after\": \"90d\",\n      \"min_count\": 5,\n      \"max_count\": 50\n    }\n  }'\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#configuration-options","title":"Configuration Options","text":"Component Setting Description Index Shards <code>3</code> Number of primary shards Retention <code>30 days</code> How long to keep logs Refresh Interval <code>5s</code> How often to make logs searchable Batch Size <code>2MB</code> Fluentd batch size Replicas <code>1</code> Number of replica shards"},{"location":"07-observability/04-centralized-logging/#examples","title":"Examples","text":""},{"location":"07-observability/04-centralized-logging/#example-1-security-audit-dashboard","title":"Example 1: Security Audit Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh Security Audit\",\n    \"panels\": [\n      {\n        \"title\": \"Authentication Events\",\n        \"query\": {\n          \"query_string\": {\n            \"query\": \"audit.action:(login OR logout OR auth_failure)\"\n          }\n        },\n        \"visualization\": \"data_table\"\n      },\n      {\n        \"title\": \"Access Patterns by User\",\n        \"query\": {\n          \"bool\": {\n            \"must\": [\n              { \"exists\": { \"field\": \"audit.user_id\" } },\n              { \"term\": { \"audit.result\": \"success\" } }\n            ]\n          }\n        },\n        \"visualization\": \"heatmap\",\n        \"x_axis\": \"timestamp\",\n        \"y_axis\": \"audit.user_id\"\n      },\n      {\n        \"title\": \"Failed Access Attempts\",\n        \"query\": {\n          \"bool\": {\n            \"must\": [\n              { \"term\": { \"audit.result\": \"failure\" } },\n              { \"range\": { \"timestamp\": { \"gte\": \"now-1h\" } } }\n            ]\n          }\n        },\n        \"visualization\": \"map\",\n        \"geo_field\": \"client.geo.location\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#example-2-performance-analysis","title":"Example 2: Performance Analysis","text":"<pre><code># performance_logs.py\ndef analyze_performance_logs(es_client, agent_name: str):\n    \"\"\"Analyze performance from logs\"\"\"\n\n    query = {\n        \"query\": {\n            \"bool\": {\n                \"must\": [\n                    {\"term\": {\"agent.name\": agent_name}},\n                    {\"exists\": {\"field\": \"metrics.duration_ms\"}},\n                    {\"range\": {\"timestamp\": {\"gte\": \"now-1h\"}}}\n                ]\n            }\n        },\n        \"aggs\": {\n            \"percentiles\": {\n                \"percentiles\": {\n                    \"field\": \"metrics.duration_ms\",\n                    \"percents\": [50, 95, 99]\n                }\n            },\n            \"outliers\": {\n                \"terms\": {\n                    \"field\": \"request.method\",\n                    \"size\": 10,\n                    \"order\": {\"max_duration\": \"desc\"}\n                },\n                \"aggs\": {\n                    \"max_duration\": {\n                        \"max\": {\"field\": \"metrics.duration_ms\"}\n                    },\n                    \"sample_logs\": {\n                        \"top_hits\": {\n                            \"size\": 1,\n                            \"sort\": [{\"metrics.duration_ms\": \"desc\"}]\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    result = es_client.search(index=\"mcp-mesh-logs-*\", body=query)\n\n    print(f\"Performance Analysis for {agent_name}:\")\n    print(f\"P50: {result['aggregations']['percentiles']['values']['50.0']}ms\")\n    print(f\"P95: {result['aggregations']['percentiles']['values']['95.0']}ms\")\n    print(f\"P99: {result['aggregations']['percentiles']['values']['99.0']}ms\")\n\n    print(\"\\nSlowest Operations:\")\n    for bucket in result['aggregations']['outliers']['buckets']:\n        print(f\"  {bucket['key']}: {bucket['max_duration']['value']}ms\")\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#best-practices","title":"Best Practices","text":"<ol> <li>Structured Logging: Always use JSON format</li> <li>Correlation IDs: Include trace and request IDs</li> <li>Log Levels: Use appropriate levels consistently</li> <li>Retention Policy: Balance cost with compliance</li> <li>Security: Never log sensitive data</li> </ol>"},{"location":"07-observability/04-centralized-logging/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"07-observability/04-centralized-logging/#pitfall-1-logging-too-much","title":"Pitfall 1: Logging Too Much","text":"<p>Problem: Excessive logging impacts performance and storage</p> <p>Solution: Implement smart logging:</p> <pre><code># Use sampling for high-frequency logs\nif random.random() &lt; 0.01:  # 1% sampling\n    logger.debug(\"High frequency event\", sampled=True)\n\n# Aggregate before logging\nif time.time() - self.last_log &gt; 60:  # Log every minute\n    logger.info(f\"Processed {self.count} requests\", count=self.count)\n    self.count = 0\n    self.last_log = time.time()\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#pitfall-2-missing-context","title":"Pitfall 2: Missing Context","text":"<p>Problem: Logs lack context for troubleshooting</p> <p>Solution: Always include relevant context:</p> <pre><code>logger.error(\n    \"Database connection failed\",\n    error=str(e),\n    database_host=db_config[\"host\"],\n    retry_count=retry_count,\n    connection_pool_size=pool.size,\n    active_connections=pool.active_count\n)\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#testing","title":"Testing","text":""},{"location":"07-observability/04-centralized-logging/#test-log-pipeline","title":"Test Log Pipeline","text":"<pre><code># test_logging.py\nimport pytest\nimport json\nfrom io import StringIO\nimport logging\n\ndef test_structured_logging():\n    \"\"\"Test that logs are properly structured\"\"\"\n    stream = StringIO()\n    handler = logging.StreamHandler(stream)\n\n    logger = setup_logging(\"test-service\")\n    logger.handlers = [handler]\n\n    # Log test message\n    with LogContext(request_id=\"test-123\"):\n        logger.info(\"Test message\", custom_field=\"value\")\n\n    # Parse log output\n    stream.seek(0)\n    log_data = json.loads(stream.getvalue())\n\n    # Verify structure\n    assert log_data[\"level\"] == \"INFO\"\n    assert log_data[\"msg\"] == \"Test message\"\n    assert log_data[\"custom_field\"] == \"value\"\n    assert log_data[\"request_id\"] == \"test-123\"\n    assert \"timestamp\" in log_data\n    assert \"service\" in log_data\n\ndef test_exception_logging():\n    \"\"\"Test exception logging\"\"\"\n    logger = AgentLogger(\"test-agent\")\n\n    try:\n        raise ValueError(\"Test error\")\n    except ValueError as e:\n        logger.exception(\"Operation failed\", e, operation=\"test_op\")\n\n    # Verify exception was logged with context\n    # (Would need to capture and verify in real test)\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#load-test-logging","title":"Load Test Logging","text":"<pre><code>#!/bin/bash\n# load-test-logging.sh\n\necho \"Testing logging pipeline under load...\"\n\n# Generate high log volume\nfor i in {1..10000}; do\n  echo '{\"timestamp\":\"2024-01-15T10:00:00Z\",\"level\":\"INFO\",\"msg\":\"Test log '$i'\",\"service\":{\"name\":\"load-test\"}}' | \\\n    curl -X POST \"http://localhost:9200/mcp-mesh-logs/_doc\" \\\n      -H \"Content-Type: application/json\" \\\n      -u elastic:changeme \\\n      --data-binary @- &amp;\n\n  if [ $((i % 100)) -eq 0 ]; then\n    wait\n  fi\ndone\n\n# Check ingestion rate\ncurl -s \"http://localhost:9200/mcp-mesh-logs/_stats/indexing\" \\\n  -u elastic:changeme | \\\n  jq '.indices[\"mcp-mesh-logs\"].primaries.indexing.index_total'\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"07-observability/04-centralized-logging/#monitor-log-pipeline-health","title":"Monitor Log Pipeline Health","text":"<pre><code># logging-monitoring.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: logging-alerts\n  namespace: logging\ndata:\n  alerts.yaml: |\n    groups:\n    - name: logging\n      rules:\n      - alert: LogIngestionRate\n        expr: |\n          rate(fluentd_output_status_num_records_total[5m]) &lt; 100\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Low log ingestion rate\"\n          description: \"Log ingestion rate is {% raw %}{{ $value }}{% endraw %} logs/sec\"\n\n      - alert: ElasticsearchDiskSpace\n        expr: |\n          elasticsearch_filesystem_data_available_bytes /\n          elasticsearch_filesystem_data_size_bytes &lt; 0.1\n        for: 15m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Elasticsearch disk space low\"\n\n      - alert: LogParsingErrors\n        expr: |\n          rate(fluentd_filter_records_total{result=\"error\"}[5m]) &gt; 0.05\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High log parsing error rate\"\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#debug-log-issues","title":"Debug Log Issues","text":"<pre><code># Check Fluentd status\nkubectl logs -n logging daemonset/fluentd\n\n# Test log parsing\necho '{\"timestamp\":\"2024-01-15T10:00:00Z\",\"level\":\"INFO\",\"msg\":\"Test\"}' | \\\n  kubectl exec -n logging fluentd-xxxxx -- \\\n  fluentd -c /fluentd/etc/fluent.conf --dry-run\n\n# Check Elasticsearch health\ncurl -s http://localhost:9200/_cluster/health?pretty -u elastic:changeme\n\n# View index stats\ncurl -s http://localhost:9200/mcp-mesh-logs-*/_stats?pretty -u elastic:changeme\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"07-observability/04-centralized-logging/#issue-1-logs-not-appearing","title":"Issue 1: Logs Not Appearing","text":"<p>Symptoms: Logs not visible in Kibana</p> <p>Cause: Parsing errors or connection issues</p> <p>Solution:</p> <pre><code># Check Fluentd logs for errors\nkubectl logs -n logging daemonset/fluentd | grep ERROR\n\n# Verify index exists\ncurl -s http://localhost:9200/_cat/indices/mcp-mesh-logs-* -u elastic:changeme\n\n# Check for parsing errors\nkubectl exec -n logging fluentd-xxxxx -- \\\n  cat /var/log/fluentd-containers.log.pos\n</code></pre>"},{"location":"07-observability/04-centralized-logging/#issue-2-high-memory-usage","title":"Issue 2: High Memory Usage","text":"<p>Symptoms: Elasticsearch using too much memory</p> <p>Cause: Large indices or inefficient queries</p> <p>Solution:</p> <pre><code># Force merge old indices\ncurl -X POST \"http://localhost:9200/mcp-mesh-logs-*/_forcemerge?max_num_segments=1\" \\\n  -u elastic:changeme\n\n# Update index settings\ncurl -X PUT \"http://localhost:9200/mcp-mesh-logs-*/_settings\" \\\n  -H \"Content-Type: application/json\" \\\n  -u elastic:changeme \\\n  -d '{\n    \"index\": {\n      \"refresh_interval\": \"30s\",\n      \"number_of_replicas\": 0\n    }\n  }'\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"07-observability/04-centralized-logging/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>Index Size: Single index limited by shard size</li> <li>Query Performance: Complex queries can be slow</li> <li>Storage Cost: Logs consume significant disk space</li> <li>Retention Trade-offs: Longer retention increases costs</li> </ul>"},{"location":"07-observability/04-centralized-logging/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add log anomaly detection with ML</li> <li> Implement log sampling strategies</li> <li> Create automated log analysis reports</li> <li> Add integration with SIEM tools</li> <li> Document multi-region log aggregation</li> </ul>"},{"location":"07-observability/04-centralized-logging/#summary","title":"Summary","text":"<p>You now have centralized logging implemented:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 All logs aggregated in Elasticsearch</li> <li>\ud83d\udd11 Structured logging with full context</li> <li>\ud83d\udd11 Powerful search and analysis capabilities</li> <li>\ud83d\udd11 Correlation with traces and metrics</li> </ul>"},{"location":"07-observability/04-centralized-logging/#next-steps","title":"Next Steps","text":"<p>Let's complete observability with alerting and SLOs.</p> <p>Continue to Alerting and SLOs \u2192</p> <p>\ud83d\udca1 Tip: Use Kibana's machine learning features to detect anomalies in log patterns automatically</p> <p>\ud83d\udcda Reference: Elastic Stack Documentation</p> <p>\ud83e\uddea Try It: Create a custom log dashboard for your specific use case using Kibana Lens</p>"},{"location":"07-observability/05-alerting-slos/","title":"Alerting and SLOs","text":"<p>Define service level objectives and implement proactive alerting for MCP Mesh</p>"},{"location":"07-observability/05-alerting-slos/#overview","title":"Overview","text":"<p>Effective alerting and well-defined Service Level Objectives (SLOs) are crucial for maintaining reliable MCP Mesh deployments. This guide covers establishing SLIs (Service Level Indicators), setting appropriate SLOs, implementing multi-tier alerting strategies, and creating runbooks for incident response. You'll learn to balance alerting sensitivity with alert fatigue while ensuring critical issues are never missed.</p> <p>Proper alerting and SLO management enables proactive incident response, maintains service reliability, and provides clear communication about system performance to stakeholders.</p>"},{"location":"07-observability/05-alerting-slos/#key-concepts","title":"Key Concepts","text":"<ul> <li>SLI (Service Level Indicator): Metrics that measure service behavior</li> <li>SLO (Service Level Objective): Target values for SLIs</li> <li>Error Budget: Allowable unreliability within SLO</li> <li>Alert Fatigue: Too many non-actionable alerts</li> <li>Runbooks: Documented response procedures</li> </ul>"},{"location":"07-observability/05-alerting-slos/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"07-observability/05-alerting-slos/#step-1-define-service-level-indicators","title":"Step 1: Define Service Level Indicators","text":"<p>Identify and implement key SLIs for MCP Mesh:</p> <pre><code># sli-definitions.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-mesh-slis\n  namespace: monitoring\ndata:\n  slis.yaml: |\n    # MCP Mesh Service Level Indicators\n    slis:\n      # Availability SLI\n      availability:\n        description: \"Percentage of successful requests\"\n        query: |\n          (\n            sum(rate(mcp_mesh_requests_total{status!=\"error\"}[5m]))\n            /\n            sum(rate(mcp_mesh_requests_total[5m]))\n          ) * 100\n        unit: \"percent\"\n\n      # Latency SLI - P95\n      latency_p95:\n        description: \"95th percentile request latency\"\n        query: |\n          histogram_quantile(0.95,\n            sum by (le) (\n              rate(mcp_mesh_request_duration_seconds_bucket[5m])\n            )\n          )\n        unit: \"seconds\"\n\n      # Latency SLI - P99\n      latency_p99:\n        description: \"99th percentile request latency\"\n        query: |\n          histogram_quantile(0.99,\n            sum by (le) (\n              rate(mcp_mesh_request_duration_seconds_bucket[5m])\n            )\n          )\n        unit: \"seconds\"\n\n      # Error Rate SLI\n      error_rate:\n        description: \"Percentage of failed requests\"\n        query: |\n          (\n            sum(rate(mcp_mesh_requests_total{status=\"error\"}[5m]))\n            /\n            sum(rate(mcp_mesh_requests_total[5m]))\n          ) * 100\n        unit: \"percent\"\n\n      # Throughput SLI\n      throughput:\n        description: \"Requests processed per second\"\n        query: |\n          sum(rate(mcp_mesh_requests_total[5m]))\n        unit: \"requests/second\"\n\n      # Registry Health SLI\n      registry_health:\n        description: \"Registry availability and responsiveness\"\n        query: |\n          min(\n            up{job=\"mcp-mesh-registry\"} * 100,\n            (\n              rate(mcp_mesh_registry_request_duration_seconds_bucket{le=\"0.5\"}[5m])\n              /\n              rate(mcp_mesh_registry_request_duration_seconds_count[5m])\n            ) * 100\n          )\n        unit: \"percent\"\n\n      # Agent Registration SLI\n      agent_registration_time:\n        description: \"Time to register new agent\"\n        query: |\n          histogram_quantile(0.95,\n            sum by (le) (\n              rate(mcp_mesh_registry_registration_duration_seconds_bucket[5m])\n            )\n          )\n        unit: \"seconds\"\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-2-establish-service-level-objectives","title":"Step 2: Establish Service Level Objectives","text":"<p>Define SLOs based on business requirements:</p> <pre><code># slo-definitions.yaml\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: mcp-mesh-slos\n  namespace: monitoring\nspec:\n  service: \"mcp-mesh\"\n  labels:\n    team: \"platform\"\n    tier: \"critical\"\n\n  # SLO definitions\n  slos:\n    # 99.9% Availability SLO\n    - name: \"requests-availability\"\n      objective: 99.9\n      description: \"99.9% of requests should be successful\"\n\n      sli:\n        raw:\n          error_ratio_query: |\n            sum(rate(mcp_mesh_requests_total{status=\"error\"}[{% raw %}{{.window}}{% endraw %}]))\n            /\n            sum(rate(mcp_mesh_requests_total[{% raw %}{{.window}}{% endraw %}]))\n\n      alerting:\n        name: MCP_Mesh_HighErrorRate\n        page_alert:\n          labels:\n            severity: critical\n            team: platform\n        ticket_alert:\n          labels:\n            severity: warning\n            team: platform\n\n    # Latency SLO - 95% of requests under 500ms\n    - name: \"latency-p95\"\n      objective: 95\n      description: \"95% of requests should complete within 500ms\"\n\n      sli:\n        raw:\n          error_ratio_query: |\n            (\n              sum(rate(mcp_mesh_request_duration_seconds_bucket{le=\"0.5\"}[{% raw %}{{.window}}{% endraw %}]))\n              /\n              sum(rate(mcp_mesh_request_duration_seconds_count[{% raw %}{{.window}}{% endraw %}]))\n            )\n\n      alerting:\n        name: MCP_Mesh_HighLatency\n        page_alert:\n          labels:\n            severity: critical\n        ticket_alert:\n          labels:\n            severity: warning\n\n    # Registry Availability - 99.95%\n    - name: \"registry-availability\"\n      objective: 99.95\n      description: \"Registry should be available 99.95% of the time\"\n\n      sli:\n        raw:\n          error_ratio_query: |\n            1 - avg(up{job=\"mcp-mesh-registry\"})\n\n      alerting:\n        name: MCP_Mesh_RegistryDown\n        page_alert:\n          labels:\n            severity: critical\n            component: registry\n\n---\n# Error Budget Policy\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: error-budget-policy\n  namespace: monitoring\ndata:\n  policy.yaml: |\n    error_budget_policies:\n      # When error budget is exhausted\n      exhausted:\n        - freeze_deployments: true\n        - require_approval_for_changes: true\n        - increase_testing_coverage: true\n        - conduct_postmortem: true\n\n      # When error budget is at risk (&lt; 20% remaining)\n      at_risk:\n        - notify_on_call: true\n        - review_recent_changes: true\n        - increase_monitoring: true\n\n      # When error budget is healthy (&gt; 80% remaining)\n      healthy:\n        - allow_experimentation: true\n        - deploy_normally: true\n        - consider_relaxing_slos: false\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-3-implement-multi-tier-alerting","title":"Step 3: Implement Multi-Tier Alerting","text":"<p>Create comprehensive alerting rules:</p> <pre><code># alerting-rules.yaml\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: mcp-mesh-alerts\n  namespace: monitoring\n  labels:\n    prometheus: kube-prometheus\nspec:\n  groups:\n    # Critical Alerts - Page immediately\n    - name: mcp-mesh.critical\n      interval: 30s\n      rules:\n        - alert: MCP_Mesh_RegistryDown\n          expr: |\n            up{job=\"mcp-mesh-registry\"} == 0\n          for: 2m\n          labels:\n            severity: critical\n            component: registry\n            team: platform\n          annotations:\n            summary: \"MCP Mesh Registry is down\"\n            description: \"Registry {% raw %}{{ $labels.instance }}{% endraw %} has been down for more than 2 minutes\"\n            runbook_url: \"https://wiki.mcp-mesh.io/runbooks/registry-down\"\n            dashboard_url: \"https://grafana.mcp-mesh.io/d/registry/overview\"\n\n        - alert: MCP_Mesh_HighErrorRate\n          expr: |\n            (\n              sum(rate(mcp_mesh_requests_total{status=\"error\"}[5m]))\n              /\n              sum(rate(mcp_mesh_requests_total[5m]))\n            ) &gt; 0.05\n          for: 5m\n          labels:\n            severity: critical\n            team: platform\n          annotations:\n            summary: \"High error rate detected\"\n            description: \"Error rate is {% raw %}{{ $value | humanizePercentage }}{% endraw %} (threshold: 5%)\"\n            runbook_url: \"https://wiki.mcp-mesh.io/runbooks/high-error-rate\"\n\n        - alert: MCP_Mesh_SLO_BurnRate_High\n          expr: |\n            (\n              mcp_mesh:slo:error_budget_burn_rate:1h &gt; 14.4\n              and\n              mcp_mesh:slo:error_budget_burn_rate:5m &gt; 14.4\n            )\n            or\n            (\n              mcp_mesh:slo:error_budget_burn_rate:6h &gt; 6\n              and\n              mcp_mesh:slo:error_budget_burn_rate:30m &gt; 6\n            )\n          labels:\n            severity: critical\n            team: platform\n          annotations:\n            summary: \"SLO burn rate is critically high\"\n            description: \"At this rate, the error budget will be exhausted in {% raw %}{{ $value | humanizeDuration }}{% endraw %}\"\n            runbook_url: \"https://wiki.mcp-mesh.io/runbooks/slo-burn-rate\"\n\n    # Warning Alerts - Create ticket\n    - name: mcp-mesh.warning\n      interval: 60s\n      rules:\n        - alert: MCP_Mesh_HighLatency\n          expr: |\n            histogram_quantile(0.95,\n              sum by (agent, le) (\n                rate(mcp_mesh_request_duration_seconds_bucket[5m])\n              )\n            ) &gt; 0.5\n          for: 10m\n          labels:\n            severity: warning\n            team: platform\n          annotations:\n            summary: \"High latency on {% raw %}{{ $labels.agent }}{% endraw %}\"\n            description: \"P95 latency is {% raw %}{{ $value }}{% endraw %}s (threshold: 0.5s)\"\n            dashboard_url: \"https://grafana.mcp-mesh.io/d/agents/{% raw %}{{ $labels.agent }}{% endraw %}\"\n\n        - alert: MCP_Mesh_HighMemoryUsage\n          expr: |\n            (\n              container_memory_working_set_bytes{pod=~\"mcp-mesh-.*\"}\n              /\n              container_spec_memory_limit_bytes{pod=~\"mcp-mesh-.*\"}\n            ) &gt; 0.8\n          for: 15m\n          labels:\n            severity: warning\n            team: platform\n          annotations:\n            summary: \"High memory usage in {% raw %}{{ $labels.pod }}{% endraw %}\"\n            description: \"Memory usage is {% raw %}{{ $value | humanizePercentage }}{% endraw %} of limit\"\n\n        - alert: MCP_Mesh_PodRestarts\n          expr: |\n            increase(kube_pod_container_status_restarts_total{namespace=\"mcp-mesh\"}[1h]) &gt; 5\n          labels:\n            severity: warning\n            team: platform\n          annotations:\n            summary: \"Pod {% raw %}{{ $labels.pod }}{% endraw %} is restarting frequently\"\n            description: \"{% raw %}{{ $value }}{% endraw %} restarts in the last hour\"\n\n    # Info Alerts - Dashboard only\n    - name: mcp-mesh.info\n      interval: 5m\n      rules:\n        - alert: MCP_Mesh_DeploymentInProgress\n          expr: |\n            kube_deployment_status_replicas{namespace=\"mcp-mesh\"}\n            !=\n            kube_deployment_status_replicas_available{namespace=\"mcp-mesh\"}\n          labels:\n            severity: info\n            team: platform\n          annotations:\n            summary: \"Deployment in progress for {% raw %}{{ $labels.deployment }}{% endraw %}\"\n            description: \"{% raw %}{{ $labels.deployment }}{% endraw %} has {% raw %}{{ $value }}{% endraw %} replicas updating\"\n\n        - alert: MCP_Mesh_CertificateExpiring\n          expr: |\n            (cert_manager_certificate_expiration_timestamp_seconds - time()) / 86400 &lt; 30\n          labels:\n            severity: info\n            team: platform\n          annotations:\n            summary: \"Certificate expiring soon\"\n            description: \"Certificate {% raw %}{{ $labels.name }}{% endraw %} expires in {% raw %}{{ $value }}{% endraw %} days\"\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-4-create-runbooks","title":"Step 4: Create Runbooks","text":"<p>Document response procedures for each alert:</p> <pre><code># runbooks/registry-down.md\n\n# MCP Mesh Registry Down Runbook\n\n## Alert: MCP_Mesh_RegistryDown\n\n### Impact\n\n- New agents cannot register\n- Existing agents cannot discover services\n- Service mesh functionality degraded\n\n### Verification Steps\n\n1. Check registry pod status:\n   ```bash\n   kubectl get pods -n mcp-mesh -l app=mcp-mesh-registry\n   ```\n</code></pre> <ol> <li>Check recent events:</li> </ol> <pre><code>kubectl get events -n mcp-mesh --sort-by='.lastTimestamp' | grep registry\n</code></pre> <ol> <li>Check logs:    <pre><code>kubectl logs -n mcp-mesh -l app=mcp-mesh-registry --tail=100\n</code></pre></li> </ol>"},{"location":"07-observability/05-alerting-slos/#resolution-steps","title":"Resolution Steps","text":""},{"location":"07-observability/05-alerting-slos/#step-1-quick-recovery","title":"Step 1: Quick Recovery","text":"<pre><code># Try restarting the registry\nkubectl rollout restart deployment/mcp-mesh-registry -n mcp-mesh\n\n# Wait for rollout\nkubectl rollout status deployment/mcp-mesh-registry -n mcp-mesh\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-2-check-database-connection","title":"Step 2: Check Database Connection","text":"<pre><code># Test database connectivity\nkubectl exec -n mcp-mesh deployment/mcp-mesh-registry -- \\\n  pg_isready -h $DB_HOST -p $DB_PORT\n\n# Check database status\nkubectl get pods -n mcp-mesh -l app=postgresql\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-3-scale-out","title":"Step 3: Scale Out","text":"<pre><code># If single pod issue, scale up\nkubectl scale deployment/mcp-mesh-registry -n mcp-mesh --replicas=3\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-4-failover-to-backup","title":"Step 4: Failover to Backup","text":"<pre><code># If primary region down, failover to secondary\nkubectl apply -f /emergency/registry-failover.yaml\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#post-incident","title":"Post-Incident","text":"<ol> <li>Create incident report</li> <li>Update monitoring thresholds if needed</li> <li>Review registry HA configuration</li> <li>Schedule postmortem meeting</li> </ol> <pre><code>### Step 5: Implement SLO Dashboards\n\nCreate comprehensive SLO monitoring dashboards:\n\n```json\n{\n  \"dashboard\": {\n    \"title\": \"MCP Mesh SLO Overview\",\n    \"uid\": \"mcp-mesh-slo\",\n    \"panels\": [\n      {\n        \"title\": \"Error Budget Status\",\n        \"type\": \"stat\",\n        \"gridPos\": {\"h\": 8, \"w\": 8, \"x\": 0, \"y\": 0},\n        \"targets\": [\n          {\n            \"expr\": \"(1 - ((1 - 0.999) - (1 - avg_over_time(mcp_mesh:slo:availability[30d])))) * 100\",\n            \"legendFormat\": \"Remaining Budget %\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\"color\": \"red\", \"value\": 0},\n                {\"color\": \"yellow\", \"value\": 20},\n                {\"color\": \"green\", \"value\": 50}\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"SLO Compliance - 28 Days\",\n        \"type\": \"gauge\",\n        \"gridPos\": {\"h\": 8, \"w\": 8, \"x\": 8, \"y\": 0},\n        \"targets\": [\n          {\n            \"expr\": \"avg_over_time(mcp_mesh:slo:availability[28d]) * 100\",\n            \"legendFormat\": \"Availability\"\n          }\n        ],\n        \"options\": {\n          \"showThresholdLabels\": true,\n          \"showThresholdMarkers\": true\n        },\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"min\": 95,\n            \"max\": 100,\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\"color\": \"red\", \"value\": 95},\n                {\"color\": \"yellow\", \"value\": 99},\n                {\"color\": \"green\", \"value\": 99.9}\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"Burn Rate\",\n        \"type\": \"timeseries\",\n        \"gridPos\": {\"h\": 8, \"w\": 8, \"x\": 16, \"y\": 0},\n        \"targets\": [\n          {\n            \"expr\": \"mcp_mesh:slo:error_budget_burn_rate:1h\",\n            \"legendFormat\": \"1h burn rate\"\n          },\n          {\n            \"expr\": \"mcp_mesh:slo:error_budget_burn_rate:24h\",\n            \"legendFormat\": \"24h burn rate\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"custom\": {\n              \"drawStyle\": \"line\",\n              \"lineWidth\": 2,\n              \"fillOpacity\": 10\n            },\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\"color\": \"green\", \"value\": 0},\n                {\"color\": \"yellow\", \"value\": 1},\n                {\"color\": \"red\", \"value\": 10}\n              ]\n            }\n          }\n        }\n      },\n\n      {\n        \"title\": \"SLI Trends\",\n        \"type\": \"timeseries\",\n        \"gridPos\": {\"h\": 10, \"w\": 24, \"x\": 0, \"y\": 8},\n        \"targets\": [\n          {\n            \"expr\": \"mcp_mesh:sli:availability\",\n            \"legendFormat\": \"Availability\"\n          },\n          {\n            \"expr\": \"100 - (mcp_mesh:sli:error_rate * 100)\",\n            \"legendFormat\": \"Success Rate\"\n          },\n          {\n            \"expr\": \"(mcp_mesh:sli:latency_p95 &lt; 0.5) * 100\",\n            \"legendFormat\": \"Latency SLI\"\n          }\n        ],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"min\": 90,\n            \"max\": 100\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#step-6-implement-alert-routing","title":"Step 6: Implement Alert Routing","text":"<p>Configure intelligent alert routing:</p> <pre><code># alertmanager-config.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: alertmanager-mcp-mesh\n  namespace: monitoring\nstringData:\n  alertmanager.yaml: |\n    global:\n      resolve_timeout: 5m\n      slack_api_url: ${SLACK_API_URL}\n      pagerduty_url: https://events.pagerduty.com/v2/enqueue\n\n    # Alert routing tree\n    route:\n      group_by: ['alertname', 'cluster', 'service']\n      group_wait: 10s\n      group_interval: 10s\n      repeat_interval: 12h\n      receiver: 'default'\n\n      routes:\n      # Critical alerts - page immediately\n      - match:\n          severity: critical\n        receiver: pagerduty-critical\n        group_wait: 0s\n        repeat_interval: 1h\n        continue: true\n\n      # Critical alerts also go to Slack\n      - match:\n          severity: critical\n        receiver: slack-critical\n\n      # Warning alerts - ticket only\n      - match:\n          severity: warning\n        receiver: slack-warnings\n        group_wait: 5m\n        group_interval: 5m\n        repeat_interval: 4h\n\n      # Info alerts - dashboard only\n      - match:\n          severity: info\n        receiver: slack-info\n        group_wait: 30m\n        group_interval: 30m\n        repeat_interval: 24h\n\n      # Team-specific routing\n      - match:\n          team: platform\n        receiver: platform-team\n        routes:\n        - match:\n            component: registry\n          receiver: registry-oncall\n\n    # Inhibition rules\n    inhibit_rules:\n    - source_match:\n        severity: 'critical'\n      target_match:\n        severity: 'warning'\n      equal: ['alertname', 'instance']\n\n    - source_match:\n        alertname: 'MCP_Mesh_RegistryDown'\n      target_match_re:\n        alertname: 'MCP_Mesh_.*'\n      equal: ['instance']\n\n    # Receivers\n    receivers:\n    - name: 'default'\n      slack_configs:\n      - channel: '#alerts-default'\n        title: 'MCP Mesh Alert'\n        text: '{% raw %}{{ range .Alerts }}{% endraw %}{% raw %}{{ .Annotations.summary }}{% endraw %}{% raw %}{{ end }}{% endraw %}'\n\n    - name: 'pagerduty-critical'\n      pagerduty_configs:\n      - service_key: ${PAGERDUTY_SERVICE_KEY}\n        description: '{% raw %}{{ .GroupLabels.alertname }}{% endraw %}: {% raw %}{{ .CommonAnnotations.summary }}{% endraw %}'\n        details:\n          firing: '{% raw %}{{ .Alerts.Firing | len }}{% endraw %}'\n          resolved: '{% raw %}{{ .Alerts.Resolved | len }}{% endraw %}'\n          labels: '{% raw %}{{ .CommonLabels }}{% endraw %}'\n        links:\n        - href: '{% raw %}{{ .CommonAnnotations.dashboard_url }}{% endraw %}'\n          text: 'Dashboard'\n        - href: '{% raw %}{{ .CommonAnnotations.runbook_url }}{% endraw %}'\n          text: 'Runbook'\n\n    - name: 'slack-critical'\n      slack_configs:\n      - channel: '#alerts-critical'\n        color: 'danger'\n        title: '\ud83d\udea8 CRITICAL: {% raw %}{{ .GroupLabels.alertname }}{% endraw %}'\n        text: |\n          {% raw %}{{ range .Alerts.Firing }}{% endraw %}\n          *Alert:* {% raw %}{{ .Annotations.summary }}{% endraw %}\n          *Description:* {% raw %}{{ .Annotations.description }}{% endraw %}\n          *Runbook:* &lt;{% raw %}{{ .Annotations.runbook_url }}{% endraw %}|View Runbook&gt;\n          *Dashboard:* &lt;{% raw %}{{ .Annotations.dashboard_url }}{% endraw %}|View Dashboard&gt;\n          {% raw %}{{ end }}{% endraw %}\n        send_resolved: true\n\n    - name: 'slack-warnings'\n      slack_configs:\n      - channel: '#alerts-warning'\n        color: 'warning'\n        title: '\u26a0\ufe0f Warning: {% raw %}{{ .GroupLabels.alertname }}{% endraw %}'\n        text: '{% raw %}{{ .CommonAnnotations.summary }}{% endraw %}'\n        send_resolved: true\n\n    - name: 'platform-team'\n      webhook_configs:\n      - url: 'http://incident-bot:8080/webhook'\n        send_resolved: true\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#configuration-options","title":"Configuration Options","text":"Component Setting Description SLO Target <code>99.9%</code> Availability objective Error Budget <code>0.1%</code> Allowable downtime Burn Rate Alert <code>14.4x</code> 1-hour burn rate threshold Alert Evaluation <code>30s</code> How often to evaluate rules Alert Delay <code>5m</code> Wait before firing"},{"location":"07-observability/05-alerting-slos/#examples","title":"Examples","text":""},{"location":"07-observability/05-alerting-slos/#example-1-custom-slo-for-business-metrics","title":"Example 1: Custom SLO for Business Metrics","text":"<pre><code># business-slo.yaml\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: business-slos\nspec:\n  service: \"mcp-mesh-business\"\n  slos:\n    - name: \"transaction-success\"\n      objective: 99.95\n      description: \"99.95% of payment transactions should succeed\"\n\n      sli:\n        raw:\n          error_ratio_query: |\n            sum(rate(mcp_mesh_business_transactions_total{status=\"failed\"}[{% raw %}{{.window}}{% endraw %}]))\n            /\n            sum(rate(mcp_mesh_business_transactions_total[{% raw %}{{.window}}{% endraw %}]))\n\n      alerting:\n        name: BusinessTransactionFailures\n        page_alert:\n          labels:\n            severity: critical\n            team: business\n\n    - name: \"api-cost-efficiency\"\n      objective: 95\n      description: \"95% of API calls should stay under cost threshold\"\n\n      sli:\n        raw:\n          error_ratio_query: |\n            (\n              sum(rate(mcp_mesh_api_calls_total{cost_exceeded=\"true\"}[{% raw %}{{.window}}{% endraw %}]))\n              /\n              sum(rate(mcp_mesh_api_calls_total[{% raw %}{{.window}}{% endraw %}]))\n            )\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#example-2-adaptive-alerting","title":"Example 2: Adaptive Alerting","text":"<pre><code># adaptive_alerting.py\nfrom prometheus_api_client import PrometheusConnect\nimport numpy as np\nfrom datetime import datetime, timedelta\n\nclass AdaptiveAlerting:\n    \"\"\"Implement adaptive thresholds based on historical data\"\"\"\n\n    def __init__(self, prometheus_url: str):\n        self.prom = PrometheusConnect(url=prometheus_url)\n\n    def calculate_dynamic_threshold(self, metric: str,\n                                  lookback_days: int = 7,\n                                  sensitivity: float = 3.0):\n        \"\"\"Calculate dynamic threshold using statistical methods\"\"\"\n\n        # Get historical data\n        end_time = datetime.now()\n        start_time = end_time - timedelta(days=lookback_days)\n\n        # Query data points\n        data = self.prom.custom_query_range(\n            query=metric,\n            start_time=start_time,\n            end_time=end_time,\n            step='5m'\n        )\n\n        if not data:\n            return None\n\n        # Extract values\n        values = [float(point[1]) for point in data[0]['values']]\n\n        # Calculate statistics\n        mean = np.mean(values)\n        std = np.std(values)\n\n        # Calculate percentiles\n        p50 = np.percentile(values, 50)\n        p95 = np.percentile(values, 95)\n        p99 = np.percentile(values, 99)\n\n        # Dynamic threshold based on time of day\n        hour = datetime.now().hour\n        if 9 &lt;= hour &lt;= 17:  # Business hours\n            threshold = mean + (sensitivity * std)\n        else:  # Off hours\n            threshold = mean + ((sensitivity + 1) * std)\n\n        return {\n            'threshold': threshold,\n            'mean': mean,\n            'std': std,\n            'p50': p50,\n            'p95': p95,\n            'p99': p99,\n            'current_hour': hour\n        }\n\n    def generate_alert_rule(self, metric_name: str,\n                          threshold_info: dict):\n        \"\"\"Generate Prometheus alert rule with dynamic threshold\"\"\"\n\n        return f\"\"\"\n        - alert: {metric_name}_DynamicThreshold\n          expr: |\n            {metric_name} &gt; {threshold_info['threshold']}\n          for: 5m\n          labels:\n            severity: warning\n            threshold_type: dynamic\n          annotations:\n            summary: \"{metric_name} exceeds dynamic threshold\"\n            description: |\n              Current value: {% raw %}{{{{ $value }}{% endraw %}}}\n              Dynamic threshold: {threshold_info['threshold']:.2f}\n              Based on mean: {threshold_info['mean']:.2f} (\u00b1{threshold_info['std']:.2f})\n              P95: {threshold_info['p95']:.2f}, P99: {threshold_info['p99']:.2f}\n        \"\"\"\n\n# Usage\nalerting = AdaptiveAlerting(\"http://prometheus:9090\")\n\n# Calculate dynamic threshold for request rate\nthreshold = alerting.calculate_dynamic_threshold(\n    \"rate(mcp_mesh_requests_total[5m])\"\n)\n\nprint(f\"Dynamic threshold: {threshold['threshold']:.2f} req/s\")\nprint(f\"Based on historical mean: {threshold['mean']:.2f} (\u00b1{threshold['std']:.2f})\")\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#best-practices","title":"Best Practices","text":"<ol> <li>Start with Loose SLOs: Tighten gradually based on data</li> <li>Multi-Window Alerts: Use multiple burn rate windows</li> <li>Actionable Alerts: Every alert should have clear actions</li> <li>Regular Review: Review SLOs and alerts monthly</li> <li>Blameless Culture: Focus on improvement, not blame</li> </ol>"},{"location":"07-observability/05-alerting-slos/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"07-observability/05-alerting-slos/#pitfall-1-too-many-alerts","title":"Pitfall 1: Too Many Alerts","text":"<p>Problem: Alert fatigue from non-actionable alerts</p> <p>Solution: Implement alert quality metrics:</p> <pre><code># Track alert quality\n- record: alerts:quality:actionable_ratio\n  expr: |\n    sum(rate(alertmanager_alerts_resolved{resolved_by=\"human\"}[7d]))\n    /\n    sum(rate(alertmanager_alerts_resolved[7d]))\n\n# Remove alerts with low actionable ratio\n- alert: AlertQualityLow\n  expr: alerts:quality:actionable_ratio &lt; 0.5\n  annotations:\n    summary: \"Alert {% raw %}{{ $labels.alertname }}{% endraw %} has low actionable ratio\"\n    description: \"Only {% raw %}{{ $value | humanizePercentage }}{% endraw %} of alerts were actionable\"\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#pitfall-2-unrealistic-slos","title":"Pitfall 2: Unrealistic SLOs","text":"<p>Problem: SLOs set too high, constantly violated</p> <p>Solution: Base SLOs on historical performance:</p> <pre><code># Calculate realistic SLO based on past performance\n# Use P90 of historical availability as starting point\nquantile_over_time(0.9,\n  avg_over_time(\n    up{job=\"mcp-mesh\"}[1d]\n  )[30d:1d]\n) * 100\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#testing","title":"Testing","text":""},{"location":"07-observability/05-alerting-slos/#test-alert-rules","title":"Test Alert Rules","text":"<pre><code># test_alerts.py\nimport pytest\nfrom prometheus_api_client import PrometheusConnect\n\ndef test_alert_rules():\n    \"\"\"Test that alert rules are valid and fire correctly\"\"\"\n    prom = PrometheusConnect(url=\"http://localhost:9090\")\n\n    # Get all configured alerts\n    alerts = prom.custom_query(\"ALERTS\")\n\n    # Test specific alert conditions\n    test_cases = [\n        {\n            \"alert\": \"MCP_Mesh_HighErrorRate\",\n            \"condition\": \"rate(mcp_mesh_requests_total{status='error'}[5m]) &gt; 0.05\",\n            \"should_fire\": True\n        },\n        {\n            \"alert\": \"MCP_Mesh_RegistryDown\",\n            \"condition\": \"up{job='mcp-mesh-registry'} == 0\",\n            \"should_fire\": False  # Should not fire in healthy system\n        }\n    ]\n\n    for test in test_cases:\n        result = prom.custom_query(test[\"condition\"])\n        if test[\"should_fire\"]:\n            assert len(result) &gt; 0, f\"{test['alert']} should fire\"\n        else:\n            assert len(result) == 0, f\"{test['alert']} should not fire\"\n\ndef test_slo_calculations():\n    \"\"\"Test SLO calculation accuracy\"\"\"\n    prom = PrometheusConnect(url=\"http://localhost:9090\")\n\n    # Test availability SLO\n    availability = prom.custom_query(\n        \"avg_over_time(mcp_mesh:slo:availability[1h])\"\n    )\n    assert 0 &lt;= float(availability[0]['value'][1]) &lt;= 1\n\n    # Test error budget\n    error_budget = prom.custom_query(\n        \"mcp_mesh:slo:error_budget_remaining\"\n    )\n    assert 0 &lt;= float(error_budget[0]['value'][1]) &lt;= 1\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#chaos-testing-for-alerts","title":"Chaos Testing for Alerts","text":"<pre><code>#!/bin/bash\n# chaos-test-alerts.sh\n\necho \"Testing alert firing conditions...\"\n\n# Test 1: High error rate\necho \"Injecting errors...\"\nfor i in {1..100}; do\n  curl -X POST http://localhost:8080/error-injection \\\n    -d '{\"error_rate\": 0.1, \"duration\": \"60s\"}'\ndone\n\n# Wait for alert\nsleep 120\nkubectl logs -n monitoring alertmanager-0 | grep \"MCP_Mesh_HighErrorRate\"\n\n# Test 2: Registry failure\necho \"Stopping registry...\"\nkubectl scale deployment mcp-mesh-registry -n mcp-mesh --replicas=0\n\n# Check if alert fires within 5 minutes\nsleep 300\nkubectl logs -n monitoring alertmanager-0 | grep \"MCP_Mesh_RegistryDown\"\n\n# Restore\nkubectl scale deployment mcp-mesh-registry -n mcp-mesh --replicas=3\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"07-observability/05-alerting-slos/#monitor-alert-health","title":"Monitor Alert Health","text":"<pre><code># alert-health-dashboard.json\n{\n  \"dashboard\":\n    {\n      \"title\": \"Alert Health\",\n      \"panels\":\n        [\n          {\n            \"title\": \"Alert Firing Rate\",\n            \"targets\":\n              [\n                {\n                  \"expr\": \"sum by (alertname) (rate(alertmanager_notifications_total[5m]))\",\n                },\n              ],\n          },\n          {\n            \"title\": \"Alert Resolution Time\",\n            \"targets\":\n              [\n                {\n                  \"expr\": \"histogram_quantile(0.95, alertmanager_alert_resolution_duration_seconds_bucket)\",\n                },\n              ],\n          },\n          {\n            \"title\": \"Failed Notifications\",\n            \"targets\":\n              [\n                {\n                  \"expr\": \"sum by (integration) (rate(alertmanager_notifications_failed_total[5m]))\",\n                },\n              ],\n          },\n        ],\n    },\n}\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#debug-slo-violations","title":"Debug SLO Violations","text":"<pre><code># Check SLO status\ncurl -s http://prometheus:9090/api/v1/query \\\n  -d 'query=mcp_mesh:slo:error_budget_remaining' | jq\n\n# Get burn rate history\ncurl -s http://prometheus:9090/api/v1/query_range \\\n  -d 'query=mcp_mesh:slo:error_budget_burn_rate:1h' \\\n  -d 'start=now-24h' \\\n  -d 'end=now' \\\n  -d 'step=5m' | jq\n\n# Find when budget was exhausted\ncurl -s http://prometheus:9090/api/v1/query \\\n  -d 'query=mcp_mesh:slo:error_budget_remaining == 0' | jq\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"07-observability/05-alerting-slos/#issue-1-alerts-not-firing","title":"Issue 1: Alerts Not Firing","text":"<p>Symptoms: Known issues but no alerts received</p> <p>Cause: Misconfigured rules or routing</p> <p>Solution:</p> <pre><code># Check if alerts are pending\nkubectl exec -n monitoring prometheus-0 -- \\\n  promtool query instant http://localhost:9090 'ALERTS{alertstate=\"pending\"}'\n\n# Verify AlertManager configuration\nkubectl logs -n monitoring alertmanager-0 | grep error\n\n# Test alert routing\namtool config routes test \\\n  --config.file=/etc/alertmanager/alertmanager.yaml \\\n  --tree \\\n  --verify.receivers=slack-critical \\\n  severity=critical alertname=TestAlert\n</code></pre>"},{"location":"07-observability/05-alerting-slos/#issue-2-slo-always-violated","title":"Issue 2: SLO Always Violated","text":"<p>Symptoms: SLO compliance always below target</p> <p>Cause: Unrealistic objectives or calculation errors</p> <p>Solution:</p> <pre><code># Debug SLO calculation\n# Check raw error ratio\nsum(rate(mcp_mesh_requests_total{status=\"error\"}[5m]))\n/\nsum(rate(mcp_mesh_requests_total[5m]))\n\n# Check if data exists\nsum(rate(mcp_mesh_requests_total[5m])) &gt; 0\n\n# Verify time windows\nincrease(mcp_mesh_requests_total[30d])\n</code></pre> <p>For more issues, see the section troubleshooting guide.</p>"},{"location":"07-observability/05-alerting-slos/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>SLO Window: Minimum practical window is 28 days</li> <li>Alert Delay: Minimum 30s evaluation interval</li> <li>Burn Rate: Requires sufficient traffic for accuracy</li> <li>Multi-Region: SLOs are per-region, not global</li> </ul>"},{"location":"07-observability/05-alerting-slos/#todo","title":"\ud83d\udcdd TODO","text":"<ul> <li> Add ML-based anomaly detection</li> <li> Implement alert correlation</li> <li> Create mobile app integration</li> <li> Add voice call escalation</li> <li> Document multi-region SLOs</li> </ul>"},{"location":"07-observability/05-alerting-slos/#summary","title":"Summary","text":"<p>You now have comprehensive alerting and SLOs:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd11 Well-defined SLIs and SLOs</li> <li>\ud83d\udd11 Multi-tier alerting strategy</li> <li>\ud83d\udd11 Error budget tracking</li> <li>\ud83d\udd11 Runbooks for every alert</li> </ul>"},{"location":"07-observability/05-alerting-slos/#next-steps","title":"Next Steps","text":"<p>Complete the observability section with troubleshooting guide.</p> <p>Continue to Observability Troubleshooting \u2192</p> <p>\ud83d\udca1 Tip: Use error budget policies to automatically restrict deployments when budget is low</p> <p>\ud83d\udcda Reference: Google SRE Book - Alerting</p> <p>\ud83e\uddea Try It: Implement a game day to test your alerting and response procedures</p>"},{"location":"07-observability/troubleshooting/","title":"Observability Troubleshooting","text":"<p>Comprehensive guide to diagnosing and resolving observability issues in MCP Mesh</p>"},{"location":"07-observability/troubleshooting/#overview","title":"Overview","text":"<p>This troubleshooting guide covers common issues encountered when implementing observability for MCP Mesh. Each issue includes symptoms, root causes, diagnostic steps, and solutions. The guide is organized by observability component to help you quickly find relevant solutions.</p>"},{"location":"07-observability/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this diagnostic script first:</p> <pre><code>#!/bin/bash\n# observability-diagnostics.sh\n\necho \"=== MCP Mesh Observability Diagnostics ===\"\necho \"Date: $(date)\"\necho \"\"\n\n# Check Prometheus\necho \"1. Prometheus Status:\"\nkubectl get pods -n monitoring -l app.kubernetes.io/name=prometheus\nkubectl top pods -n monitoring -l app.kubernetes.io/name=prometheus\n\n# Check Grafana\necho -e \"\\n2. Grafana Status:\"\nkubectl get pods -n monitoring -l app.kubernetes.io/name=grafana\ncurl -s http://localhost:3000/api/health || echo \"Grafana not accessible\"\n\n# Check Jaeger\necho -e \"\\n3. Jaeger Status:\"\nkubectl get pods -n observability -l app.kubernetes.io/name=jaeger\ncurl -s http://localhost:16686/api/services || echo \"Jaeger not accessible\"\n\n# Check Elasticsearch\necho -e \"\\n4. Elasticsearch Status:\"\nkubectl get pods -n logging -l app.kubernetes.io/name=elasticsearch\ncurl -s http://localhost:9200/_cluster/health?pretty -u elastic:changeme || echo \"Elasticsearch not accessible\"\n\n# Check metrics collection\necho -e \"\\n5. Metrics Collection:\"\ncurl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets | length' || echo \"0\"\n\n# Check for recent errors\necho -e \"\\n6. Recent Errors:\"\nkubectl logs -n monitoring -l app.kubernetes.io/name=prometheus --tail=20 | grep -i error || echo \"No errors\"\nkubectl logs -n logging -l app.kubernetes.io/name=fluentd --tail=20 | grep -i error || echo \"No errors\"\n\n# Check resource usage\necho -e \"\\n7. Resource Usage:\"\nkubectl top nodes\n</code></pre>"},{"location":"07-observability/troubleshooting/#common-issues-by-component","title":"Common Issues by Component","text":""},{"location":"07-observability/troubleshooting/#prometheus-issues","title":"\ud83d\udd0d Prometheus Issues","text":""},{"location":"07-observability/troubleshooting/#issue-1-high-memory-usage","title":"Issue 1: High Memory Usage","text":"<p>Symptoms:</p> <ul> <li>Prometheus pod OOMKilled</li> <li>Slow query performance</li> <li>Incomplete metrics data</li> </ul> <p>Diagnosis:</p> <pre><code># Check memory usage\nkubectl top pod -n monitoring -l app.kubernetes.io/name=prometheus\n\n# Check TSDB stats\nkubectl exec -n monitoring prometheus-0 -- \\\n  promtool tsdb analyze /prometheus\n\n# Check cardinality\ncurl -s http://localhost:9090/api/v1/label/__name__/values | \\\n  jq -r '.data | length'\n</code></pre> <p>Solution:</p> <pre><code># Reduce cardinality\n# 1. Drop unnecessary metrics\nmetricRelabelings:\n  - sourceLabels: [__name__]\n    regex: \"go_.*|process_.*\"\n    action: drop\n\n  # 2. Limit label values\n  - sourceLabels: [path]\n    regex: \"/api/v1/users/[0-9]+\"\n    targetLabel: path\n    replacement: \"/api/v1/users/{id}\"\n\n# 3. Increase memory limits\nresources:\n  limits:\n    memory: 8Gi\n  requests:\n    memory: 4Gi\n\n# 4. Reduce retention\nprometheusSpec:\n  retention: 15d\n  retentionSize: 50GB\n</code></pre>"},{"location":"07-observability/troubleshooting/#issue-2-missing-metrics","title":"Issue 2: Missing Metrics","text":"<p>Symptoms:</p> <ul> <li>No data in Grafana dashboards</li> <li>Targets showing as DOWN</li> <li>ServiceMonitor not discovered</li> </ul> <p>Diagnosis:</p> <pre><code># Check targets\ncurl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | {job: .job, health: .health}'\n\n# Check ServiceMonitor discovery\nkubectl get servicemonitor -A\nkubectl describe prometheus -n monitoring | grep -A10 \"Service Monitor Selector\"\n\n# Test metric endpoint\nkubectl port-forward -n mcp-mesh svc/mcp-mesh-registry 8080\ncurl http://localhost:8080/metrics\n</code></pre> <p>Solution:</p> <pre><code># Fix ServiceMonitor labels\nkubectl label servicemonitor mcp-mesh-registry -n mcp-mesh \\\n  release=prometheus\n\n# Fix network policies\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-prometheus-scrape\n  namespace: mcp-mesh\nspec:\n  podSelector: {}\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: monitoring\n    ports:\n    - protocol: TCP\n      port: 8080\n\n# Fix service discovery\n# Ensure Prometheus can discover all namespaces\nprometheusSpec:\n  serviceMonitorNamespaceSelector: {}\n  serviceMonitorSelector: {}\n</code></pre>"},{"location":"07-observability/troubleshooting/#grafana-issues","title":"\ud83d\udcca Grafana Issues","text":""},{"location":"07-observability/troubleshooting/#issue-3-dashboard-not-loading","title":"Issue 3: Dashboard Not Loading","text":"<p>Symptoms:</p> <ul> <li>\"No Data\" in panels</li> <li>Timeout errors</li> <li>Template variables not working</li> </ul> <p>Diagnosis:</p> <pre><code># Check data source\ncurl -s -H \"Authorization: Bearer $GRAFANA_API_KEY\" \\\n  http://localhost:3000/api/datasources\n\n# Test query\ncurl -G http://localhost:9090/api/v1/query \\\n  --data-urlencode 'query=up{job=\"mcp-mesh-registry\"}'\n\n# Check Grafana logs\nkubectl logs -n monitoring deployment/prometheus-grafana | grep -i error\n</code></pre> <p>Solution:</p> <pre><code>// Fix data source configuration\n{\n  \"name\": \"Prometheus\",\n  \"type\": \"prometheus\",\n  \"url\": \"http://prometheus-operated:9090\",\n  \"access\": \"proxy\",\n  \"jsonData\": {\n    \"timeInterval\": \"30s\",\n    \"queryTimeout\": \"60s\",\n    \"httpMethod\": \"POST\"\n  }\n}\n\n// Fix template variables\n{\n  \"templating\": {\n    \"list\": [{\n      \"name\": \"namespace\",\n      \"type\": \"query\",\n      \"datasource\": \"Prometheus\",\n      \"query\": \"label_values(up, namespace)\",\n      \"refresh\": 2,\n      \"regex\": \"mcp-mesh.*\",\n      \"sort\": 1\n    }]\n  }\n}\n</code></pre>"},{"location":"07-observability/troubleshooting/#issue-4-slow-dashboard-performance","title":"Issue 4: Slow Dashboard Performance","text":"<p>Symptoms:</p> <ul> <li>Long load times</li> <li>Browser hanging</li> <li>Query timeouts</li> </ul> <p>Solution:</p> <pre><code># Use recording rules instead of complex queries\n# Bad - complex query in dashboard\nhistogram_quantile(0.95,\n  sum by (agent, le) (\n    rate(mcp_mesh_request_duration_seconds_bucket[$__interval])\n  )\n)\n\n# Good - pre-computed recording rule\nmcp_mesh:request_duration:p95\n\n# Optimize time ranges\n# Use $__interval instead of fixed intervals\nrate(metric[$__interval])\n\n# Limit query results\ntopk(10, metric)\n</code></pre>"},{"location":"07-observability/troubleshooting/#distributed-tracing-issues","title":"\ud83d\udd0e Distributed Tracing Issues","text":""},{"location":"07-observability/troubleshooting/#issue-5-traces-not-appearing","title":"Issue 5: Traces Not Appearing","text":"<p>Symptoms:</p> <ul> <li>No traces in Jaeger UI</li> <li>Broken trace continuity</li> <li>Missing spans</li> </ul> <p>Diagnosis:</p> <pre><code># Check OTEL collector\nkubectl logs -n observability deployment/otel-collector | grep -E \"receiver|exporter\"\n\n# Verify trace export\ncurl -X POST http://localhost:4318/v1/traces \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"resourceSpans\": []}'\n\n# Check Jaeger ingestion\nkubectl port-forward -n observability svc/mcp-mesh-jaeger-collector 14268\ncurl http://localhost:14268/api/sampling?service=test\n</code></pre> <p>Solution:</p> <pre><code># Fix trace context propagation\nfrom opentelemetry.propagate import set_global_textmap\nfrom opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator\n\n# Set up propagator\nset_global_textmap(TraceContextTextMapPropagator())\n\n# Ensure context is propagated in async code\nimport contextvars\nfrom opentelemetry import trace, context\n\ntrace_context = contextvars.ContextVar('trace_context')\n\nasync def parent_operation():\n    with tracer.start_as_current_span(\"parent\") as span:\n        ctx = context.get_current()\n        await child_operation(ctx)\n\nasync def child_operation(parent_ctx):\n    # Restore parent context\n    token = context.attach(parent_ctx)\n    try:\n        with tracer.start_as_current_span(\"child\") as span:\n            # Span will be properly linked\n            pass\n    finally:\n        context.detach(token)\n</code></pre>"},{"location":"07-observability/troubleshooting/#issue-6-high-trace-volume","title":"Issue 6: High Trace Volume","text":"<p>Symptoms:</p> <ul> <li>Storage filling up quickly</li> <li>Slow Jaeger queries</li> <li>Collector dropping traces</li> </ul> <p>Solution:</p> <pre><code># Implement intelligent sampling\nprocessors:\n  tail_sampling:\n    decision_wait: 10s\n    num_traces: 100000\n    expected_new_traces_per_sec: 1000\n    policies:\n      # Always sample errors\n      - name: error-sampler\n        type: status_code\n        status_code:\n          status_codes: [ERROR]\n\n      # Sample slow traces\n      - name: latency-sampler\n        type: latency\n        latency:\n          threshold_ms: 1000\n\n      # Rate limit per service\n      - name: service-rate-limit\n        type: rate_limiting\n        rate_limiting:\n          spans_per_second: 100\n\n      # Probabilistic fallback\n      - name: probabilistic-sampler\n        type: probabilistic\n        probabilistic:\n          sampling_percentage: 1\n</code></pre>"},{"location":"07-observability/troubleshooting/#centralized-logging-issues","title":"\ud83d\udcdd Centralized Logging Issues","text":""},{"location":"07-observability/troubleshooting/#issue-7-logs-not-indexed","title":"Issue 7: Logs Not Indexed","text":"<p>Symptoms:</p> <ul> <li>Logs not appearing in Kibana</li> <li>Fluentd errors</li> <li>Index pattern missing</li> </ul> <p>Diagnosis:</p> <pre><code># Check Fluentd status\nkubectl logs -n logging daemonset/fluentd | tail -50\n\n# Check Elasticsearch indices\ncurl -s http://localhost:9200/_cat/indices?v -u elastic:changeme\n\n# Test log parsing\necho '{\"level\":\"INFO\",\"msg\":\"test\",\"timestamp\":\"2024-01-15T10:00:00Z\"}' | \\\n  kubectl exec -n logging fluentd-xxxxx -- \\\n  fluent-cat test.log\n</code></pre> <p>Solution:</p> <pre><code># Fix Fluentd parsing\n&lt;parse&gt;\n  @type multi_format\n  # JSON logs\n  &lt;pattern&gt;\n    format json\n    time_key timestamp\n    time_format %Y-%m-%dT%H:%M:%S.%NZ\n  &lt;/pattern&gt;\n  # Plain text fallback\n  &lt;pattern&gt;\n    format none\n    message_key log\n  &lt;/pattern&gt;\n&lt;/parse&gt;\n\n# Fix index template\nPUT _index_template/mcp-mesh-logs\n{\n  \"index_patterns\": [\"mcp-mesh-logs-*\"],\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 3,\n      \"number_of_replicas\": 1\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"timestamp\": {\n          \"type\": \"date\"\n        },\n        \"level\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"07-observability/troubleshooting/#issue-8-log-storage-full","title":"Issue 8: Log Storage Full","text":"<p>Symptoms:</p> <ul> <li>Elasticsearch disk usage high</li> <li>Write failures</li> <li>Slow queries</li> </ul> <p>Solution:</p> <pre><code># Implement lifecycle policy\nPUT _ilm/policy/mcp-mesh-logs-policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_age\": \"1d\",\n            \"max_size\": \"50GB\"\n          }\n        }\n      },\n      \"warm\": {\n        \"min_age\": \"2d\",\n        \"actions\": {\n          \"shrink\": {\n            \"number_of_shards\": 1\n          },\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}\n\n# Force merge old indices\nPOST /mcp-mesh-logs-2024.01.*/_forcemerge?max_num_segments=1\n\n# Delete old data\nDELETE /mcp-mesh-logs-2023.*\n</code></pre>"},{"location":"07-observability/troubleshooting/#alerting-issues","title":"\ud83d\udea8 Alerting Issues","text":""},{"location":"07-observability/troubleshooting/#issue-9-alerts-not-firing","title":"Issue 9: Alerts Not Firing","text":"<p>Symptoms:</p> <ul> <li>Known problems but no alerts</li> <li>Alerts stuck in pending</li> <li>No notifications received</li> </ul> <p>Diagnosis:</p> <pre><code># Check alert rules\nkubectl exec -n monitoring prometheus-0 -- \\\n  promtool check rules /etc/prometheus/rules/*.yaml\n\n# Check pending alerts\ncurl -s http://localhost:9090/api/v1/rules | \\\n  jq '.data.groups[].rules[] | select(.state==\"pending\")'\n\n# Check AlertManager\nkubectl logs -n monitoring alertmanager-0\ncurl -s http://localhost:9093/api/v1/alerts\n</code></pre> <p>Solution:</p> <pre><code># Fix alert expressions\n# Ensure data exists\n- alert: ServiceDown\n  expr: up{job=\"mcp-mesh-registry\"} == 0 or absent(up{job=\"mcp-mesh-registry\"})\n  for: 2m\n\n# Fix AlertManager routing\nroute:\n  receiver: 'default'\n  group_by: ['alertname', 'cluster']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n\n# Test configuration\namtool check-config alertmanager.yaml\namtool config routes test --config.file=alertmanager.yaml\n</code></pre>"},{"location":"07-observability/troubleshooting/#issue-10-alert-storm","title":"Issue 10: Alert Storm","text":"<p>Symptoms:</p> <ul> <li>Hundreds of alerts firing</li> <li>Notification channels flooded</li> <li>Real issues lost in noise</li> </ul> <p>Solution:</p> <pre><code># Implement alert grouping\nroute:\n  group_by: [\"alertname\", \"cluster\", \"service\"]\n  group_wait: 30s\n  group_interval: 5m\n\n# Add inhibition rules\ninhibit_rules:\n  - source_match:\n      severity: \"critical\"\n      alertname: \"ClusterDown\"\n    target_match_re:\n      severity: \"warning|info\"\n    equal: [\"cluster\"]\n\n  # Implement alert deduplication\n  - alert: HighErrorRate\n    expr: |\n      (\n        increase(errors_total[5m]) &gt; 100\n        AND\n        rate(errors_total[5m]) &gt; 0.05\n      )\n    # Don't alert on both conditions\n</code></pre>"},{"location":"07-observability/troubleshooting/#performance-optimization","title":"Performance Optimization","text":""},{"location":"07-observability/troubleshooting/#optimize-metric-collection","title":"Optimize Metric Collection","text":"<pre><code># Reduce scrape frequency for non-critical targets\nscrape_configs:\n  - job_name: \"mcp-mesh-agents\"\n    scrape_interval: 60s # Instead of default 30s\n\n# Drop unused metrics at collection time\nmetric_relabel_configs:\n  - source_labels: [__name__]\n    regex: \"go_gc_.*\"\n    action: drop\n</code></pre>"},{"location":"07-observability/troubleshooting/#optimize-query-performance","title":"Optimize Query Performance","text":"<pre><code># Use recording rules for expensive queries\ngroups:\n  - name: expensive_queries\n    interval: 30s\n    rules:\n    - record: instance:cpu_utilization:rate5m\n      expr: |\n        100 - (avg by (instance) (\n          irate(node_cpu_seconds_total{mode=\"idle\"}[5m])\n        ) * 100)\n</code></pre>"},{"location":"07-observability/troubleshooting/#optimize-storage","title":"Optimize Storage","text":"<pre><code># Prometheus storage optimization\n# Use compression\n--storage.tsdb.retention.size=100GB\n--storage.tsdb.wal-compression\n\n# Elasticsearch optimization\nPUT /_cluster/settings\n{\n  \"transient\": {\n    \"indices.memory.index_buffer_size\": \"20%\",\n    \"indices.queries.cache.size\": \"15%\"\n  }\n}\n</code></pre>"},{"location":"07-observability/troubleshooting/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"07-observability/troubleshooting/#prometheus-recovery","title":"Prometheus Recovery","text":"<pre><code>#!/bin/bash\n# prometheus-recovery.sh\n\n# 1. Stop Prometheus\nkubectl scale statefulset prometheus-prometheus -n monitoring --replicas=0\n\n# 2. Backup corrupted data\nkubectl exec -n monitoring prometheus-0 -- tar czf /tmp/backup.tgz /prometheus\nkubectl cp monitoring/prometheus-0:/tmp/backup.tgz ./prometheus-backup.tgz\n\n# 3. Clean WAL\nkubectl exec -n monitoring prometheus-0 -- rm -rf /prometheus/wal/*\n\n# 4. Restart\nkubectl scale statefulset prometheus-prometheus -n monitoring --replicas=1\n\n# 5. Verify\nkubectl logs -n monitoring prometheus-0 -f\n</code></pre>"},{"location":"07-observability/troubleshooting/#elasticsearch-recovery","title":"Elasticsearch Recovery","text":"<pre><code># Fix unassigned shards\nPOST /_cluster/reroute\n{\n  \"commands\": [{\n    \"allocate_empty_primary\": {\n      \"index\": \"mcp-mesh-logs-2024.01.15\",\n      \"shard\": 0,\n      \"node\": \"node-1\",\n      \"accept_data_loss\": true\n    }\n  }]\n}\n\n# Reset index\nPOST /mcp-mesh-logs-2024.01.15/_close\nPUT /mcp-mesh-logs-2024.01.15/_settings\n{\n  \"index.blocks.read_only_allow_delete\": null\n}\nPOST /mcp-mesh-logs-2024.01.15/_open\n</code></pre>"},{"location":"07-observability/troubleshooting/#monitoring-the-monitors","title":"Monitoring the Monitors","text":""},{"location":"07-observability/troubleshooting/#health-check-dashboard","title":"Health Check Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"Observability Health\",\n    \"panels\": [\n      {\n        \"title\": \"Component Status\",\n        \"targets\": [\n          { \"expr\": \"up{job=~'prometheus|grafana|jaeger-.*|elasticsearch'}\" }\n        ]\n      },\n      {\n        \"title\": \"Data Ingestion Rates\",\n        \"targets\": [\n          { \"expr\": \"rate(prometheus_tsdb_samples_appended_total[5m])\" },\n          { \"expr\": \"rate(jaeger_collector_spans_received_total[5m])\" },\n          { \"expr\": \"rate(elasticsearch_indices_indexing_index_total[5m])\" }\n        ]\n      },\n      {\n        \"title\": \"Error Rates\",\n        \"targets\": [\n          { \"expr\": \"rate(prometheus_rule_evaluation_failures_total[5m])\" },\n          { \"expr\": \"rate(grafana_api_response_status_total{code!~'2..'}[5m])\" }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"07-observability/troubleshooting/#synthetic-monitoring","title":"Synthetic Monitoring","text":"<pre><code># synthetic_monitor.py\nimport requests\nimport time\nfrom prometheus_client import Counter, Histogram, push_to_gateway\n\n# Metrics\ncheck_duration = Histogram('observability_check_duration_seconds',\n                         'Duration of observability checks',\n                         ['component'])\ncheck_failures = Counter('observability_check_failures_total',\n                        'Total observability check failures',\n                        ['component'])\n\ndef check_prometheus():\n    start = time.time()\n    try:\n        r = requests.get('http://prometheus:9090/api/v1/query',\n                        params={'query': 'up'})\n        r.raise_for_status()\n        assert len(r.json()['data']['result']) &gt; 0\n    except Exception as e:\n        check_failures.labels(component='prometheus').inc()\n        raise\n    finally:\n        check_duration.labels(component='prometheus').observe(time.time() - start)\n\ndef check_grafana():\n    start = time.time()\n    try:\n        r = requests.get('http://grafana:3000/api/health')\n        r.raise_for_status()\n        assert r.json()['database'] == 'ok'\n    except Exception as e:\n        check_failures.labels(component='grafana').inc()\n        raise\n    finally:\n        check_duration.labels(component='grafana').observe(time.time() - start)\n\n# Run checks\nif __name__ == '__main__':\n    while True:\n        check_prometheus()\n        check_grafana()\n\n        # Push metrics\n        push_to_gateway('pushgateway:9091', job='synthetic_monitor')\n\n        time.sleep(60)\n</code></pre>"},{"location":"07-observability/troubleshooting/#prevention-best-practices","title":"Prevention Best Practices","text":"<ol> <li>Capacity Planning</li> </ol> <pre><code># Monitor growth rate\nprometheus_tsdb_symbol_table_size_bytes /\nprometheus_tsdb_storage_blocks_bytes\n</code></pre> <ol> <li>Regular Maintenance</li> </ol> <pre><code># Weekly: Check cardinality\n# Monthly: Review retention policies\n# Quarterly: Capacity review\n</code></pre> <ol> <li>Testing Changes</li> </ol> <pre><code># Test recording rules\npromtool test rules tests.yml\n\n# Test alerts\npromtool check rules alerts.yml\n</code></pre> <ol> <li>Documentation</li> <li>Keep runbooks updated</li> <li>Document custom metrics</li> <li>Maintain architecture diagrams</li> </ol>"},{"location":"07-observability/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check Logs</li> </ol> <pre><code># Collect all observability logs\nfor component in prometheus grafana jaeger elasticsearch fluentd; do\n  echo \"=== $component logs ===\"\n  kubectl logs -n monitoring -l app.kubernetes.io/name=$component --tail=100\ndone &gt; observability-logs.txt\n</code></pre> <ol> <li> <p>Community Resources</p> </li> <li> <p>Prometheus: https://prometheus.io/community/</p> </li> <li>Grafana: https://community.grafana.com/</li> <li>Jaeger: https://www.jaegertracing.io/get-in-touch/</li> <li> <p>Elastic: https://discuss.elastic.co/</p> </li> <li> <p>File an Issue</p> </li> <li>Include diagnostic output</li> <li>Provide configuration files</li> <li>Describe expected vs actual behavior</li> </ol>"},{"location":"07-observability/troubleshooting/#summary","title":"Summary","text":"<p>This guide covered troubleshooting for all observability components:</p> <p>Key takeaways:</p> <ul> <li>\ud83d\udd0d Systematic diagnosis approach</li> <li>\ud83d\udd27 Component-specific solutions</li> <li>\ud83d\udcca Performance optimization techniques</li> <li>\ud83d\udea8 Emergency recovery procedures</li> </ul> <p>\ud83d\udca1 Remember: Good observability includes monitoring the monitoring stack itself</p> <p>\ud83d\udcda Reference: Component-specific troubleshooting guides in official documentation</p> <p>\ud83c\udd98 Emergency: If all monitoring is down, check node resources and kubelet logs first</p>"}]}
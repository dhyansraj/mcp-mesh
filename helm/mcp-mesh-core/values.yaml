# MCP Mesh Core Infrastructure Configuration
# This umbrella chart deploys the core components: Registry, PostgreSQL, Redis, and Observability

# Global configuration
global:
  # Namespace for all components
  namespace: mcp-mesh

# Component enablement
postgres:
  enabled: true

redis:
  enabled: true

registry:
  enabled: true

# Observability components
grafana:
  enabled: true

tempo:
  enabled: true

# PostgreSQL configuration
mcp-mesh-postgres:
  postgres:
    database: "mcpmesh"
    username: "mcpmesh"
    password: "mcpmesh123"

  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# Redis configuration
mcp-mesh-redis:
  redis:
    maxmemory: "256mb"
    maxmemoryPolicy: "allkeys-lru"

  persistence:
    enabled: false # Use emptyDir for cache

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 64Mi

# Registry configuration
mcp-mesh-registry:
  image:
    repository: mcpmesh/registry
    tag: "0.5"
  registry:
    # Database configuration (connects to PostgreSQL)
    database:
      type: "postgres"
      host: "mcp-core-mcp-mesh-postgres.mcp-mesh.svc.cluster.local" # Full DNS name for reliable resolution
      port: 5432
      name: "mcpmesh"
      username: "mcpmesh"
      password: "mcpmesh123"
      waitForDatabase: true # Wait for database to be ready before starting registry

    # Logging configuration (matches K8s examples)
    logging:
      level: "DEBUG"
      format: "json"
      debug: "true"

    # Redis configuration (optional session storage)
    redis:
      enabled: true
      host: "mcp-core-mcp-mesh-redis.mcp-mesh.svc.cluster.local" # Full DNS name for reliable resolution
      port: 6379

    # Observability configuration - matches k8s examples
    observability:
      distributedTracing:
        enabled: true
        redisUrl: "redis://mcp-core-mcp-mesh-redis.mcp-mesh.svc.cluster.local:6379"
        exporterType: "otlp"
        telemetryProtocol: "grpc"
        batchSize: "100"
        timeout: "5m"
        prettyOutput: "false"
        enableStats: "true"
        streamName: "mesh:trace"
        consumerGroup: "mcp-mesh-registry-processors"
      telemetryEndpoint: "mcp-core-mcp-mesh-tempo.mcp-mesh.svc.cluster.local:4317"

    # Additional environment variables for tracing (matches k8s examples)
    environment:
      MCP_MESH_DISTRIBUTED_TRACING_ENABLED: "true"
      TRACE_EXPORTER_TYPE: "otlp"
      TELEMETRY_PROTOCOL: "grpc"
      TRACE_BATCH_SIZE: "100"
      TRACE_TIMEOUT: "5m"
      TRACE_PRETTY_OUTPUT: "false"
      TRACE_ENABLE_STATS: "true"
      STREAM_NAME: "mesh:trace"
      CONSUMER_GROUP: "mcp-mesh-registry-processors"
      MCP_MESH_TRACE_DEBUG: "true"
      ENABLE_RESPONSE_CACHE: "true"
      ENABLE_CORS: "true"
      ENABLE_METRICS: "true"
      ENABLE_PROMETHEUS: "true"
      ENABLE_EVENTS: "true"
      ACCESS_LOG: "true"
      CACHE_TTL: "30"

    # Health check configuration
    healthCheck:
      enabled: true
      interval: 30
      timeout: 10

  # Use Deployment for stateless registry
  workloadType: "Deployment"

  # Persistence disabled for stateless registry
  persistence:
    enabled: false # Registry is stateless

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Service configuration
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000

  # Ingress configuration (disabled by default)
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: mcp-registry.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

# Grafana configuration
mcp-mesh-grafana:
  grafana:
    config:
      adminPassword: "admin"
      allowSignUp: false
      installPlugins: "grafana-piechart-panel"

    datasources:
      tempo:
        enabled: true
        url: "http://mcp-core-mcp-mesh-tempo.mcp-mesh.svc.cluster.local:3200"
      prometheus:
        enabled: true
        url: "http://prometheus:9090"

    persistence:
      enabled: true
      size: 2Gi

    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Tempo configuration
mcp-mesh-tempo:
  tempo:
    config:
      metricsGenerator:
        enabled: true
        prometheusUrl: "http://prometheus:9090/api/v1/write"

      retention: "1h"
      blockDuration: "5m"

    persistence:
      enabled: true
      size: 5Gi

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# Namespace creation
namespaceCreate: true

# Common labels for all resources
commonLabels:
  app.kubernetes.io/part-of: mcp-mesh-core

# Common annotations for all resources
commonAnnotations: {}

# Network policies (disabled by default)
networkPolicies:
  enabled: false

# Pod disruption budgets (disabled by default)
podDisruptionBudgets:
  enabled: false

# Service monitors for Prometheus (disabled by default)
serviceMonitors:
  enabled: false

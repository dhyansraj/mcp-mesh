# Default values for mcp-mesh-agent
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mcp-mesh-base # Agent base image
  pullPolicy: IfNotPresent # For production use
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: false # Some agents need root for hello-world example
  runAsUser: 0
  fsGroup: 0

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false # Python apps often need writable filesystem
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080 # Standard agent port
  targetPort: 8080
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: mcp-agent.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Registry configuration (matches working examples)
registry:
  host: "mcp-mesh-registry"
  port: "8000"
  url: "http://mcp-mesh-registry:8000"

# Mesh configuration
mesh:
  enabled: true
  debug: true
  logLevel: "DEBUG"
  tracingEnabled: true
  metricsEnabled: true

# Agent-specific configuration
agent:
  # Python script to run (required)
  script: "/app/agent.py" # Matches working examples
  # Example: "/app/agents/hello_world.py"

  # Agent metadata for mesh registration (optional - usually comes from @mesh.agent decorator)
  name: "" # Override agent name (empty = use from script's @mesh.agent decorator)
  version: "1.0.0"
  description: ""

  # Capabilities provided by this agent
  capabilities: []
  # Example:
  # - name: greeting
  #   version: "1.0.0"
  #   description: "Provides greeting functionality"

  # Dependencies required by this agent
  dependencies: []
  # Example:
  # - name: translator
  #   version: ">=1.0.0"
  #   optional: false

  # Health check configuration
  healthCheck:
    enabled: true
    interval: 30
    timeout: 10

  # Retry configuration
  retry:
    attempts: 3
    delay: 5
    maxDelay: 30

  # Performance configuration
  performance:
    timeout: 30
    maxConcurrent: 10
    cacheEnabled: true
    cacheTTL: 300

  # HTTP wrapper configuration
  http:
    enabled: true
    host: "0.0.0.0"
    port: 0 # 0 = auto-assign
    cors:
      enabled: true
      origins: ["*"]

  # Python runtime configuration
  python:
    # Python interpreter (leave empty to auto-detect)
    interpreter: ""
    # Additional Python packages to install
    packages: []
    # Example:
    # - numpy==1.24.0

  # Observability configuration - matches k8s examples
  observability:
    distributedTracing:
      enabled: true
      redisUrl: "redis://mcp-mesh-redis:6379"
    telemetryEndpoint: "tempo:4317"
    tracing:
      enabled: true
    metrics:
      enabled: true

  # Additional environment variables for tracing (matches k8s examples)
  environment:
    MCP_MESH_DISTRIBUTED_TRACING_ENABLED: "true"
    REDIS_URL: "redis://mcp-mesh-redis:6379"
    TELEMETRY_ENDPOINT: "tempo:4317"
    MCP_MESH_TRACING_ENABLED: "true"
    MCP_MESH_METRICS_ENABLED: "true"
    # - pandas>=1.5.0

    # Environment variables for Python
    env: []
    # Example:
    # - name: PYTHONUNBUFFERED
    #   value: "1"

# Duplicate registry and mesh sections removed - see lines 85-97 for the main definitions

# ConfigMap for agent code
agentCode:
  # Enable mounting agent code from ConfigMap
  enabled: false
  # ConfigMap name (for external ConfigMap)
  configMapName: ""
  # Script path (for auto-generated ConfigMap from file)
  scriptPath: ""
  # Mount path
  mountPath: "/app/agent"

# Health probe configurations (matches working examples)
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Persistence configuration
persistence:
  enabled: false
  # Storage class name
  storageClass: ""
  # Access mode
  accessMode: ReadWriteOnce
  # Size of the volume
  size: 1Gi
  # Existing PVC to use
  existingClaim: ""
  # Annotations for the PVC
  annotations: {}
  # Mount path
  mountPath: /data
  # Subpath within the volume
  subPath: ""

# Environment variables
env:
  []
  # - name: CUSTOM_ENV_VAR
  #   value: "custom_value"

# Environment variables from ConfigMaps or Secrets
envFrom:
  []
  # - configMapRef:
  #     name: special-config
  # - secretRef:
  #     name: special-secret

# Secrets for sensitive data
secrets:
  {}
  # Example:
  # API_KEY: "your-api-key"
  # DATABASE_PASSWORD: "your-password"

# Existing secret to use
existingSecret: ""

# Duplicate probe sections removed - see lines 211-236 for the main probe definitions

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: mcp-mesh
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 8080

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  honorLabels: true
  metricRelabelings: []
  relabelings: []

# Pod Monitor for Prometheus
podMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  honorLabels: true
  metricRelabelings: []
  relabelings: []

# Extra volumes and volume mounts
extraVolumes:
  []
  # - name: extra-volume
  #   secret:
  #     secretName: extra-secret

extraVolumeMounts:
  []
  # - name: extra-volume
  #   mountPath: /etc/extra
  #   readOnly: true

# Init containers
initContainers:
  []
  # - name: wait-for-registry
  #   image: busybox:1.35
  #   command: ['sh', '-c', 'until nc -z mcp-mesh-registry 8080; do echo waiting for registry; sleep 2; done;']

# Sidecar containers
sidecarContainers:
  []
  # - name: logging-sidecar
  #   image: fluent/fluent-bit:1.9
  #   volumeMounts:
  #     - name: varlog
  #       mountPath: /var/log

# Extra labels for all resources
commonLabels:
  {}
  # team: backend
  # environment: production

# Extra annotations for all resources
commonAnnotations:
  {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "8080"

# Pod topology spread constraints
topologySpreadConstraints:
  []
  # - maxSkew: 1
  #   topologyKey: kubernetes.io/hostname
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: mcp-mesh-agent

# Priority class name
priorityClassName: ""

# Security policies
podSecurityPolicy:
  enabled: false

# Runtime class name (for container runtime selection)
runtimeClassName: ""

# DNS policy
dnsPolicy: ClusterFirst

# DNS config
dnsConfig:
  {}
  # nameservers:
  #   - 1.1.1.1
  # searches:
  #   - ns1.svc.cluster-domain.example
  #   - my.dns.search.suffix

# Host aliases
hostAliases:
  []
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"

# Termination grace period
terminationGracePeriodSeconds: 30

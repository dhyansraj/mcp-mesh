# MCP Mesh Docker Compose Example
# Demonstrates Go registry + Python agents architecture using published Docker images
#
# Services:
# - registry: Go-based registry with SQLite storage (mcpmesh/registry:0.3)
# - hello-world-agent: Python agent with greeting capabilities (mcpmesh/python-runtime:0.3)
# - system-agent: Python agent with system monitoring capabilities (mcpmesh/python-runtime:0.3)
# - fastmcp-agent: FastMCP service with mesh integration (mcpmesh/python-runtime:0.3)
# - dependent-agent: Service that depends on fastmcp-agent (mcpmesh/python-runtime:0.3)
#
# Usage:
#   docker-compose up
#
# Access points:
#   - Registry API: http://localhost:8000
#   - Hello World Agent: http://localhost:8081
#   - System Agent: http://localhost:8082
#   - FastMCP Agent: http://localhost:8083
#   - Dependent Agent: http://localhost:8084
#   - Redis: localhost:6379
#   - Grafana Dashboard: http://localhost:3000 (admin/admin)
#   - Tempo Tracing: http://localhost:3200
#   - Use meshctl to interact with the mesh

services:
  # Redis service for session storage and distributed tracing
  redis:
    image: redis:7-alpine
    container_name: mcp-mesh-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-mesh
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL database service
  postgres:
    image: postgres:15
    container_name: mcp-mesh-postgres
    environment:
      - POSTGRES_DB=mcpmesh
      - POSTGRES_USER=mcpmesh
      - POSTGRES_PASSWORD=mcpmesh123
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mcp-mesh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "mcpmesh", "-d", "mcpmesh"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Go-based registry service (built locally)
  registry:
    build:
      context: ../../
      dockerfile: examples/docker-examples/registry/Dockerfile
    container_name: mcp-mesh-registry
    ports:
      - "8000:8000"
    environment:
      # Registry configuration - use the actual env vars the Go registry expects
      - HOST=${REGISTRY_HOST:-0.0.0.0}
      - PORT=${REGISTRY_PORT:-8000}
      - MCP_MESH_LOG_LEVEL=${MCP_MESH_LOG_LEVEL:-INFO}
      - MCP_MESH_DEBUG_MODE=${MCP_MESH_DEBUG_MODE:-false}
      # PostgreSQL connection
      - DATABASE_URL=postgres://mcpmesh:mcpmesh123@postgres:5432/mcpmesh?sslmode=disable
      # Redis connection for tracing and session storage
      - REDIS_URL=redis://redis:6379
      # Enable distributed tracing for registry to test stream consumption
      - MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true
      - TRACE_EXPORTER_TYPE=otlp
      - TELEMETRY_ENDPOINT=tempo:4317
      - TELEMETRY_PROTOCOL=grpc
    networks:
      - mcp-mesh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Hello World Python agent - built locally
  hello-world-agent:
    build:
      context: ../../
      dockerfile: examples/docker-examples/agents/base/Dockerfile.base
    container_name: mcp-mesh-hello-world
    hostname: hello-world-agent
    ports:
      - "8081:8080"
    volumes:
      # Mount agent code from outside
      - ../simple/hello_world.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration - agent works standalone if registry unavailable
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=hello-world-agent
      - MCP_MESH_HTTP_PORT=8080
      - POD_IP=hello-world-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=hello-world
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=5
      - MCP_MESH_HEALTH_INTERVAL=5
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      # Enable distributed tracing
      - MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
      # Redis connection for tracing and session storage
      - REDIS_URL=redis://redis:6379
    # Agents are resilient - no registry dependency needed
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "python3",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # System Agent Python service - built locally
  system-agent:
    build:
      context: ../../
      dockerfile: examples/docker-examples/agents/base/Dockerfile.base
    container_name: mcp-mesh-system-agent
    hostname: system-agent
    ports:
      - "8082:8080"
    volumes:
      # Mount agent code from outside
      - ../simple/system_agent.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration - agent works standalone if registry unavailable
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=system-agent
      - MCP_MESH_HTTP_PORT=8080
      - POD_IP=system-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=system-agent
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=5
      - MCP_MESH_HEALTH_INTERVAL=5
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      # Enable distributed tracing for system-agent
      - MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
      # Redis connection for tracing and session storage
      - REDIS_URL=redis://redis:6379
    # Agents are resilient - no registry dependency needed
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "python3",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # FastMCP Agent with mesh integration - built locally
  fastmcp-agent:
    build:
      context: ../../
      dockerfile: examples/docker-examples/agents/base/Dockerfile.base
    container_name: mcp-mesh-fastmcp-agent
    hostname: fastmcp-agent
    ports:
      - "8083:8080"
    volumes:
      # Mount FastMCP agent code
      - ../simple/fastmcp_agent.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=fastmcp-agent
      - MCP_MESH_HTTP_PORT=8080
      - POD_IP=fastmcp-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=fastmcp-service
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=5
      - MCP_MESH_HEALTH_INTERVAL=5
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      # Enable distributed tracing
      - MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
      # Redis connection for tracing and session storage
      - REDIS_URL=redis://redis:6379
    # Agents are resilient - no registry dependency needed
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "python3",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Dependent Agent that uses FastMCP agent's time service - built locally
  dependent-agent:
    build:
      context: ../../
      dockerfile: examples/docker-examples/agents/base/Dockerfile.base
    container_name: mcp-mesh-dependent-agent
    hostname: dependent-agent
    ports:
      - "8084:8080"
    volumes:
      # Mount dependent agent code
      - ../simple/dependent_agent.py:/app/agent.py:ro
    working_dir: /app
    command: ["python", "agent.py"]
    environment:
      # MCP Mesh configuration
      - MCP_MESH_REGISTRY_URL=http://registry:8000
      - MCP_MESH_REGISTRY_HOST=registry
      - MCP_MESH_REGISTRY_PORT=8000
      - HOST=0.0.0.0
      - MCP_MESH_HTTP_HOST=dependent-agent
      - MCP_MESH_HTTP_PORT=8080
      - POD_IP=dependent-agent
      - MCP_MESH_HTTP_ENABLED=true
      - MCP_MESH_AGENT_NAME=dependent-service
      - MCP_MESH_NAMESPACE=${MCP_MESH_NAMESPACE:-default}
      - MCP_MESH_ENABLED=true
      - MCP_MESH_AUTO_RUN=${MCP_MESH_AUTO_RUN:-true}
      - MCP_MESH_AUTO_RUN_INTERVAL=5
      - MCP_MESH_HEALTH_INTERVAL=5
      - MCP_MESH_LOG_LEVEL=DEBUG
      - MCP_MESH_DEBUG_MODE=true
      - MCP_MESH_DYNAMIC_UPDATES=${MCP_MESH_DYNAMIC_UPDATES:-true}
      # Enable distributed tracing
      - MCP_MESH_DISTRIBUTED_TRACING_ENABLED=true
      - MCP_MESH_UPDATE_STRATEGY=${MCP_MESH_UPDATE_STRATEGY:-immediate}
      # Redis connection for tracing and session storage
      - REDIS_URL=redis://redis:6379
    # Agents are resilient - no dependencies needed, can start in any order
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "python3",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Tempo - Distributed tracing backend
  tempo:
    image: grafana/tempo:2.8.1
    container_name: mcp-mesh-tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ../../observability/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/var/tempo
    ports:
      - "3200:3200" # Tempo HTTP
      - "4327:4317" # OTLP gRPC receiver
      - "4328:4318" # OTLP HTTP receiver
    networks:
      - mcp-mesh
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3200/ready",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Grafana - Observability and visualization
  grafana:
    image: grafana/grafana:11.4.0
    container_name: mcp-mesh-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      # Set MCP Mesh Overview as default home dashboard
      - GF_DEFAULT_PREFERENCES_HOME_DASHBOARD_UID=mcp-mesh-overview
      - GF_USERS_HOME_PAGE=/d/mcp-mesh-overview/mcp-mesh-overview
      - GF_USERS_DEFAULT_THEME=dark
      # Disable welcome screen
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_NEWS_NEWS_FEED_ENABLED=false
    volumes:
      # Custom Grafana configuration
      - ../../observability/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      # Configuration and provisioning
      - ../../observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../../observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
      # Themes and static files
      - ../../observability/grafana/themes:/usr/share/grafana/public/css/themes:ro
      # Persistent data
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - mcp-mesh
    depends_on:
      tempo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

networks:
  mcp-mesh:
    driver: bridge
    name: mcp-mesh-network

volumes:
  postgres_data:
    name: mcp-mesh-postgres-data
  redis_data:
    name: mcp-mesh-redis-data
  tempo_data:
    name: mcp-mesh-tempo-data
  grafana_data:
    name: mcp-mesh-grafana-data

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-mesh-registry
  namespace: mcp-mesh
  labels:
    app.kubernetes.io/name: mcp-mesh-registry
    app.kubernetes.io/component: registry
spec:
  # No serviceName needed for Deployment
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mcp-mesh-registry
      app.kubernetes.io/component: registry
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mcp-mesh-registry
        app.kubernetes.io/component: registry
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-mesh-registry
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      initContainers:
        # Wait for database (if using external DB)
        - name: wait-for-db
          image: busybox:1.35
          command: ["sh", "-c"]
          args:
            - |
              if [ "$DATABASE_TYPE" != "sqlite" ]; then
                echo "Waiting for database at $DATABASE_HOST:$DATABASE_PORT..."
                until nc -z $DATABASE_HOST $DATABASE_PORT; do
                  echo "Database not ready, waiting..."
                  sleep 2
                done
                echo "Database is ready!"
              else
                echo "Using SQLite, no external database to wait for"
              fi
          env:
            - name: DATABASE_TYPE
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: DATABASE_TYPE
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: DATABASE_HOST
                  optional: true
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: DATABASE_PORT
                  optional: true

        # Wait for Redis (required for distributed tracing)
        - name: wait-for-redis
          image: busybox:1.35
          command: ["sh", "-c"]
          args:
            - |
              if [ "$MCP_MESH_DISTRIBUTED_TRACING_ENABLED" = "true" ]; then
                echo "Waiting for Redis at mcp-mesh-redis:6379..."
                timeout=300
                elapsed=0
                until nc -z mcp-mesh-redis 6379; do
                  if [ $elapsed -ge $timeout ]; then
                    echo "❌ Timeout waiting for Redis after ${timeout}s"
                    exit 1
                  fi
                  echo "Redis not ready, waiting... (${elapsed}s/${timeout}s)"
                  sleep 5
                  elapsed=$((elapsed + 5))
                done
                echo "✅ Redis is ready!"
                # Test Redis connectivity
                echo "Testing Redis connection..."
                echo "PING" | nc mcp-mesh-redis 6379 | grep -q "PONG" && echo "✅ Redis PING successful" || echo "⚠️ Redis PING failed"
              else
                echo "Distributed tracing disabled, skipping Redis check"
              fi
          env:
            - name: MCP_MESH_DISTRIBUTED_TRACING_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: MCP_MESH_DISTRIBUTED_TRACING_ENABLED

        # Wait for Tempo (required for OTLP trace export)
        - name: wait-for-tempo
          image: busybox:1.35
          command: ["sh", "-c"]
          args:
            - |
              if [ "$MCP_MESH_DISTRIBUTED_TRACING_ENABLED" = "true" ] && [ "$TRACE_EXPORTER_TYPE" = "otlp" ]; then
                echo "Waiting for Tempo OTLP endpoint at tempo:4317..."
                timeout=300
                elapsed=0
                until nc -z tempo 4317; do
                  if [ $elapsed -ge $timeout ]; then
                    echo "❌ Timeout waiting for Tempo after ${timeout}s"
                    exit 1
                  fi
                  echo "Tempo not ready, waiting... (${elapsed}s/${timeout}s)"
                  sleep 5
                  elapsed=$((elapsed + 5))
                done
                echo "✅ Tempo OTLP endpoint is ready!"
                # Additional check for Tempo readiness
                echo "Checking Tempo readiness endpoint..."
                timeout 10 sh -c 'until nc -z tempo 3200; then break; done' && echo "✅ Tempo HTTP endpoint ready" || echo "⚠️ Tempo HTTP endpoint not ready"
              else
                echo "OTLP tracing disabled, skipping Tempo check"
              fi
          env:
            - name: MCP_MESH_DISTRIBUTED_TRACING_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: MCP_MESH_DISTRIBUTED_TRACING_ENABLED
            - name: TRACE_EXPORTER_TYPE
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: TRACE_EXPORTER_TYPE

        # Initialize database schema
        - name: init-db
          image: busybox:1.35
          command: ["echo", "Database initialized"]
          env:
            - name: DATABASE_TYPE
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: DATABASE_TYPE
          envFrom:
            - configMapRef:
                name: mcp-registry-config
            - secretRef:
                name: mcp-registry-secret
          volumeMounts:
            - name: config
              mountPath: /etc/mcp-mesh

      containers:
        - name: registry
          image: mcp-mesh/registry:latest
          imagePullPolicy: Never
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            # Pod information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            # Registry instance ID for identification
            - name: REGISTRY_INSTANCE_ID
              value: "$(POD_NAME)"
            # Ensure proper hostname for consumer name generation
            - name: HOSTNAME
              value: "$(POD_NAME)"
            # Explicit critical environment variables for tracing
            - name: MCP_MESH_DISTRIBUTED_TRACING_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: MCP_MESH_DISTRIBUTED_TRACING_ENABLED
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: REDIS_URL
            - name: TELEMETRY_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: TELEMETRY_ENDPOINT
            - name: TRACE_EXPORTER_TYPE
              valueFrom:
                configMapKeyRef:
                  name: mcp-registry-config
                  key: TRACE_EXPORTER_TYPE
          envFrom:
            - configMapRef:
                name: mcp-registry-config
            - secretRef:
                name: mcp-registry-secret
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8000
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m # Increased for better startup performance
              memory: 256Mi # Increased for tracing and Redis operations
          volumeMounts:
            - name: config
              mountPath: /etc/mcp-mesh
              readOnly: true
            - name: tls
              mountPath: /etc/tls
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true

      volumes:
        - name: config
          configMap:
            name: mcp-registry-config
        - name: tls
          secret:
            secretName: mcp-registry-tls
            optional: true

      # Anti-affinity to spread replicas across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mcp-mesh-registry
                    app.kubernetes.io/component: registry
                topologyKey: kubernetes.io/hostname
# No persistent storage needed - registry is stateless and uses external database

---
# Example MCPAgent custom resource
apiVersion: mesh.mcp.io/v1alpha1
kind: MCPAgent
metadata:
  name: hello-world-agent
  namespace: mcp-mesh
spec:
  # Agent script (can be inline or reference a ConfigMap)
  script: /app/agents/hello_world.py
  scriptConfigMap: mcp-agent-code # Optional: use code from ConfigMap

  # Basic metadata
  version: "1.0.0"
  description: "A friendly greeting agent with multiple capabilities"

  # Deployment configuration
  replicas: 2
  image: mcp-mesh/python-runtime:latest
  imagePullPolicy: Never

  # Registry configuration
  registryURL: http://mcp-mesh-registry:8080
  registryTimeout: 30

  # Capabilities provided by this agent
  capabilities:
    - name: greeting
      version: "1.0.0"
      description: "Provides multilingual greeting functionality"
      timeout: 30
      parameters:
        type: object
        properties:
          name:
            type: string
            description: "Name of the person to greet"
          language:
            type: string
            description: "Language code (en, es, fr, etc.)"
            default: "en"
        required:
          - name

    - name: time_telling
      version: "1.0.0"
      description: "Provides current time information"
      timeout: 10
      parameters:
        type: object
        properties:
          timezone:
            type: string
            description: "Timezone (e.g., America/New_York)"

    - name: calculation
      version: "1.0.0"
      description: "Performs mathematical calculations"
      timeout: 10

  # Dependencies
  dependencies:
    - name: translation-service
      version: ">=1.0.0"
      optional: true

    - name: cache-service
      version: ">=2.0.0"
      optional: true

  # HTTP configuration
  http:
    enabled: true
    port: 0 # Auto-assign
    cors:
      enabled: true
      allowedOrigins:
        - "*"

  # Health check configuration
  healthCheck:
    enabled: true
    interval: 30
    timeout: 10

  # Resource requirements
  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: "100m"
      memory: "256Mi"

  # Environment variables
  env:
    - name: LOG_LEVEL
      value: "INFO"
    - name: CACHE_TTL
      value: "300"
    - name: API_KEY
      valueFrom:
        secretKeyRef:
          name: mcp-agent-secret
          key: api-key

  # Node selection
  nodeSelector:
    node-role.kubernetes.io/worker: "true"

  # Tolerations
  tolerations:
    - key: "workload"
      operator: "Equal"
      value: "mcp"
      effect: "NoSchedule"

  # Anti-affinity to spread replicas
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: hello-world-agent
            topologyKey: kubernetes.io/hostname

  # Service configuration
  service:
    enabled: true
    type: ClusterIP
    port: 8080
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/path: "/metrics"

  # Persistence (optional)
  persistence:
    enabled: true
    size: "5Gi"
    storageClass: "standard"
    accessMode: ReadWriteOnce

  # Monitoring
  monitoring:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: "30s"
      scrapeTimeout: "10s"

  # Mesh configuration
  meshConfig:
    debug: false
    logLevel: "INFO"
    tracingEnabled: false
    metricsEnabled: true

  # Decorator metadata
  decoratorMetadata:
    mesh_agent:
      enable_http: true
      health_interval: 30
      timeout: 60
      retry_attempts: 3
      enable_caching: true
      cache_ttl: 300
      fallback_mode: true
      circuit_breaker:
        enabled: true
        failure_threshold: 5
        recovery_timeout: 30
      performance_profile:
        max_concurrent: 10
        queue_size: 100

---
# Example: Simple inline script agent
apiVersion: mesh.mcp.io/v1alpha1
kind: MCPAgent
metadata:
  name: simple-echo-agent
  namespace: mcp-mesh
spec:
  # Inline script
  script: |
    #!/usr/bin/env python3
    from fastmcp import FastMCP
    from mcp_mesh import mesh_agent

    mcp = FastMCP("echo-agent")

    @mcp.tool()
    @mesh_agent(capabilities=["echo"], enable_http=True)
    def echo(message: str) -> str:
        return f"Echo: {message}"

    if __name__ == "__main__":
        mcp.run()

  version: "1.0.0"
  description: "Simple echo agent"
  replicas: 1

  capabilities:
    - name: echo
      version: "1.0.0"
      description: "Echoes back the input message"

  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"

---
# Example: Data processing agent with dependencies
apiVersion: mesh.mcp.io/v1alpha1
kind: MCPAgent
metadata:
  name: data-processor-agent
  namespace: mcp-mesh
spec:
  scriptConfigMap: data-processor-code
  version: "2.0.0"
  description: "Advanced data processing agent"
  replicas: 3

  capabilities:
    - name: data_transformation
      version: "2.0.0"
      description: "Transforms data between formats"
      timeout: 60

    - name: data_validation
      version: "2.0.0"
      description: "Validates data against schemas"
      timeout: 30

    - name: data_aggregation
      version: "2.0.0"
      description: "Aggregates data from multiple sources"
      timeout: 120

  dependencies:
    - name: database-service
      version: ">=3.0.0"
      optional: false

    - name: cache-service
      version: ">=2.0.0"
      optional: false

    - name: queue-service
      version: ">=1.5.0"
      optional: true

  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "4Gi"

  # High availability configuration
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: data-processor-agent
          topologyKey: kubernetes.io/hostname

  # Persistence for data processing
  persistence:
    enabled: true
    size: "50Gi"
    storageClass: "fast-ssd"
    accessMode: ReadWriteOnce

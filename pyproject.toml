[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-mesh"
dynamic = ["version"]
description = "A production-ready service mesh for Model Context Protocol (MCP) services with advanced features"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "MCP Mesh Contributors" },
]
keywords = [
    "mcp",
    "model-context-protocol",
    "service-mesh",
    "anthropic",
    "sdk",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "mcp>=1.9.0",
    "fastmcp>=2.7.0",
    "uvicorn>=0.34.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.0.0",
    "black>=25.0.0",
    "isort>=6.0.0",
    "mypy>=1.16.0",
    "ruff>=0.11.0",
    "pre-commit>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/mcp-mesh"
Documentation = "https://mcp-mesh.readthedocs.io"
Repository = "https://github.com/yourusername/mcp-mesh"
Issues = "https://github.com/yourusername/mcp-mesh/issues"

# [project.scripts]
# Python CLI and server entry points have been removed in favor of Go implementations

[tool.hatch.version]
path = "packages/mcp_mesh/src/mcp_mesh/__init__.py"

[tool.hatch.build.targets.wheel]
packages = [
    "packages/mcp_mesh/src/mcp_mesh",
    "packages/mcp_mesh_runtime/src/mcp_mesh_runtime",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_mesh", "mcp_mesh_runtime"]
known_third_party = ["mcp"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
]
ignore_missing_imports = false

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=packages/mcp_mesh/src/mcp_mesh",
    "--cov=packages/mcp_mesh_runtime/src/mcp_mesh_runtime",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["packages/mcp_mesh/src/mcp_mesh", "packages/mcp_mesh_runtime/src/mcp_mesh_runtime"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests
